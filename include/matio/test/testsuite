#! /bin/sh
# Generated from ../../../src/matio/test/testsuite.at by GNU Autoconf 2.68.
#
# Copyright (C) 2009, 2010 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :

else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :

else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  # We cannot yet assume a decent shell, so we have to provide a
	# neutralization value for shells without unset; and this also
	# works around shells that cannot unset nonexistent variables.
	# Preserve -v and -x to the replacement shell.
	BASH_ENV=/dev/null
	ENV=/dev/null
	(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
	export CONFIG_SHELL
	case $- in # ((((
	  *v*x* | *x*v* ) as_opts=-vx ;;
	  *v* ) as_opts=-v ;;
	  *x* ) as_opts=-x ;;
	  * ) as_opts= ;;
	esac
	exec "$CONFIG_SHELL" $as_opts "$as_myself" ${1+"$@"}
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -p'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -p'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -p'
  fi
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
	test -d "$1/.";
      else
	case $1 in #(
	-*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=auto
# List of the tested programs.
at_tested='test_mat'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='????'
# Description of all the test groups.
at_help_all="1;mat4_read.at:29;Read 2d double-precision array;mat4_read_le;
2;mat4_read.at:47;Read 2d double-precision complex array;mat4_read_le;
3;mat4_read.at:65;Read 2D character array;mat4_read_le;
4;mat4_read.at:83;Read small v4 file;mat4_read_le;
5;mat4_readslab_le.at:29;Read linear slab of double-precision array;mat4_readslab readslab read_data_linear;
6;mat4_read_be.at:29;Read 2d double-precision array;mat4_read_be;
7;mat4_read_be.at:47;Read 2d double-precision complex array;mat4_read_be;
8;mat4_read_be.at:65;Read 2D character array;mat4_read_be;
9;mat4_read_be.at:83;Read small v4 file;mat4_read_be;
10;mat4_readslab_be.at:29;Read linear slab of double-precision array;mat4_readslab readslab read_data_linear;
11;mat5_uncompressed_read_le.at:27;Read 2D double-precision array;;
12;mat5_uncompressed_read_le.at:44;Read 2D single-precision array;;
13;mat5_uncompressed_read_le.at:61;Read 2D 64-bit integer array;;
14;mat5_uncompressed_read_le.at:78;Read 2D 64-bit unsigned integer array;;
15;mat5_uncompressed_read_le.at:95;Read 2D 32-bit integer array;;
16;mat5_uncompressed_read_le.at:112;Read 2D 32-bit unsigned integer array;;
17;mat5_uncompressed_read_le.at:129;Read 2D 16-bit integer array;;
18;mat5_uncompressed_read_le.at:146;Read 2D 16-bit unsigned integer array;;
19;mat5_uncompressed_read_le.at:163;Read 2D 8-bit integer array;;
20;mat5_uncompressed_read_le.at:180;Read 2D 8-bit unsigned integer array;;
21;mat5_uncompressed_read_le.at:197;Read 2D double-precision complex array;;
22;mat5_uncompressed_read_le.at:214;Read 2D single-precision complex array;;
23;mat5_uncompressed_read_le.at:231;Read 2D 64-bit integer complex array;;
24;mat5_uncompressed_read_le.at:248;Read 2D 64-bit unsigned integer complex array;;
25;mat5_uncompressed_read_le.at:265;Read 2D 32-bit integer complex array;;
26;mat5_uncompressed_read_le.at:282;Read 2D 32-bit unsigned integer complex array;;
27;mat5_uncompressed_read_le.at:299;Read 2D 16-bit integer complex array;;
28;mat5_uncompressed_read_le.at:316;Read 2D 16-bit unsigned integer complex array;;
29;mat5_uncompressed_read_le.at:333;Read 2D 8-bit integer complex array;;
30;mat5_uncompressed_read_le.at:350;Read 2D 8-bit unsigned integer complex array;;
31;mat5_uncompressed_read_le.at:367;Read 2D logical array;;
32;mat5_uncompressed_read_le.at:385;Read double-precision sparse array;;
33;mat5_uncompressed_read_le.at:403;Read double-precision sparse complex array;;
34;mat5_uncompressed_read_le.at:421;Read empty array;;
35;mat5_uncompressed_read_le.at:434;Read 2D character array;;
36;mat5_uncompressed_read_le.at:451;Read empty structure array;;
37;mat5_uncompressed_read_le.at:464;Read empty structure array with fields;;
38;mat5_uncompressed_read_le.at:481;Read structure array with empty fields;;
39;mat5_uncompressed_read_le.at:519;Read structure array with double-precision fields;;
40;mat5_uncompressed_read_le.at:568;Read structure array with single-precision fields;;
41;mat5_uncompressed_read_le.at:617;Read structure array with 64-bit integer fields;;
42;mat5_uncompressed_read_le.at:666;Read structure array with 64-bit unsigned integer fields;;
43;mat5_uncompressed_read_le.at:715;Read structure array with 32-bit integer fields;;
44;mat5_uncompressed_read_le.at:764;Read structure array with 32-bit unsigned integer fields;;
45;mat5_uncompressed_read_le.at:813;Read structure array with 16-bit integer fields;;
46;mat5_uncompressed_read_le.at:862;Read structure array with 16-bit unsigned integer fields;;
47;mat5_uncompressed_read_le.at:911;Read structure array with 8-bit integer fields;;
48;mat5_uncompressed_read_le.at:960;Read structure array with 8-bit unsigned integer fields;;
49;mat5_uncompressed_read_le.at:1009;Read structure array with complex double-precision fields;;
50;mat5_uncompressed_read_le.at:1058;Read structure array with complex single-precision fields;;
51;mat5_uncompressed_read_le.at:1107;Read structure array with complex 64-bit integer fields;;
52;mat5_uncompressed_read_le.at:1156;Read structure array with complex 64-bit unsigned integer fields;;
53;mat5_uncompressed_read_le.at:1205;Read structure array with complex 32-bit integer fields;;
54;mat5_uncompressed_read_le.at:1254;Read structure array with complex 32-bit unsigned integer fields;;
55;mat5_uncompressed_read_le.at:1303;Read structure array with complex 16-bit integer fields;;
56;mat5_uncompressed_read_le.at:1352;Read structure array with complex 16-bit unsigned integer fields;;
57;mat5_uncompressed_read_le.at:1401;Read structure array with complex 8-bit integer fields;;
58;mat5_uncompressed_read_le.at:1450;Read structure array with complex 8-bit unsigned integer fields;;
59;mat5_uncompressed_read_le.at:1499;Read structure array with logical fields;;
60;mat5_uncompressed_read_le.at:1558;Read structure array with double-precision sparse fields;;
61;mat5_uncompressed_read_le.at:1613;Read structure array with complex double-precision sparse fields;;
62;mat5_uncompressed_read_le.at:1668;Read structure array with character fields;;
63;mat5_uncompressed_read_le.at:1713;Read empty cell array;;
64;mat5_uncompressed_read_le.at:1726;Read cell array with empty arrays;;
65;mat5_uncompressed_read_le.at:1799;Read cell array with double-precision arrays;;
66;mat5_uncompressed_read_le.at:1863;Read cell array with single-precision arrays;;
67;mat5_uncompressed_read_le.at:1927;Read cell array with 64-bit integer arrays;;
68;mat5_uncompressed_read_le.at:1991;Read cell array with 64-bit unsigned integer arrays;;
69;mat5_uncompressed_read_le.at:2055;Read cell array with 32-bit integer arrays;;
70;mat5_uncompressed_read_le.at:2119;Read cell array with 32-bit unsigned integer arrays;;
71;mat5_uncompressed_read_le.at:2183;Read cell array with 16-bit integer arrays;;
72;mat5_uncompressed_read_le.at:2247;Read cell array with 16-bit unsigned integer arrays;;
73;mat5_uncompressed_read_le.at:2311;Read cell array with 8-bit integer arrays;;
74;mat5_uncompressed_read_le.at:2375;Read cell array with 8-bit unsigned integer arrays;;
75;mat5_uncompressed_read_le.at:2439;Read cell array with logical arrays;;
76;mat5_uncompressed_read_le.at:2494;Read cell array with double-precision sparse arrays;;
77;mat5_uncompressed_read_le.at:2547;Read cell array with complex double-precision sparse arrays;;
78;mat5_uncompressed_read_le.at:2600;Read cell array with character arrays;;
79;mat5_uncompressed_read_le.at:2641;Read cell array with empty structure arrays;;
80;mat5_uncompressed_read_le.at:2701;Read cell array with structure arrays (numeric fields);;
81;mat5_uncompressed_read_le.at:3554;Read cell array with structure arrays (sparse fields);;
82;mat5_uncompressed_read_le.at:3663;Read cell array structure arrays (character fields);;
83;mat5_uncompressed_readslab_le.at:1;Read slab of double-precision array;mat5_uncompressed_readslab readslab;
84;mat5_uncompressed_readslab_le.at:33;Read slab of single-precision array;mat5_uncompressed_readslab readslab;
85;mat5_uncompressed_readslab_le.at:65;Read slab of 64-bit integer array;mat5_uncompressed_readslab readslab;
86;mat5_uncompressed_readslab_le.at:97;Read slab of 64-bit unsigned integer array;mat5_uncompressed_readslab readslab;
87;mat5_uncompressed_readslab_le.at:129;Read slab of 32-bit integer array;mat5_uncompressed_readslab readslab;
88;mat5_uncompressed_readslab_le.at:161;Read slab of 32-bit unsigned integer array;mat5_uncompressed_readslab readslab;
89;mat5_uncompressed_readslab_le.at:193;Read slab of 16-bit integer array;mat5_uncompressed_readslab readslab;
90;mat5_uncompressed_readslab_le.at:225;Read slab of 16-bit unsigned integer array;mat5_uncompressed_readslab readslab;
91;mat5_uncompressed_readslab_le.at:257;Read slab of 8-bit integer array;mat5_uncompressed_readslab readslab;
92;mat5_uncompressed_readslab_le.at:289;Read slab of 8-bit unsigned integer array;mat5_uncompressed_readslab readslab;
93;mat5_uncompressed_readslab_le.at:321;Read slab of double-precision complex array;mat5_uncompressed_readslab readslab;
94;mat5_uncompressed_readslab_le.at:353;Read slab of single-precision complex array;mat5_uncompressed_readslab readslab;
95;mat5_uncompressed_readslab_le.at:385;Read slab of 64-bit integer complex array;mat5_uncompressed_readslab readslab;
96;mat5_uncompressed_readslab_le.at:417;Read slab of 64-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
97;mat5_uncompressed_readslab_le.at:449;Read slab of 32-bit integer complex array;mat5_uncompressed_readslab readslab;
98;mat5_uncompressed_readslab_le.at:481;Read slab of 32-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
99;mat5_uncompressed_readslab_le.at:513;Read slab of 16-bit integer complex array;mat5_uncompressed_readslab readslab;
100;mat5_uncompressed_readslab_le.at:545;Read slab of 16-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
101;mat5_uncompressed_readslab_le.at:577;Read slab of 8-bit integer complex array;mat5_uncompressed_readslab readslab;
102;mat5_uncompressed_readslab_le.at:609;Read slab of 8-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
103;mat5_uncompressed_readslab_le.at:641;Read linear slab of double-precision array;mat5_uncompressed_readslab readslab read_data_linear;
104;mat5_uncompressed_readslab_le.at:674;Read linear slab of single-precision array;mat5_uncompressed_readslab readslab read_data_linear;
105;mat5_uncompressed_readslab_le.at:707;Read linear slab of 64-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
106;mat5_uncompressed_readslab_le.at:740;Read linear slab of 64-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
107;mat5_uncompressed_readslab_le.at:773;Read linear slab of 32-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
108;mat5_uncompressed_readslab_le.at:806;Read linear slab of 32-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
109;mat5_uncompressed_readslab_le.at:839;Read linear slab of 16-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
110;mat5_uncompressed_readslab_le.at:872;Read linear slab of 16-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
111;mat5_uncompressed_readslab_le.at:905;Read linear slab of 8-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
112;mat5_uncompressed_readslab_le.at:938;Read linear slab of 8-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
113;mat5_uncompressed_readslab_le.at:971;Read linear slab of double-precision complex array;mat5_uncompressed_readslab readslab read_data_linear;
114;mat5_uncompressed_readslab_le.at:1004;Read linear slab of single-precision complex array;mat5_uncompressed_readslab readslab read_data_linear;
115;mat5_uncompressed_readslab_le.at:1037;Read linear slab of 64-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
116;mat5_uncompressed_readslab_le.at:1070;Read linear slab of 64-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
117;mat5_uncompressed_readslab_le.at:1103;Read linear slab of 32-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
118;mat5_uncompressed_readslab_le.at:1136;Read linear slab of 32-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
119;mat5_uncompressed_readslab_le.at:1169;Read linear slab of 16-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
120;mat5_uncompressed_readslab_le.at:1202;Read linear slab of 16-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
121;mat5_uncompressed_readslab_le.at:1235;Read linear slab of 8-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
122;mat5_uncompressed_readslab_le.at:1268;Read linear slab of 8-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
123;mat5_compressed_read_le.at:27;Read 2D double-precision array;;
124;mat5_compressed_read_le.at:45;Read 2D single-precision array;;
125;mat5_compressed_read_le.at:63;Read 2D 64-bit integer array;;
126;mat5_compressed_read_le.at:81;Read 2D 64-bit unsigned integer array;;
127;mat5_compressed_read_le.at:99;Read 2D 32-bit integer array;;
128;mat5_compressed_read_le.at:117;Read 2D 32-bit unsigned integer array;;
129;mat5_compressed_read_le.at:135;Read 2D 16-bit integer array;;
130;mat5_compressed_read_le.at:153;Read 2D 16-bit unsigned integer array;;
131;mat5_compressed_read_le.at:171;Read 2D 8-bit integer array;;
132;mat5_compressed_read_le.at:189;Read 2D 8-bit unsigned integer array;;
133;mat5_compressed_read_le.at:207;Read 2D double-precision complex array;;
134;mat5_compressed_read_le.at:225;Read 2D single-precision complex array;;
135;mat5_compressed_read_le.at:243;Read 2D 64-bit integer complex array;;
136;mat5_compressed_read_le.at:261;Read 2D 64-bit unsigned integer complex array;;
137;mat5_compressed_read_le.at:279;Read 2D 32-bit integer complex array;;
138;mat5_compressed_read_le.at:297;Read 2D 32-bit unsigned integer complex array;;
139;mat5_compressed_read_le.at:315;Read 2D 16-bit integer complex array;;
140;mat5_compressed_read_le.at:333;Read 2D 16-bit unsigned integer complex array;;
141;mat5_compressed_read_le.at:351;Read 2D 8-bit integer complex array;;
142;mat5_compressed_read_le.at:369;Read 2D 8-bit unsigned integer complex array;;
143;mat5_compressed_read_le.at:387;Read 2D logical array;;
144;mat5_compressed_read_le.at:406;Read double-precision sparse array;;
145;mat5_compressed_read_le.at:425;Read double-precision sparse complex array;;
146;mat5_compressed_read_le.at:444;Read empty array;;
147;mat5_compressed_read_le.at:458;Read 2D character array;;
148;mat5_compressed_read_le.at:476;Read empty structure array;;
149;mat5_compressed_read_le.at:490;Read empty structure array with fields;;
150;mat5_compressed_read_le.at:508;Read structure array with empty fields;;
151;mat5_compressed_read_le.at:547;Read structure array with double-precision fields;;
152;mat5_compressed_read_le.at:597;Read structure array with single-precision fields;;
153;mat5_compressed_read_le.at:647;Read structure array with 64-bit integer fields;;
154;mat5_compressed_read_le.at:697;Read structure array with 64-bit unsigned integer fields;;
155;mat5_compressed_read_le.at:747;Read structure array with 32-bit integer fields;;
156;mat5_compressed_read_le.at:797;Read structure array with 32-bit unsigned integer fields;;
157;mat5_compressed_read_le.at:847;Read structure array with 16-bit integer fields;;
158;mat5_compressed_read_le.at:897;Read structure array with 16-bit unsigned integer fields;;
159;mat5_compressed_read_le.at:947;Read structure array with 8-bit integer fields;;
160;mat5_compressed_read_le.at:997;Read structure array with 8-bit unsigned integer fields;;
161;mat5_compressed_read_le.at:1047;Read structure array with complex double-precision fields;;
162;mat5_compressed_read_le.at:1097;Read structure array with complex single-precision fields;;
163;mat5_compressed_read_le.at:1147;Read structure array with complex 64-bit integer fields;;
164;mat5_compressed_read_le.at:1197;Read structure array with complex 64-bit unsigned integer fields;;
165;mat5_compressed_read_le.at:1247;Read structure array with complex 32-bit integer fields;;
166;mat5_compressed_read_le.at:1297;Read structure array with complex 32-bit unsigned integer fields;;
167;mat5_compressed_read_le.at:1347;Read structure array with complex 16-bit integer fields;;
168;mat5_compressed_read_le.at:1397;Read structure array with complex 16-bit unsigned integer fields;;
169;mat5_compressed_read_le.at:1447;Read structure array with complex 8-bit integer fields;;
170;mat5_compressed_read_le.at:1497;Read structure array with complex 8-bit unsigned integer fields;;
171;mat5_compressed_read_le.at:1547;Read structure array with logical fields;;
172;mat5_compressed_read_le.at:1607;Read structure array with double-precision sparse fields;;
173;mat5_compressed_read_le.at:1663;Read structure array with complex double-precision sparse fields;;
174;mat5_compressed_read_le.at:1719;Read structure array with character fields;;
175;mat5_compressed_read_le.at:1765;Read empty cell array;;
176;mat5_compressed_read_le.at:1779;Read cell array with empty arrays;;
177;mat5_compressed_read_le.at:1853;Read cell array with double-precision arrays;;
178;mat5_compressed_read_le.at:1918;Read cell array with single-precision arrays;;
179;mat5_compressed_read_le.at:1983;Read cell array with 64-bit integer arrays;;
180;mat5_compressed_read_le.at:2048;Read cell array with 64-bit unsigned integer arrays;;
181;mat5_compressed_read_le.at:2113;Read cell array with 32-bit integer arrays;;
182;mat5_compressed_read_le.at:2178;Read cell array with 32-bit unsigned integer arrays;;
183;mat5_compressed_read_le.at:2243;Read cell array with 16-bit integer arrays;;
184;mat5_compressed_read_le.at:2308;Read cell array with 16-bit unsigned integer arrays;;
185;mat5_compressed_read_le.at:2373;Read cell array with 8-bit integer arrays;;
186;mat5_compressed_read_le.at:2438;Read cell array with 8-bit unsigned integer arrays;;
187;mat5_compressed_read_le.at:2503;Read cell array with logical arrays;;
188;mat5_compressed_read_le.at:2559;Read cell array with double-precision sparse arrays;;
189;mat5_compressed_read_le.at:2613;Read cell array with complex double-precision sparse arrays;;
190;mat5_compressed_read_le.at:2667;Read cell array with character arrays;;
191;mat5_compressed_read_le.at:2709;Read cell array with empty structure arrays;;
192;mat5_compressed_read_le.at:2770;Read cell array with structure arrays (numeric fields);;
193;mat5_compressed_read_le.at:3624;Read cell array with structure arrays (sparse fields);;
194;mat5_compressed_read_le.at:3734;Read cell array structure arrays (character fields);;
195;mat5_compressed_readslab_le.at:1;Read slab of double-precision array;mat5_compressed_readslab readslab;
196;mat5_compressed_readslab_le.at:34;Read slab of single-precision array;mat5_compressed_readslab readslab;
197;mat5_compressed_readslab_le.at:67;Read slab of 64-bit integer array;mat5_compressed_readslab readslab;
198;mat5_compressed_readslab_le.at:100;Read slab of 64-bit unsigned integer array;mat5_compressed_readslab readslab;
199;mat5_compressed_readslab_le.at:133;Read slab of 32-bit integer array;mat5_compressed_readslab readslab;
200;mat5_compressed_readslab_le.at:166;Read slab of 32-bit unsigned integer array;mat5_compressed_readslab readslab;
201;mat5_compressed_readslab_le.at:199;Read slab of 16-bit integer array;mat5_compressed_readslab readslab;
202;mat5_compressed_readslab_le.at:232;Read slab of 16-bit unsigned integer array;mat5_compressed_readslab readslab;
203;mat5_compressed_readslab_le.at:265;Read slab of 8-bit integer array;mat5_compressed_readslab readslab;
204;mat5_compressed_readslab_le.at:298;Read slab of 8-bit unsigned integer array;mat5_compressed_readslab readslab;
205;mat5_compressed_readslab_le.at:331;Read slab of double-precision complex array;mat5_compressed_readslab readslab;
206;mat5_compressed_readslab_le.at:364;Read slab of single-precision complex array;mat5_compressed_readslab readslab;
207;mat5_compressed_readslab_le.at:397;Read slab of 64-bit integer complex array;mat5_compressed_readslab readslab;
208;mat5_compressed_readslab_le.at:430;Read slab of 64-bit unsigned integer complex array;mat5_compressed_readslab readslab;
209;mat5_compressed_readslab_le.at:463;Read slab of 32-bit integer complex array;mat5_compressed_readslab readslab;
210;mat5_compressed_readslab_le.at:496;Read slab of 32-bit unsigned integer complex array;mat5_compressed_readslab readslab;
211;mat5_compressed_readslab_le.at:529;Read slab of 16-bit integer complex array;mat5_compressed_readslab readslab;
212;mat5_compressed_readslab_le.at:562;Read slab of 16-bit unsigned integer complex array;mat5_compressed_readslab readslab;
213;mat5_compressed_readslab_le.at:595;Read slab of 8-bit integer complex array;mat5_compressed_readslab readslab;
214;mat5_compressed_readslab_le.at:628;Read slab of 8-bit unsigned integer complex array;mat5_compressed_readslab readslab;
215;mat5_compressed_readslab_le.at:661;Read linear slab of double-precision array;mat5_compressed_readslab readslab read_data_linear;
216;mat5_compressed_readslab_le.at:694;Read linear slab of single-precision array;mat5_compressed_readslab readslab read_data_linear;
217;mat5_compressed_readslab_le.at:727;Read linear slab of 64-bit integer array;mat5_compressed_readslab readslab read_data_linear;
218;mat5_compressed_readslab_le.at:760;Read linear slab of 64-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
219;mat5_compressed_readslab_le.at:793;Read linear slab of 32-bit integer array;mat5_compressed_readslab readslab read_data_linear;
220;mat5_compressed_readslab_le.at:826;Read linear slab of 32-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
221;mat5_compressed_readslab_le.at:859;Read linear slab of 16-bit integer array;mat5_compressed_readslab readslab read_data_linear;
222;mat5_compressed_readslab_le.at:892;Read linear slab of 16-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
223;mat5_compressed_readslab_le.at:925;Read linear slab of 8-bit integer array;mat5_compressed_readslab readslab read_data_linear;
224;mat5_compressed_readslab_le.at:958;Read linear slab of 8-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
225;mat5_compressed_readslab_le.at:991;Read linear slab of double-precision complex array;mat5_compressed_readslab readslab read_data_linear;
226;mat5_compressed_readslab_le.at:1024;Read linear slab of single-precision complex array;mat5_compressed_readslab readslab read_data_linear;
227;mat5_compressed_readslab_le.at:1057;Read linear slab of 64-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
228;mat5_compressed_readslab_le.at:1090;Read linear slab of 64-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
229;mat5_compressed_readslab_le.at:1123;Read linear slab of 32-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
230;mat5_compressed_readslab_le.at:1156;Read linear slab of 32-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
231;mat5_compressed_readslab_le.at:1189;Read linear slab of 16-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
232;mat5_compressed_readslab_le.at:1222;Read linear slab of 16-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
233;mat5_compressed_readslab_le.at:1255;Read linear slab of 8-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
234;mat5_compressed_readslab_le.at:1288;Read linear slab of 8-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
235;mat5_uncompressed_read_be.at:27;Read 2D double-precision array;;
236;mat5_uncompressed_read_be.at:44;Read 2D single-precision array;;
237;mat5_uncompressed_read_be.at:61;Read 2D 64-bit integer array;;
238;mat5_uncompressed_read_be.at:78;Read 2D 64-bit unsigned integer array;;
239;mat5_uncompressed_read_be.at:95;Read 2D 32-bit integer array;;
240;mat5_uncompressed_read_be.at:112;Read 2D 32-bit unsigned integer array;;
241;mat5_uncompressed_read_be.at:129;Read 2D 16-bit integer array;;
242;mat5_uncompressed_read_be.at:146;Read 2D 16-bit unsigned integer array;;
243;mat5_uncompressed_read_be.at:163;Read 2D 8-bit integer array;;
244;mat5_uncompressed_read_be.at:180;Read 2D 8-bit unsigned integer array;;
245;mat5_uncompressed_read_be.at:197;Read 2D double-precision complex array;;
246;mat5_uncompressed_read_be.at:214;Read 2D single-precision complex array;;
247;mat5_uncompressed_read_be.at:231;Read 2D 64-bit integer complex array;;
248;mat5_uncompressed_read_be.at:248;Read 2D 64-bit unsigned integer complex array;;
249;mat5_uncompressed_read_be.at:265;Read 2D 32-bit integer complex array;;
250;mat5_uncompressed_read_be.at:282;Read 2D 32-bit unsigned integer complex array;;
251;mat5_uncompressed_read_be.at:299;Read 2D 16-bit integer complex array;;
252;mat5_uncompressed_read_be.at:316;Read 2D 16-bit unsigned integer complex array;;
253;mat5_uncompressed_read_be.at:333;Read 2D 8-bit integer complex array;;
254;mat5_uncompressed_read_be.at:350;Read 2D 8-bit unsigned integer complex array;;
255;mat5_uncompressed_read_be.at:367;Read 2D logical array;;
256;mat5_uncompressed_read_be.at:385;Read double-precision sparse array;;
257;mat5_uncompressed_read_be.at:403;Read double-precision sparse complex array;;
258;mat5_uncompressed_read_be.at:421;Read empty array;;
259;mat5_uncompressed_read_be.at:434;Read 2D character array;;
260;mat5_uncompressed_read_be.at:451;Read empty structure array;;
261;mat5_uncompressed_read_be.at:463;Read empty structure array with fields;;
262;mat5_uncompressed_read_be.at:479;Read structure array with empty fields;;
263;mat5_uncompressed_read_be.at:516;Read structure array with double-precision fields;;
264;mat5_uncompressed_read_be.at:564;Read structure array with single-precision fields;;
265;mat5_uncompressed_read_be.at:612;Read structure array with 64-bit integer fields;;
266;mat5_uncompressed_read_be.at:660;Read structure array with 64-bit unsigned integer fields;;
267;mat5_uncompressed_read_be.at:708;Read structure array with 32-bit integer fields;;
268;mat5_uncompressed_read_be.at:756;Read structure array with 32-bit unsigned integer fields;;
269;mat5_uncompressed_read_be.at:804;Read structure array with 16-bit integer fields;;
270;mat5_uncompressed_read_be.at:852;Read structure array with 16-bit unsigned integer fields;;
271;mat5_uncompressed_read_be.at:900;Read structure array with 8-bit integer fields;;
272;mat5_uncompressed_read_be.at:948;Read structure array with 8-bit unsigned integer fields;;
273;mat5_uncompressed_read_be.at:996;Read structure array with complex double-precision fields;;
274;mat5_uncompressed_read_be.at:1044;Read structure array with complex single-precision fields;;
275;mat5_uncompressed_read_be.at:1092;Read structure array with complex 64-bit integer fields;;
276;mat5_uncompressed_read_be.at:1140;Read structure array with complex 64-bit unsigned integer fields;;
277;mat5_uncompressed_read_be.at:1188;Read structure array with complex 32-bit integer fields;;
278;mat5_uncompressed_read_be.at:1236;Read structure array with complex 32-bit unsigned integer fields;;
279;mat5_uncompressed_read_be.at:1284;Read structure array with complex 16-bit integer fields;;
280;mat5_uncompressed_read_be.at:1332;Read structure array with complex 16-bit unsigned integer fields;;
281;mat5_uncompressed_read_be.at:1380;Read structure array with complex 8-bit integer fields;;
282;mat5_uncompressed_read_be.at:1428;Read structure array with complex 8-bit unsigned integer fields;;
283;mat5_uncompressed_read_be.at:1477;Read structure array with logical fields;;
284;mat5_uncompressed_read_be.at:1536;Read structure array with double-precision sparse fields;;
285;mat5_uncompressed_read_be.at:1591;Read structure array with complex double-precision sparse fields;;
286;mat5_uncompressed_read_be.at:1646;Read structure array with character fields;;
287;mat5_uncompressed_read_be.at:1691;Read empty cell array;;
288;mat5_uncompressed_read_be.at:1704;Read cell array with empty arrays;;
289;mat5_uncompressed_read_be.at:1777;Read cell array with double-precision arrays;;
290;mat5_uncompressed_read_be.at:1841;Read cell array with single-precision arrays;;
291;mat5_uncompressed_read_be.at:1905;Read cell array with 64-bit integer arrays;;
292;mat5_uncompressed_read_be.at:1969;Read cell array with 64-bit unsigned integer arrays;;
293;mat5_uncompressed_read_be.at:2033;Read cell array with 32-bit integer arrays;;
294;mat5_uncompressed_read_be.at:2097;Read cell array with 32-bit unsigned integer arrays;;
295;mat5_uncompressed_read_be.at:2161;Read cell array with 16-bit integer arrays;;
296;mat5_uncompressed_read_be.at:2225;Read cell array with 16-bit unsigned integer arrays;;
297;mat5_uncompressed_read_be.at:2289;Read cell array with 8-bit integer arrays;;
298;mat5_uncompressed_read_be.at:2353;Read cell array with 8-bit unsigned integer arrays;;
299;mat5_uncompressed_read_be.at:2417;Read cell array with logical arrays;;
300;mat5_uncompressed_read_be.at:2472;Read cell array with double-precision sparse arrays;;
301;mat5_uncompressed_read_be.at:2525;Read cell array with complex double-precision sparse arrays;;
302;mat5_uncompressed_read_be.at:2578;Read cell array with character arrays;;
303;mat5_uncompressed_read_be.at:2619;Read cell array with empty structure arrays;;
304;mat5_uncompressed_read_be.at:2679;Read cell array with structure arrays (numeric fields);;
305;mat5_uncompressed_read_be.at:3532;Read cell array with structure arrays (sparse fields);;
306;mat5_uncompressed_read_be.at:3641;Read cell array structure arrays (character fields);;
307;mat5_uncompressed_readslab_be.at:1;Read slab of 2D double-precision array;mat5_uncompressed_readslab readslab;
308;mat5_uncompressed_readslab_be.at:33;Read slab of single-precision array;mat5_uncompressed_readslab readslab;
309;mat5_uncompressed_readslab_be.at:65;Read slab of 64-bit integer array;mat5_uncompressed_readslab readslab;
310;mat5_uncompressed_readslab_be.at:97;Read slab of 64-bit unsigned integer array;mat5_uncompressed_readslab readslab;
311;mat5_uncompressed_readslab_be.at:129;Read slab of 32-bit integer array;mat5_uncompressed_readslab readslab;
312;mat5_uncompressed_readslab_be.at:161;Read slab of 32-bit unsigned integer array;mat5_uncompressed_readslab readslab;
313;mat5_uncompressed_readslab_be.at:193;Read slab of 16-bit integer array;mat5_uncompressed_readslab readslab;
314;mat5_uncompressed_readslab_be.at:225;Read slab of 16-bit unsigned integer array;mat5_uncompressed_readslab readslab;
315;mat5_uncompressed_readslab_be.at:257;Read slab of 8-bit integer array;mat5_uncompressed_readslab readslab;
316;mat5_uncompressed_readslab_be.at:289;Read slab of 8-bit unsigned integer array;mat5_uncompressed_readslab readslab;
317;mat5_uncompressed_readslab_be.at:321;Read slab of double-precision complex array;mat5_uncompressed_readslab readslab;
318;mat5_uncompressed_readslab_be.at:353;Read slab of single-precision complex array;mat5_uncompressed_readslab readslab;
319;mat5_uncompressed_readslab_be.at:385;Read slab of 64-bit integer complex array;mat5_uncompressed_readslab readslab;
320;mat5_uncompressed_readslab_be.at:417;Read slab of 64-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
321;mat5_uncompressed_readslab_be.at:449;Read slab of 32-bit integer complex array;mat5_uncompressed_readslab readslab;
322;mat5_uncompressed_readslab_be.at:481;Read slab of 32-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
323;mat5_uncompressed_readslab_be.at:513;Read slab of 16-bit integer complex array;mat5_uncompressed_readslab readslab;
324;mat5_uncompressed_readslab_be.at:545;Read slab of 16-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
325;mat5_uncompressed_readslab_be.at:577;Read slab of 8-bit integer complex array;mat5_uncompressed_readslab readslab;
326;mat5_uncompressed_readslab_be.at:609;Read slab of 8-bit unsigned integer complex array;mat5_uncompressed_readslab readslab;
327;mat5_uncompressed_readslab_be.at:641;Read linear slab of double-precision array;mat5_uncompressed_readslab readslab read_data_linear;
328;mat5_uncompressed_readslab_be.at:674;Read linear slab of single-precision array;mat5_uncompressed_readslab readslab read_data_linear;
329;mat5_uncompressed_readslab_be.at:707;Read linear slab of 64-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
330;mat5_uncompressed_readslab_be.at:740;Read linear slab of 64-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
331;mat5_uncompressed_readslab_be.at:773;Read linear slab of 32-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
332;mat5_uncompressed_readslab_be.at:806;Read linear slab of 32-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
333;mat5_uncompressed_readslab_be.at:839;Read linear slab of 16-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
334;mat5_uncompressed_readslab_be.at:872;Read linear slab of 16-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
335;mat5_uncompressed_readslab_be.at:905;Read linear slab of 8-bit integer array;mat5_uncompressed_readslab readslab read_data_linear;
336;mat5_uncompressed_readslab_be.at:938;Read linear slab of 8-bit unsigned integer array;mat5_uncompressed_readslab readslab read_data_linear;
337;mat5_uncompressed_readslab_be.at:971;Read linear slab of double-precision complex array;mat5_uncompressed_readslab readslab read_data_linear;
338;mat5_uncompressed_readslab_be.at:1004;Read linear slab of single-precision complex array;mat5_uncompressed_readslab readslab read_data_linear;
339;mat5_uncompressed_readslab_be.at:1037;Read linear slab of 64-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
340;mat5_uncompressed_readslab_be.at:1070;Read linear slab of 64-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
341;mat5_uncompressed_readslab_be.at:1103;Read linear slab of 32-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
342;mat5_uncompressed_readslab_be.at:1136;Read linear slab of 32-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
343;mat5_uncompressed_readslab_be.at:1169;Read linear slab of 16-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
344;mat5_uncompressed_readslab_be.at:1202;Read linear slab of 16-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
345;mat5_uncompressed_readslab_be.at:1235;Read linear slab of 8-bit integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
346;mat5_uncompressed_readslab_be.at:1268;Read linear slab of 8-bit unsigned integer complex array;mat5_uncompressed_readslab readslab read_data_linear;
347;mat5_compressed_read_be.at:27;Read 2D double-precision array;;
348;mat5_compressed_read_be.at:45;Read 2D single-precision array;;
349;mat5_compressed_read_be.at:63;Read 2D 64-bit integer array;;
350;mat5_compressed_read_be.at:81;Read 2D 64-bit unsigned integer array;;
351;mat5_compressed_read_be.at:99;Read 2D 32-bit integer array;;
352;mat5_compressed_read_be.at:117;Read 2D 32-bit unsigned integer array;;
353;mat5_compressed_read_be.at:135;Read 2D 16-bit integer array;;
354;mat5_compressed_read_be.at:153;Read 2D 16-bit unsigned integer array;;
355;mat5_compressed_read_be.at:171;Read 2D 8-bit integer array;;
356;mat5_compressed_read_be.at:189;Read 2D 8-bit unsigned integer array;;
357;mat5_compressed_read_be.at:207;Read 2D double-precision complex array;;
358;mat5_compressed_read_be.at:225;Read 2D single-precision complex array;;
359;mat5_compressed_read_be.at:243;Read 2D 64-bit integer complex array;;
360;mat5_compressed_read_be.at:261;Read 2D 64-bit unsigned integer complex array;;
361;mat5_compressed_read_be.at:279;Read 2D 32-bit integer complex array;;
362;mat5_compressed_read_be.at:297;Read 2D 32-bit unsigned integer complex array;;
363;mat5_compressed_read_be.at:315;Read 2D 16-bit integer complex array;;
364;mat5_compressed_read_be.at:333;Read 2D 16-bit unsigned integer complex array;;
365;mat5_compressed_read_be.at:351;Read 2D 8-bit integer complex array;;
366;mat5_compressed_read_be.at:369;Read 2D 8-bit unsigned integer complex array;;
367;mat5_compressed_read_be.at:387;Read 2D logical array;;
368;mat5_compressed_read_be.at:406;Read double-precision sparse array;;
369;mat5_compressed_read_be.at:425;Read double-precision sparse complex array;;
370;mat5_compressed_read_be.at:444;Read empty array;;
371;mat5_compressed_read_be.at:458;Read 2D character array;;
372;mat5_compressed_read_be.at:476;Read empty structure array;;
373;mat5_compressed_read_be.at:489;Read empty structure array with fields;;
374;mat5_compressed_read_be.at:506;Read structure array with empty fields;;
375;mat5_compressed_read_be.at:544;Read structure array with double-precision fields;;
376;mat5_compressed_read_be.at:593;Read structure array with single-precision fields;;
377;mat5_compressed_read_be.at:642;Read structure array with 64-bit integer fields;;
378;mat5_compressed_read_be.at:691;Read structure array with 64-bit unsigned integer fields;;
379;mat5_compressed_read_be.at:740;Read structure array with 32-bit integer fields;;
380;mat5_compressed_read_be.at:789;Read structure array with 32-bit unsigned integer fields;;
381;mat5_compressed_read_be.at:838;Read structure array with 16-bit integer fields;;
382;mat5_compressed_read_be.at:887;Read structure array with 16-bit unsigned integer fields;;
383;mat5_compressed_read_be.at:936;Read structure array with 8-bit integer fields;;
384;mat5_compressed_read_be.at:985;Read structure array with 8-bit unsigned integer fields;;
385;mat5_compressed_read_be.at:1034;Read structure array with complex double-precision fields;;
386;mat5_compressed_read_be.at:1083;Read structure array with complex single-precision fields;;
387;mat5_compressed_read_be.at:1132;Read structure array with complex 64-bit integer fields;;
388;mat5_compressed_read_be.at:1181;Read structure array with complex 64-bit unsigned integer fields;;
389;mat5_compressed_read_be.at:1230;Read structure array with complex 32-bit integer fields;;
390;mat5_compressed_read_be.at:1279;Read structure array with complex 32-bit unsigned integer fields;;
391;mat5_compressed_read_be.at:1328;Read structure array with complex 16-bit integer fields;;
392;mat5_compressed_read_be.at:1377;Read structure array with complex 16-bit unsigned integer fields;;
393;mat5_compressed_read_be.at:1426;Read structure array with complex 8-bit integer fields;;
394;mat5_compressed_read_be.at:1475;Read structure array with complex 8-bit unsigned integer fields;;
395;mat5_compressed_read_be.at:1525;Read structure array with logical fields;;
396;mat5_compressed_read_be.at:1585;Read structure array with double-precision sparse fields;;
397;mat5_compressed_read_be.at:1641;Read structure array with complex double-precision sparse fields;;
398;mat5_compressed_read_be.at:1697;Read structure array with character fields;;
399;mat5_compressed_read_be.at:1743;Read empty cell array;;
400;mat5_compressed_read_be.at:1757;Read cell array with empty arrays;;
401;mat5_compressed_read_be.at:1831;Read cell array with double-precision arrays;;
402;mat5_compressed_read_be.at:1896;Read cell array with single-precision arrays;;
403;mat5_compressed_read_be.at:1961;Read cell array with 64-bit integer arrays;;
404;mat5_compressed_read_be.at:2026;Read cell array with 64-bit unsigned integer arrays;;
405;mat5_compressed_read_be.at:2091;Read cell array with 32-bit integer arrays;;
406;mat5_compressed_read_be.at:2156;Read cell array with 32-bit unsigned integer arrays;;
407;mat5_compressed_read_be.at:2221;Read cell array with 16-bit integer arrays;;
408;mat5_compressed_read_be.at:2286;Read cell array with 16-bit unsigned integer arrays;;
409;mat5_compressed_read_be.at:2351;Read cell array with 8-bit integer arrays;;
410;mat5_compressed_read_be.at:2416;Read cell array with 8-bit unsigned integer arrays;;
411;mat5_compressed_read_be.at:2481;Read cell array with logical arrays;;
412;mat5_compressed_read_be.at:2537;Read cell array with double-precision sparse arrays;;
413;mat5_compressed_read_be.at:2591;Read cell array with complex double-precision sparse arrays;;
414;mat5_compressed_read_be.at:2645;Read cell array with character arrays;;
415;mat5_compressed_read_be.at:2687;Read cell array with empty structure arrays;;
416;mat5_compressed_read_be.at:2748;Read cell array with structure arrays (numeric fields);;
417;mat5_compressed_read_be.at:3602;Read cell array with structure arrays (sparse fields);;
418;mat5_compressed_read_be.at:3712;Read cell array structure arrays (character fields);;
419;mat5_compressed_readslab_be.at:1;Read slab of double-precision array;mat5_compressed_readslab readslab;
420;mat5_compressed_readslab_be.at:34;Read slab of single-precision array;mat5_compressed_readslab readslab;
421;mat5_compressed_readslab_be.at:67;Read slab of 64-bit integer array;mat5_compressed_readslab readslab;
422;mat5_compressed_readslab_be.at:100;Read slab of 64-bit unsigned integer array;mat5_compressed_readslab readslab;
423;mat5_compressed_readslab_be.at:133;Read slab of 32-bit integer array;mat5_compressed_readslab readslab;
424;mat5_compressed_readslab_be.at:166;Read slab of 32-bit unsigned integer array;mat5_compressed_readslab readslab;
425;mat5_compressed_readslab_be.at:199;Read slab of 16-bit integer array;mat5_compressed_readslab readslab;
426;mat5_compressed_readslab_be.at:232;Read slab of 16-bit unsigned integer array;mat5_compressed_readslab readslab;
427;mat5_compressed_readslab_be.at:265;Read slab of 8-bit integer array;mat5_compressed_readslab readslab;
428;mat5_compressed_readslab_be.at:298;Read slab of 8-bit unsigned integer array;mat5_compressed_readslab readslab;
429;mat5_compressed_readslab_be.at:331;Read slab of double-precision complex array;mat5_compressed_readslab readslab;
430;mat5_compressed_readslab_be.at:364;Read slab of single-precision complex array;mat5_compressed_readslab readslab;
431;mat5_compressed_readslab_be.at:397;Read slab of 64-bit integer complex array;mat5_compressed_readslab readslab;
432;mat5_compressed_readslab_be.at:430;Read slab of 64-bit unsigned integer complex array;mat5_compressed_readslab readslab;
433;mat5_compressed_readslab_be.at:463;Read slab of 32-bit integer complex array;mat5_compressed_readslab readslab;
434;mat5_compressed_readslab_be.at:496;Read slab of 32-bit unsigned integer complex array;mat5_compressed_readslab readslab;
435;mat5_compressed_readslab_be.at:529;Read slab of 16-bit integer complex array;mat5_compressed_readslab readslab;
436;mat5_compressed_readslab_be.at:562;Read slab of 16-bit unsigned integer complex array;mat5_compressed_readslab readslab;
437;mat5_compressed_readslab_be.at:595;Read slab of 8-bit integer complex array;mat5_compressed_readslab readslab;
438;mat5_compressed_readslab_be.at:628;Read slab of 8-bit unsigned integer complex array;mat5_compressed_readslab readslab;
439;mat5_compressed_readslab_be.at:661;Read linear slab of double-precision array;mat5_compressed_readslab readslab read_data_linear;
440;mat5_compressed_readslab_be.at:694;Read linear slab of single-precision array;mat5_compressed_readslab readslab read_data_linear;
441;mat5_compressed_readslab_be.at:727;Read linear slab of 64-bit integer array;mat5_compressed_readslab readslab read_data_linear;
442;mat5_compressed_readslab_be.at:760;Read linear slab of 64-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
443;mat5_compressed_readslab_be.at:793;Read linear slab of 32-bit integer array;mat5_compressed_readslab readslab read_data_linear;
444;mat5_compressed_readslab_be.at:826;Read linear slab of 32-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
445;mat5_compressed_readslab_be.at:859;Read linear slab of 16-bit integer array;mat5_compressed_readslab readslab read_data_linear;
446;mat5_compressed_readslab_be.at:892;Read linear slab of 16-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
447;mat5_compressed_readslab_be.at:925;Read linear slab of 8-bit integer array;mat5_compressed_readslab readslab read_data_linear;
448;mat5_compressed_readslab_be.at:958;Read linear slab of 8-bit unsigned integer array;mat5_compressed_readslab readslab read_data_linear;
449;mat5_compressed_readslab_be.at:991;Read linear slab of double-precision complex array;mat5_compressed_readslab readslab read_data_linear;
450;mat5_compressed_readslab_be.at:1024;Read linear slab of single-precision complex array;mat5_compressed_readslab readslab read_data_linear;
451;mat5_compressed_readslab_be.at:1057;Read linear slab of 64-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
452;mat5_compressed_readslab_be.at:1090;Read linear slab of 64-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
453;mat5_compressed_readslab_be.at:1123;Read linear slab of 32-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
454;mat5_compressed_readslab_be.at:1156;Read linear slab of 32-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
455;mat5_compressed_readslab_be.at:1189;Read linear slab of 16-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
456;mat5_compressed_readslab_be.at:1222;Read linear slab of 16-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
457;mat5_compressed_readslab_be.at:1255;Read linear slab of 8-bit integer complex array;mat5_compressed_readslab readslab read_data_linear;
458;mat5_compressed_readslab_be.at:1288;Read linear slab of 8-bit unsigned integer complex array;mat5_compressed_readslab readslab read_data_linear;
459;mat73_read_le.at:27;Read 2D double-precision array;;
460;mat73_read_le.at:45;Read 2D single-precision array;;
461;mat73_read_le.at:63;Read 2D 64-bit integer array;;
462;mat73_read_le.at:81;Read 2D 64-bit unsigned integer array;;
463;mat73_read_le.at:99;Read 2D 32-bit integer array;;
464;mat73_read_le.at:117;Read 2D 32-bit unsigned integer array;;
465;mat73_read_le.at:135;Read 2D 16-bit integer array;;
466;mat73_read_le.at:153;Read 2D 16-bit unsigned integer array;;
467;mat73_read_le.at:171;Read 2D 8-bit integer array;;
468;mat73_read_le.at:189;Read 2D 8-bit unsigned integer array;;
469;mat73_read_le.at:207;Read 2D double-precision complex array;;
470;mat73_read_le.at:225;Read 2D single-precision complex array;;
471;mat73_read_le.at:243;Read 2D 64-bit integer complex array;;
472;mat73_read_le.at:261;Read 2D 64-bit unsigned integer complex array;;
473;mat73_read_le.at:279;Read 2D 32-bit integer complex array;;
474;mat73_read_le.at:297;Read 2D 32-bit unsigned integer complex array;;
475;mat73_read_le.at:315;Read 2D 16-bit integer complex array;;
476;mat73_read_le.at:333;Read 2D 16-bit unsigned integer complex array;;
477;mat73_read_le.at:351;Read 2D 8-bit integer complex array;;
478;mat73_read_le.at:369;Read 2D 8-bit unsigned integer complex array;;
479;mat73_read_le.at:387;Read 2D logical array;;
480;mat73_read_le.at:406;Read double-precision sparse array;;
481;mat73_read_le.at:425;Read double-precision sparse complex array;;
482;mat73_read_le.at:444;Read empty array;;
483;mat73_read_le.at:456;Read 2D character array;;
484;mat73_read_le.at:474;Read empty structure array;;
485;mat73_read_le.at:488;Read empty structure array with fields;;
486;mat73_read_le.at:506;Read structure array with empty fields;;
487;mat73_read_le.at:544;Read structure array with double-precision fields;;
488;mat73_read_le.at:594;Read structure array with single-precision fields;;
489;mat73_read_le.at:644;Read structure array with 64-bit integer fields;;
490;mat73_read_le.at:694;Read structure array with 64-bit unsigned integer fields;;
491;mat73_read_le.at:744;Read structure array with 32-bit integer fields;;
492;mat73_read_le.at:794;Read structure array with 32-bit unsigned integer fields;;
493;mat73_read_le.at:844;Read structure array with 16-bit integer fields;;
494;mat73_read_le.at:894;Read structure array with 16-bit unsigned integer fields;;
495;mat73_read_le.at:944;Read structure array with 8-bit integer fields;;
496;mat73_read_le.at:994;Read structure array with 8-bit unsigned integer fields;;
497;mat73_read_le.at:1044;Read structure array with complex double-precision fields;;
498;mat73_read_le.at:1094;Read structure array with complex single-precision fields;;
499;mat73_read_le.at:1144;Read structure array with complex 64-bit integer fields;;
500;mat73_read_le.at:1194;Read structure array with complex 64-bit unsigned integer fields;;
501;mat73_read_le.at:1244;Read structure array with complex 32-bit integer fields;;
502;mat73_read_le.at:1294;Read structure array with complex 32-bit unsigned integer fields;;
503;mat73_read_le.at:1344;Read structure array with complex 16-bit integer fields;;
504;mat73_read_le.at:1394;Read structure array with complex 16-bit unsigned integer fields;;
505;mat73_read_le.at:1444;Read structure array with complex 8-bit integer fields;;
506;mat73_read_le.at:1494;Read structure array with complex 8-bit unsigned integer fields;;
507;mat73_read_le.at:1544;Read structure array with logical fields;;
508;mat73_read_le.at:1604;Read structure array with double-precision sparse fields;;
509;mat73_read_le.at:1660;Read structure array with complex double-precision sparse fields;;
510;mat73_read_le.at:1716;Read structure array with character fields;;
511;mat73_read_le.at:1762;Read empty cell array;;
512;mat73_read_le.at:1776;Read cell array with empty arrays;;
513;mat73_read_le.at:1830;Read cell array with double-precision arrays;;
514;mat73_read_le.at:1895;Read cell array with single-precision arrays;;
515;mat73_read_le.at:1960;Read cell array with 64-bit integer arrays;;
516;mat73_read_le.at:2025;Read cell array with 64-bit unsigned integer arrays;;
517;mat73_read_le.at:2090;Read cell array with 32-bit integer arrays;;
518;mat73_read_le.at:2155;Read cell array with 32-bit unsigned integer arrays;;
519;mat73_read_le.at:2220;Read cell array with 16-bit integer arrays;;
520;mat73_read_le.at:2285;Read cell array with 16-bit unsigned integer arrays;;
521;mat73_read_le.at:2350;Read cell array with 8-bit integer arrays;;
522;mat73_read_le.at:2415;Read cell array with 8-bit unsigned integer arrays;;
523;mat73_read_le.at:2480;Read cell array with logical arrays;;
524;mat73_read_le.at:2536;Read cell array with double-precision sparse arrays;;
525;mat73_read_le.at:2590;Read cell array with complex double-precision sparse arrays;;
526;mat73_read_le.at:2644;Read cell array with character arrays;;
527;mat73_read_le.at:2686;Read cell array with empty structure arrays;;
528;mat73_read_le.at:2746;Read cell array with structure arrays (numeric fields);;
529;mat73_read_le.at:3600;Read cell array with structure arrays (sparse fields);;
530;mat73_read_le.at:3710;Read cell array structure arrays (character fields);;
531;mat73_readslab_le.at:1;Read slab of double-precision array;mat73_readslab readslab;
532;mat73_readslab_le.at:34;Read slab of single-precision array;mat73_readslab readslab;
533;mat73_readslab_le.at:67;Read slab of 64-bit integer array;mat73_readslab readslab;
534;mat73_readslab_le.at:100;Read slab of 64-bit unsigned integer array;mat73_readslab readslab;
535;mat73_readslab_le.at:133;Read slab of 32-bit integer array;mat73_readslab readslab;
536;mat73_readslab_le.at:166;Read slab of 32-bit unsigned integer array;mat73_readslab readslab;
537;mat73_readslab_le.at:199;Read slab of 16-bit integer array;mat73_readslab readslab;
538;mat73_readslab_le.at:232;Read slab of 16-bit unsigned integer array;mat73_readslab readslab;
539;mat73_readslab_le.at:265;Read slab of 8-bit integer array;mat73_readslab readslab;
540;mat73_readslab_le.at:298;Read slab of 8-bit unsigned integer array;mat73_readslab readslab;
541;mat73_readslab_le.at:331;Read slab of double-precision complex array;mat73_readslab readslab;
542;mat73_readslab_le.at:364;Read slab of single-precision complex array;mat73_readslab readslab;
543;mat73_readslab_le.at:397;Read slab of 64-bit integer complex array;mat73_readslab readslab;
544;mat73_readslab_le.at:430;Read slab of 64-bit unsigned integer complex array;mat73_readslab readslab;
545;mat73_readslab_le.at:463;Read slab of 32-bit integer complex array;mat73_readslab readslab;
546;mat73_readslab_le.at:496;Read slab of 32-bit unsigned integer complex array;mat73_readslab readslab;
547;mat73_readslab_le.at:529;Read slab of 16-bit integer complex array;mat73_readslab readslab;
548;mat73_readslab_le.at:562;Read slab of 16-bit unsigned integer complex array;mat73_readslab readslab;
549;mat73_readslab_le.at:595;Read slab of 8-bit integer complex array;mat73_readslab readslab;
550;mat73_readslab_le.at:628;Read slab of 8-bit unsigned integer complex array;mat73_readslab readslab;
551;mat73_readslab_le.at:661;Read linear slab of double-precision array;mat73_readslab readslab read_data_linear;
552;mat73_readslab_le.at:695;Read linear slab of single-precision array;mat73_readslab readslab read_data_linear;
553;mat73_readslab_le.at:729;Read linear slab of 64-bit integer array;mat73_readslab readslab read_data_linear;
554;mat73_readslab_le.at:763;Read linear slab of 64-bit unsigned integer array;mat73_readslab readslab read_data_linear;
555;mat73_readslab_le.at:797;Read linear slab of 32-bit integer array;mat73_readslab readslab read_data_linear;
556;mat73_readslab_le.at:831;Read linear slab of 32-bit unsigned integer array;mat73_readslab readslab read_data_linear;
557;mat73_readslab_le.at:865;Read linear slab of 16-bit integer array;mat73_readslab readslab read_data_linear;
558;mat73_readslab_le.at:899;Read linear slab of 16-bit unsigned integer array;mat73_readslab readslab read_data_linear;
559;mat73_readslab_le.at:933;Read linear slab of 8-bit integer array;mat73_readslab readslab read_data_linear;
560;mat73_readslab_le.at:967;Read linear slab of 8-bit unsigned integer array;mat73_readslab readslab read_data_linear;
561;mat73_readslab_le.at:1001;Read linear slab of double-precision complex array;mat73_readslab readslab read_data_linear;
562;mat73_readslab_le.at:1035;Read linear slab of single-precision complex array;mat73_readslab readslab read_data_linear;
563;mat73_readslab_le.at:1069;Read linear slab of 64-bit integer complex array;mat73_readslab readslab read_data_linear;
564;mat73_readslab_le.at:1103;Read linear slab of 64-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
565;mat73_readslab_le.at:1137;Read linear slab of 32-bit integer complex array;mat73_readslab readslab read_data_linear;
566;mat73_readslab_le.at:1171;Read linear slab of 32-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
567;mat73_readslab_le.at:1205;Read linear slab of 16-bit integer complex array;mat73_readslab readslab read_data_linear;
568;mat73_readslab_le.at:1239;Read linear slab of 16-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
569;mat73_readslab_le.at:1273;Read linear slab of 8-bit integer complex array;mat73_readslab readslab read_data_linear;
570;mat73_readslab_le.at:1307;Read linear slab of 8-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
571;mat73_read_be.at:27;Read 2D double-precision array;;
572;mat73_read_be.at:45;Read 2D single-precision array;;
573;mat73_read_be.at:63;Read 2D 64-bit integer array;;
574;mat73_read_be.at:81;Read 2D 64-bit unsigned integer array;;
575;mat73_read_be.at:99;Read 2D 32-bit integer array;;
576;mat73_read_be.at:117;Read 2D 32-bit unsigned integer array;;
577;mat73_read_be.at:135;Read 2D 16-bit integer array;;
578;mat73_read_be.at:153;Read 2D 16-bit unsigned integer array;;
579;mat73_read_be.at:171;Read 2D 8-bit integer array;;
580;mat73_read_be.at:189;Read 2D 8-bit unsigned integer array;;
581;mat73_read_be.at:207;Read 2D double-precision complex array;;
582;mat73_read_be.at:225;Read 2D single-precision complex array;;
583;mat73_read_be.at:243;Read 2D 64-bit integer complex array;;
584;mat73_read_be.at:261;Read 2D 64-bit unsigned integer complex array;;
585;mat73_read_be.at:279;Read 2D 32-bit integer complex array;;
586;mat73_read_be.at:297;Read 2D 32-bit unsigned integer complex array;;
587;mat73_read_be.at:315;Read 2D 16-bit integer complex array;;
588;mat73_read_be.at:333;Read 2D 16-bit unsigned integer complex array;;
589;mat73_read_be.at:351;Read 2D 8-bit integer complex array;;
590;mat73_read_be.at:369;Read 2D 8-bit unsigned integer complex array;;
591;mat73_read_be.at:387;Read 2D logical array;;
592;mat73_read_be.at:406;Read double-precision sparse array;;
593;mat73_read_be.at:425;Read double-precision sparse complex array;;
594;mat73_read_be.at:444;Read empty array;;
595;mat73_read_be.at:456;Read 2D character array;;
596;mat73_read_be.at:474;Read empty structure array;;
597;mat73_read_be.at:487;Read empty structure array with fields;;
598;mat73_read_be.at:504;Read structure array with empty fields;;
599;mat73_read_be.at:541;Read structure array with double-precision fields;;
600;mat73_read_be.at:590;Read structure array with single-precision fields;;
601;mat73_read_be.at:639;Read structure array with 64-bit integer fields;;
602;mat73_read_be.at:688;Read structure array with 64-bit unsigned integer fields;;
603;mat73_read_be.at:737;Read structure array with 32-bit integer fields;;
604;mat73_read_be.at:786;Read structure array with 32-bit unsigned integer fields;;
605;mat73_read_be.at:835;Read structure array with 16-bit integer fields;;
606;mat73_read_be.at:884;Read structure array with 16-bit unsigned integer fields;;
607;mat73_read_be.at:933;Read structure array with 8-bit integer fields;;
608;mat73_read_be.at:982;Read structure array with 8-bit unsigned integer fields;;
609;mat73_read_be.at:1031;Read structure array with complex double-precision fields;;
610;mat73_read_be.at:1080;Read structure array with complex single-precision fields;;
611;mat73_read_be.at:1129;Read structure array with complex 64-bit integer fields;;
612;mat73_read_be.at:1178;Read structure array with complex 64-bit unsigned integer fields;;
613;mat73_read_be.at:1227;Read structure array with complex 32-bit integer fields;;
614;mat73_read_be.at:1276;Read structure array with complex 32-bit unsigned integer fields;;
615;mat73_read_be.at:1325;Read structure array with complex 16-bit integer fields;;
616;mat73_read_be.at:1374;Read structure array with complex 16-bit unsigned integer fields;;
617;mat73_read_be.at:1423;Read structure array with complex 8-bit integer fields;;
618;mat73_read_be.at:1472;Read structure array with complex 8-bit unsigned integer fields;;
619;mat73_read_be.at:1522;Read structure array with logical fields;;
620;mat73_read_be.at:1582;Read structure array with double-precision sparse fields;;
621;mat73_read_be.at:1638;Read structure array with complex double-precision sparse fields;;
622;mat73_read_be.at:1694;Read structure array with character fields;;
623;mat73_read_be.at:1740;Read cell array with empty arrays;;
624;mat73_read_be.at:1794;Read cell array with double-precision arrays;;
625;mat73_read_be.at:1859;Read cell array with single-precision arrays;;
626;mat73_read_be.at:1924;Read cell array with 64-bit integer arrays;;
627;mat73_read_be.at:1989;Read cell array with 64-bit unsigned integer arrays;;
628;mat73_read_be.at:2054;Read cell array with 32-bit integer arrays;;
629;mat73_read_be.at:2119;Read cell array with 32-bit unsigned integer arrays;;
630;mat73_read_be.at:2184;Read cell array with 16-bit integer arrays;;
631;mat73_read_be.at:2249;Read cell array with 16-bit unsigned integer arrays;;
632;mat73_read_be.at:2314;Read cell array with 8-bit integer arrays;;
633;mat73_read_be.at:2379;Read cell array with 8-bit unsigned integer arrays;;
634;mat73_read_be.at:2444;Read cell array with logical arrays;;
635;mat73_read_be.at:2500;Read cell array with double-precision sparse arrays;;
636;mat73_read_be.at:2554;Read cell array with complex double-precision sparse arrays;;
637;mat73_read_be.at:2608;Read cell array with character arrays;;
638;mat73_read_be.at:2650;Read cell array with empty structure arrays;;
639;mat73_read_be.at:2710;Read cell array with structure arrays (numeric fields);;
640;mat73_read_be.at:3564;Read cell array with structure arrays (sparse fields);;
641;mat73_read_be.at:3674;Read cell array structure arrays (character fields);;
642;mat73_readslab_be.at:1;Read slab of double-precision array;mat73_readslab readslab;
643;mat73_readslab_be.at:34;Read slab of single-precision array;mat73_readslab readslab;
644;mat73_readslab_be.at:67;Read slab of 64-bit integer array;mat73_readslab readslab;
645;mat73_readslab_be.at:100;Read slab of 64-bit unsigned integer array;mat73_readslab readslab;
646;mat73_readslab_be.at:133;Read slab of 32-bit integer array;mat73_readslab readslab;
647;mat73_readslab_be.at:166;Read slab of 32-bit unsigned integer array;mat73_readslab readslab;
648;mat73_readslab_be.at:199;Read slab of 16-bit integer array;mat73_readslab readslab;
649;mat73_readslab_be.at:232;Read slab of 16-bit unsigned integer array;mat73_readslab readslab;
650;mat73_readslab_be.at:265;Read slab of 8-bit integer array;mat73_readslab readslab;
651;mat73_readslab_be.at:298;Read slab of 8-bit unsigned integer array;mat73_readslab readslab;
652;mat73_readslab_be.at:331;Read slab of double-precision complex array;mat73_readslab readslab;
653;mat73_readslab_be.at:364;Read slab of single-precision complex array;mat73_readslab readslab;
654;mat73_readslab_be.at:397;Read slab of 64-bit integer complex array;mat73_readslab readslab;
655;mat73_readslab_be.at:430;Read slab of 64-bit unsigned integer complex array;mat73_readslab readslab;
656;mat73_readslab_be.at:463;Read slab of 32-bit integer complex array;mat73_readslab readslab;
657;mat73_readslab_be.at:496;Read slab of 32-bit unsigned integer complex array;mat73_readslab readslab;
658;mat73_readslab_be.at:529;Read slab of 16-bit integer complex array;mat73_readslab readslab;
659;mat73_readslab_be.at:562;Read slab of 16-bit unsigned integer complex array;mat73_readslab readslab;
660;mat73_readslab_be.at:595;Read slab of 8-bit integer complex array;mat73_readslab readslab;
661;mat73_readslab_be.at:628;Read slab of 8-bit unsigned integer complex array;mat73_readslab readslab;
662;mat73_readslab_be.at:661;Read linear slab of double-precision array;mat73_readslab readslab read_data_linear;
663;mat73_readslab_be.at:695;Read linear slab of single-precision array;mat73_readslab readslab read_data_linear;
664;mat73_readslab_be.at:729;Read linear slab of 64-bit integer array;mat73_readslab readslab read_data_linear;
665;mat73_readslab_be.at:763;Read linear slab of 64-bit unsigned integer array;mat73_readslab readslab read_data_linear;
666;mat73_readslab_be.at:797;Read linear slab of 32-bit integer array;mat73_readslab readslab read_data_linear;
667;mat73_readslab_be.at:831;Read linear slab of 32-bit unsigned integer array;mat73_readslab readslab read_data_linear;
668;mat73_readslab_be.at:865;Read linear slab of 16-bit integer array;mat73_readslab readslab read_data_linear;
669;mat73_readslab_be.at:899;Read linear slab of 16-bit unsigned integer array;mat73_readslab readslab read_data_linear;
670;mat73_readslab_be.at:933;Read linear slab of 8-bit integer array;mat73_readslab readslab read_data_linear;
671;mat73_readslab_be.at:967;Read linear slab of 8-bit unsigned integer array;mat73_readslab readslab read_data_linear;
672;mat73_readslab_be.at:1001;Read linear slab of double-precision complex array;mat73_readslab readslab read_data_linear;
673;mat73_readslab_be.at:1035;Read linear slab of single-precision complex array;mat73_readslab readslab read_data_linear;
674;mat73_readslab_be.at:1069;Read linear slab of 64-bit integer complex array;mat73_readslab readslab read_data_linear;
675;mat73_readslab_be.at:1103;Read linear slab of 64-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
676;mat73_readslab_be.at:1137;Read linear slab of 32-bit integer complex array;mat73_readslab readslab read_data_linear;
677;mat73_readslab_be.at:1171;Read linear slab of 32-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
678;mat73_readslab_be.at:1205;Read linear slab of 16-bit integer complex array;mat73_readslab readslab read_data_linear;
679;mat73_readslab_be.at:1239;Read linear slab of 16-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
680;mat73_readslab_be.at:1273;Read linear slab of 8-bit integer complex array;mat73_readslab readslab read_data_linear;
681;mat73_readslab_be.at:1307;Read linear slab of 8-bit unsigned integer complex array;mat73_readslab readslab read_data_linear;
682;mat5_uncompressed_write.at:27;Write 2D double-precision array;;
683;mat5_uncompressed_write.at:69;Write 2D single-precision array;;
684;mat5_uncompressed_write.at:111;Write 2D 64-bit integer array;;
685;mat5_uncompressed_write.at:154;Write 2D 64-bit unsigned integer array;;
686;mat5_uncompressed_write.at:197;Write 2D 32-bit integer array;;
687;mat5_uncompressed_write.at:239;Write 2D 32-bit unsigned integer array;;
688;mat5_uncompressed_write.at:281;Write 2D 16-bit integer array;;
689;mat5_uncompressed_write.at:323;Write 2D 16-bit unsigned integer array;;
690;mat5_uncompressed_write.at:365;Write 2D 8-bit integer array;;
691;mat5_uncompressed_write.at:407;Write 2D 8-bit unsigned integer array;;
692;mat5_uncompressed_write.at:449;Write 2D double-precision complex array;;
693;mat5_uncompressed_write.at:491;Write 2D single-precision complex array;;
694;mat5_uncompressed_write.at:533;Write 2D 64-bit integer complex array;;
695;mat5_uncompressed_write.at:576;Write 2D 64-bit unsigned integer complex array;;
696;mat5_uncompressed_write.at:619;Write 2D 32-bit integer complex array;;
697;mat5_uncompressed_write.at:661;Write 2D 32-bit unsigned integer complex array;;
698;mat5_uncompressed_write.at:703;Write 2D 16-bit integer complex array;;
699;mat5_uncompressed_write.at:745;Write 2D 16-bit unsigned integer complex array;;
700;mat5_uncompressed_write.at:787;Write 2D 8-bit integer complex array;;
701;mat5_uncompressed_write.at:829;Write 2D 8-bit unsigned integer complex array;;
702;mat5_uncompressed_write.at:871;Write 2D logical array;;
703;mat5_uncompressed_write.at:960;Write 2D sparse double-precision array;;
704;mat5_uncompressed_write.at:1026;Write 2D sparse complex double-precision array;;
705;mat5_uncompressed_write.at:1092;Write 2D empty array;;
706;mat5_uncompressed_write.at:1130;Write character array;;
707;mat5_uncompressed_write.at:1171;Write empty structure array;;
708;mat5_uncompressed_write.at:1291;Write structure array with 2D double-precision fields;;
709;mat5_uncompressed_write.at:1373;Write structure array with 2D single-precision fields;;
710;mat5_uncompressed_write.at:1455;Write structure array with 2D 64-bit signed integer fields;;
711;mat5_uncompressed_write.at:1538;Write structure array with 2D 64-bit unsigned integer fields;;
712;mat5_uncompressed_write.at:1621;Write structure array with 2D 32-bit signed integer fields;;
713;mat5_uncompressed_write.at:1703;Write structure array with 2D 32-bit unsigned integer fields;;
714;mat5_uncompressed_write.at:1785;Write structure array with 2D 16-bit signed integer fields;;
715;mat5_uncompressed_write.at:1867;Write structure array with 2D 16-bit unsigned integer fields;;
716;mat5_uncompressed_write.at:1949;Write structure array with 2D 8-bit signed integer fields;;
717;mat5_uncompressed_write.at:2031;Write structure array with 2D 8-bit unsigned integer fields;;
718;mat5_uncompressed_write.at:2113;Write structure array with 2D double-precision complex fields;;
719;mat5_uncompressed_write.at:2195;Write structure array with 2D single-precision complex fields;;
720;mat5_uncompressed_write.at:2277;Write structure array with 2D 64-bit signed integer complex fields;;
721;mat5_uncompressed_write.at:2360;Write structure array with 2D 64-bit unsigned integer complex fields;;
722;mat5_uncompressed_write.at:2443;Write structure array with 2D 32-bit signed integer complex fields;;
723;mat5_uncompressed_write.at:2525;Write structure array with 2D 32-bit unsigned integer complex fields;;
724;mat5_uncompressed_write.at:2607;Write structure array with 2D 16-bit signed integer complex fields;;
725;mat5_uncompressed_write.at:2689;Write structure array with 2D 16-bit unsigned integer complex fields;;
726;mat5_uncompressed_write.at:2771;Write structure array with 2D 8-bit signed integer complex fields;;
727;mat5_uncompressed_write.at:2853;Write structure array with 2D 8-bit unsigned integer complex fields;;
728;mat5_uncompressed_write.at:2935;Write structure array with 2D logical fields;;
729;mat5_uncompressed_write.at:3020;Write empty cell array;;
730;mat5_uncompressed_write.at:3079;Write cell array with 2D double-precision fields;;
731;mat5_uncompressed_write.at:3155;Write cell array with 2D single-precision fields;;
732;mat5_uncompressed_write.at:3231;Write cell array with 2D 64-bit signed integer fields;;
733;mat5_uncompressed_write.at:3308;Write cell array with 2D 64-bit unsigned integer fields;;
734;mat5_uncompressed_write.at:3385;Write cell array with 2D 32-bit signed integer fields;;
735;mat5_uncompressed_write.at:3461;Write cell array with 2D 32-bit unsigned integer fields;;
736;mat5_uncompressed_write.at:3537;Write cell array with 2D 16-bit signed integer fields;;
737;mat5_uncompressed_write.at:3613;Write cell array with 2D 16-bit unsigned integer fields;;
738;mat5_uncompressed_write.at:3689;Write cell array with 2D 8-bit signed integer fields;;
739;mat5_uncompressed_write.at:3765;Write cell array with 2D 8-bit unsigned integer fields;;
740;mat5_uncompressed_write.at:3841;Write cell array with 2D double-precision complex fields;;
741;mat5_uncompressed_write.at:3919;Write cell array with 2D single-precision complex fields;;
742;mat5_uncompressed_write.at:3997;Write cell array with 2D 64-bit signed integer complex fields;;
743;mat5_uncompressed_write.at:4076;Write cell array with 2D 64-bit unsigned integer complex fields;;
744;mat5_uncompressed_write.at:4155;Write cell array with 2D 32-bit signed integer complex fields;;
745;mat5_uncompressed_write.at:4233;Write cell array with 2D 32-bit unsigned integer complex fields;;
746;mat5_uncompressed_write.at:4311;Write cell array with 2D 16-bit signed integer complex fields;;
747;mat5_uncompressed_write.at:4389;Write cell array with 2D 16-bit unsigned integer complex fields;;
748;mat5_uncompressed_write.at:4467;Write cell array with 2D 8-bit signed integer complex fields;;
749;mat5_uncompressed_write.at:4545;Write cell array with 2D 8-bit unsigned integer complex fields;;
750;mat5_uncompressed_write.at:4623;Write cell array with 2D logical fields;;
751;mat5_compressed_write.at:27;Write 2D double-precision array;;
752;mat5_compressed_write.at:70;Write 2D single-precision array;;
753;mat5_compressed_write.at:113;Write 2D 64-bit integer array;;
754;mat5_compressed_write.at:157;Write 2D 64-bit unsigned integer array;;
755;mat5_compressed_write.at:201;Write 2D 32-bit integer array;;
756;mat5_compressed_write.at:244;Write 2D 32-bit unsigned integer array;;
757;mat5_compressed_write.at:287;Write 2D 16-bit integer array;;
758;mat5_compressed_write.at:330;Write 2D 16-bit unsigned integer array;;
759;mat5_compressed_write.at:373;Write 2D 8-bit integer array;;
760;mat5_compressed_write.at:416;Write 2D 8-bit unsigned integer array;;
761;mat5_compressed_write.at:459;Write 2D double-precision complex array;;
762;mat5_compressed_write.at:502;Write 2D single-precision complex array;;
763;mat5_compressed_write.at:545;Write 2D 64-bit integer complex array;;
764;mat5_compressed_write.at:589;Write 2D 64-bit unsigned integer complex array;;
765;mat5_compressed_write.at:633;Write 2D 32-bit integer complex array;;
766;mat5_compressed_write.at:676;Write 2D 32-bit unsigned integer complex array;;
767;mat5_compressed_write.at:719;Write 2D 16-bit integer complex array;;
768;mat5_compressed_write.at:762;Write 2D 16-bit unsigned integer complex array;;
769;mat5_compressed_write.at:805;Write 2D 8-bit integer complex array;;
770;mat5_compressed_write.at:848;Write 2D 8-bit unsigned integer complex array;;
771;mat5_compressed_write.at:891;Write 2D logical array;;
772;mat5_compressed_write.at:981;Write 2D sparse double-precision array;;
773;mat5_compressed_write.at:1048;Write 2D sparse complex double-precision array;;
774;mat5_compressed_write.at:1115;Write 2D empty array;;
775;mat5_compressed_write.at:1154;Write character array;;
776;mat5_compressed_write.at:1196;Write empty structure array;;
777;mat5_compressed_write.at:1317;Write structure array with 2D double-precision fields;;
778;mat5_compressed_write.at:1400;Write structure array with 2D single-precision fields;;
779;mat5_compressed_write.at:1483;Write structure array with 2D 64-bit signed integer fields;;
780;mat5_compressed_write.at:1567;Write structure array with 2D 64-bit unsigned integer fields;;
781;mat5_compressed_write.at:1651;Write structure array with 2D 32-bit signed integer fields;;
782;mat5_compressed_write.at:1734;Write structure array with 2D 32-bit unsigned integer fields;;
783;mat5_compressed_write.at:1817;Write structure array with 2D 16-bit signed integer fields;;
784;mat5_compressed_write.at:1900;Write structure array with 2D 16-bit unsigned integer fields;;
785;mat5_compressed_write.at:1983;Write structure array with 2D 8-bit signed integer fields;;
786;mat5_compressed_write.at:2066;Write structure array with 2D 8-bit unsigned integer fields;;
787;mat5_compressed_write.at:2149;Write structure array with 2D double-precision complex fields;;
788;mat5_compressed_write.at:2232;Write structure array with 2D single-precision complex fields;;
789;mat5_compressed_write.at:2315;Write structure array with 2D 64-bit signed integer complex fields;;
790;mat5_compressed_write.at:2399;Write structure array with 2D 64-bit unsigned integer complex fields;;
791;mat5_compressed_write.at:2483;Write structure array with 2D 32-bit signed integer complex fields;;
792;mat5_compressed_write.at:2566;Write structure array with 2D 32-bit unsigned integer complex fields;;
793;mat5_compressed_write.at:2649;Write structure array with 2D 16-bit signed integer complex fields;;
794;mat5_compressed_write.at:2732;Write structure array with 2D 16-bit unsigned integer complex fields;;
795;mat5_compressed_write.at:2815;Write structure array with 2D 8-bit signed integer complex fields;;
796;mat5_compressed_write.at:2898;Write structure array with 2D 8-bit unsigned integer complex fields;;
797;mat5_compressed_write.at:2981;Write structure array with 2D logical fields;;
798;mat5_compressed_write.at:3067;Write empty cell array;;
799;mat5_compressed_write.at:3127;Write cell array with 2D double-precision fields;;
800;mat5_compressed_write.at:3204;Write cell array with 2D single-precision fields;;
801;mat5_compressed_write.at:3281;Write cell array with 2D 64-bit signed integer fields;;
802;mat5_compressed_write.at:3359;Write cell array with 2D 64-bit unsigned integer fields;;
803;mat5_compressed_write.at:3437;Write cell array with 2D 32-bit signed integer fields;;
804;mat5_compressed_write.at:3514;Write cell array with 2D 32-bit unsigned integer fields;;
805;mat5_compressed_write.at:3591;Write cell array with 2D 16-bit signed integer fields;;
806;mat5_compressed_write.at:3668;Write cell array with 2D 16-bit unsigned integer fields;;
807;mat5_compressed_write.at:3745;Write cell array with 2D 8-bit signed integer fields;;
808;mat5_compressed_write.at:3822;Write cell array with 2D 8-bit unsigned integer fields;;
809;mat5_compressed_write.at:3899;Write cell array with 2D double-precision complex fields;;
810;mat5_compressed_write.at:3978;Write cell array with 2D single-precision complex fields;;
811;mat5_compressed_write.at:4057;Write cell array with 2D 64-bit signed integer complex fields;;
812;mat5_compressed_write.at:4137;Write cell array with 2D 64-bit unsigned integer complex fields;;
813;mat5_compressed_write.at:4217;Write cell array with 2D 32-bit signed integer complex fields;;
814;mat5_compressed_write.at:4296;Write cell array with 2D 32-bit unsigned integer complex fields;;
815;mat5_compressed_write.at:4375;Write cell array with 2D 16-bit signed integer complex fields;;
816;mat5_compressed_write.at:4454;Write cell array with 2D 16-bit unsigned integer complex fields;;
817;mat5_compressed_write.at:4533;Write cell array with 2D 8-bit signed integer complex fields;;
818;mat5_compressed_write.at:4612;Write cell array with 2D 8-bit unsigned integer complex fields;;
819;mat5_compressed_write.at:4691;Write cell array with 2D logical fields;;
820;mat73_write.at:27;Write 2D double-precision array;;
821;mat73_write.at:70;Write 2D single-precision array;;
822;mat73_write.at:113;Write 2D 64-bit integer array;;
823;mat73_write.at:157;Write 2D 64-bit unsigned integer array;;
824;mat73_write.at:201;Write 2D 32-bit integer array;;
825;mat73_write.at:244;Write 2D 32-bit unsigned integer array;;
826;mat73_write.at:287;Write 2D 16-bit integer array;;
827;mat73_write.at:330;Write 2D 16-bit unsigned integer array;;
828;mat73_write.at:373;Write 2D 8-bit integer array;;
829;mat73_write.at:416;Write 2D 8-bit unsigned integer array;;
830;mat73_write.at:459;Write 2D double-precision complex array;;
831;mat73_write.at:502;Write 2D single-precision complex array;;
832;mat73_write.at:545;Write 2D 64-bit integer complex array;;
833;mat73_write.at:589;Write 2D 64-bit unsigned integer complex array;;
834;mat73_write.at:633;Write 2D 32-bit integer complex array;;
835;mat73_write.at:676;Write 2D 32-bit unsigned integer complex array;;
836;mat73_write.at:719;Write 2D 16-bit integer complex array;;
837;mat73_write.at:762;Write 2D 16-bit unsigned integer complex array;;
838;mat73_write.at:805;Write 2D 8-bit integer complex array;;
839;mat73_write.at:848;Write 2D 8-bit unsigned integer complex array;;
840;mat73_write.at:891;Write 2D logical array;;
841;mat73_write.at:981;Write 2D sparse double-precision array;;
842;mat73_write.at:1048;Write 2D sparse complex double-precision array;;
843;mat73_write.at:1115;Write 2D empty array;;
844;mat73_write.at:1152;Write character array;;
845;mat73_write.at:1194;Write empty structure array;;
846;mat73_write.at:1310;Write structure array with 2D double-precision fields;;
847;mat73_write.at:1393;Write structure array with 2D single-precision fields;;
848;mat73_write.at:1476;Write structure array with 2D 64-bit signed integer fields;;
849;mat73_write.at:1560;Write structure array with 2D 64-bit unsigned integer fields;;
850;mat73_write.at:1644;Write structure array with 2D 32-bit signed integer fields;;
851;mat73_write.at:1727;Write structure array with 2D 32-bit unsigned integer fields;;
852;mat73_write.at:1810;Write structure array with 2D 16-bit signed integer fields;;
853;mat73_write.at:1893;Write structure array with 2D 16-bit unsigned integer fields;;
854;mat73_write.at:1976;Write structure array with 2D 8-bit signed integer fields;;
855;mat73_write.at:2059;Write structure array with 2D 8-bit unsigned integer fields;;
856;mat73_write.at:2142;Write structure array with 2D double-precision complex fields;;
857;mat73_write.at:2225;Write structure array with 2D single-precision complex fields;;
858;mat73_write.at:2308;Write structure array with 2D 64-bit signed integer complex fields;;
859;mat73_write.at:2392;Write structure array with 2D 64-bit unsigned integer complex fields;;
860;mat73_write.at:2476;Write structure array with 2D 32-bit signed integer complex fields;;
861;mat73_write.at:2559;Write structure array with 2D 32-bit unsigned integer complex fields;;
862;mat73_write.at:2642;Write structure array with 2D 16-bit signed integer complex fields;;
863;mat73_write.at:2725;Write structure array with 2D 16-bit unsigned integer complex fields;;
864;mat73_write.at:2808;Write structure array with 2D 8-bit signed integer complex fields;;
865;mat73_write.at:2891;Write structure array with 2D 8-bit unsigned integer complex fields;;
866;mat73_write.at:2974;Write structure array with 2D logical fields;;
867;mat73_write.at:3058;Write empty cell array;;
868;mat73_write.at:3114;Write cell array with 2D double-precision fields;;
869;mat73_write.at:3191;Write cell array with 2D single-precision fields;;
870;mat73_write.at:3268;Write cell array with 2D 64-bit signed integer fields;;
871;mat73_write.at:3346;Write cell array with 2D 64-bit unsigned integer fields;;
872;mat73_write.at:3424;Write cell array with 2D 32-bit signed integer fields;;
873;mat73_write.at:3501;Write cell array with 2D 32-bit unsigned integer fields;;
874;mat73_write.at:3578;Write cell array with 2D 16-bit signed integer fields;;
875;mat73_write.at:3655;Write cell array with 2D 16-bit unsigned integer fields;;
876;mat73_write.at:3732;Write cell array with 2D 8-bit signed integer fields;;
877;mat73_write.at:3809;Write cell array with 2D 8-bit unsigned integer fields;;
878;mat73_write.at:3886;Write cell array with 2D double-precision complex fields;;
879;mat73_write.at:3965;Write cell array with 2D single-precision complex fields;;
880;mat73_write.at:4044;Write cell array with 2D 64-bit signed integer complex fields;;
881;mat73_write.at:4124;Write cell array with 2D 64-bit unsigned integer complex fields;;
882;mat73_write.at:4204;Write cell array with 2D 32-bit signed integer complex fields;;
883;mat73_write.at:4283;Write cell array with 2D 32-bit unsigned integer complex fields;;
884;mat73_write.at:4362;Write cell array with 2D 16-bit signed integer complex fields;;
885;mat73_write.at:4441;Write cell array with 2D 16-bit unsigned integer complex fields;;
886;mat73_write.at:4520;Write cell array with 2D 8-bit signed integer complex fields;;
887;mat73_write.at:4599;Write cell array with 2D 8-bit unsigned integer complex fields;;
888;mat73_write.at:4678;Write cell array with 2D logical fields;;
889;mat73_compressed_write.at:27;Write 2D double-precision array;;
890;mat73_compressed_write.at:71;Write 2D single-precision array;;
891;mat73_compressed_write.at:115;Write 2D 64-bit integer array;;
892;mat73_compressed_write.at:160;Write 2D 64-bit unsigned integer array;;
893;mat73_compressed_write.at:205;Write 2D 32-bit integer array;;
894;mat73_compressed_write.at:249;Write 2D 32-bit unsigned integer array;;
895;mat73_compressed_write.at:293;Write 2D 16-bit integer array;;
896;mat73_compressed_write.at:337;Write 2D 16-bit unsigned integer array;;
897;mat73_compressed_write.at:381;Write 2D 8-bit integer array;;
898;mat73_compressed_write.at:425;Write 2D 8-bit unsigned integer array;;
899;mat73_compressed_write.at:469;Write 2D double-precision complex array;;
900;mat73_compressed_write.at:513;Write 2D single-precision complex array;;
901;mat73_compressed_write.at:557;Write 2D 64-bit integer complex array;;
902;mat73_compressed_write.at:602;Write 2D 64-bit unsigned integer complex array;;
903;mat73_compressed_write.at:647;Write 2D 32-bit integer complex array;;
904;mat73_compressed_write.at:691;Write 2D 32-bit unsigned integer complex array;;
905;mat73_compressed_write.at:735;Write 2D 16-bit integer complex array;;
906;mat73_compressed_write.at:779;Write 2D 16-bit unsigned integer complex array;;
907;mat73_compressed_write.at:823;Write 2D 8-bit integer complex array;;
908;mat73_compressed_write.at:867;Write 2D 8-bit unsigned integer complex array;;
909;mat73_compressed_write.at:911;Write 2D logical array;;
910;mat73_compressed_write.at:1002;Write 2D sparse double-precision array;;
911;mat73_compressed_write.at:1070;Write 2D sparse complex double-precision array;;
912;mat73_compressed_write.at:1138;Write 2D empty array;;
913;mat73_compressed_write.at:1176;Write character array;;
914;mat73_compressed_write.at:1219;Write empty structure array;;
915;mat73_compressed_write.at:1336;Write structure array with 2D double-precision fields;;
916;mat73_compressed_write.at:1420;Write structure array with 2D single-precision fields;;
917;mat73_compressed_write.at:1504;Write structure array with 2D 64-bit signed integer fields;;
918;mat73_compressed_write.at:1589;Write structure array with 2D 64-bit unsigned integer fields;;
919;mat73_compressed_write.at:1674;Write structure array with 2D 32-bit signed integer fields;;
920;mat73_compressed_write.at:1758;Write structure array with 2D 32-bit unsigned integer fields;;
921;mat73_compressed_write.at:1842;Write structure array with 2D 16-bit signed integer fields;;
922;mat73_compressed_write.at:1926;Write structure array with 2D 16-bit unsigned integer fields;;
923;mat73_compressed_write.at:2010;Write structure array with 2D 8-bit signed integer fields;;
924;mat73_compressed_write.at:2094;Write structure array with 2D 8-bit unsigned integer fields;;
925;mat73_compressed_write.at:2178;Write structure array with 2D double-precision complex fields;;
926;mat73_compressed_write.at:2262;Write structure array with 2D single-precision complex fields;;
927;mat73_compressed_write.at:2346;Write structure array with 2D 64-bit signed integer complex fields;;
928;mat73_compressed_write.at:2431;Write structure array with 2D 64-bit unsigned integer complex fields;;
929;mat73_compressed_write.at:2516;Write structure array with 2D 32-bit signed integer complex fields;;
930;mat73_compressed_write.at:2600;Write structure array with 2D 32-bit unsigned integer complex fields;;
931;mat73_compressed_write.at:2684;Write structure array with 2D 16-bit signed integer complex fields;;
932;mat73_compressed_write.at:2768;Write structure array with 2D 16-bit unsigned integer complex fields;;
933;mat73_compressed_write.at:2852;Write structure array with 2D 8-bit signed integer complex fields;;
934;mat73_compressed_write.at:2936;Write structure array with 2D 8-bit unsigned integer complex fields;;
935;mat73_compressed_write.at:3020;Write structure array with 2D logical fields;;
936;mat73_compressed_write.at:3105;Write empty cell array;;
937;mat73_compressed_write.at:3162;Write cell array with 2D double-precision fields;;
938;mat73_compressed_write.at:3240;Write cell array with 2D single-precision fields;;
939;mat73_compressed_write.at:3318;Write cell array with 2D 64-bit signed integer fields;;
940;mat73_compressed_write.at:3397;Write cell array with 2D 64-bit unsigned integer fields;;
941;mat73_compressed_write.at:3476;Write cell array with 2D 32-bit signed integer fields;;
942;mat73_compressed_write.at:3554;Write cell array with 2D 32-bit unsigned integer fields;;
943;mat73_compressed_write.at:3632;Write cell array with 2D 16-bit signed integer fields;;
944;mat73_compressed_write.at:3710;Write cell array with 2D 16-bit unsigned integer fields;;
945;mat73_compressed_write.at:3788;Write cell array with 2D 8-bit signed integer fields;;
946;mat73_compressed_write.at:3866;Write cell array with 2D 8-bit unsigned integer fields;;
947;mat73_compressed_write.at:3944;Write cell array with 2D double-precision complex fields;;
948;mat73_compressed_write.at:4024;Write cell array with 2D single-precision complex fields;;
949;mat73_compressed_write.at:4104;Write cell array with 2D 64-bit signed integer complex fields;;
950;mat73_compressed_write.at:4185;Write cell array with 2D 64-bit unsigned integer complex fields;;
951;mat73_compressed_write.at:4266;Write cell array with 2D 32-bit signed integer complex fields;;
952;mat73_compressed_write.at:4346;Write cell array with 2D 32-bit unsigned integer complex fields;;
953;mat73_compressed_write.at:4426;Write cell array with 2D 16-bit signed integer complex fields;;
954;mat73_compressed_write.at:4506;Write cell array with 2D 16-bit unsigned integer complex fields;;
955;mat73_compressed_write.at:4586;Write cell array with 2D 8-bit signed integer complex fields;;
956;mat73_compressed_write.at:4666;Write cell array with 2D 8-bit unsigned integer complex fields;;
957;mat73_compressed_write.at:4746;Write cell array with 2D logical fields;;
958;mat5_uncompressed_extended_sparse.at:1;Write 2D sparse single-precision array;;
959;mat5_uncompressed_extended_sparse.at:43;Write 2D sparse 64-bit integer array;;
960;mat5_uncompressed_extended_sparse.at:86;Write 2D sparse 64-bit unsigned integer array;;
961;mat5_uncompressed_extended_sparse.at:129;Write 2D sparse 32-bit integer array;;
962;mat5_uncompressed_extended_sparse.at:171;Write 2D sparse 32-bit unsigned integer array;;
963;mat5_uncompressed_extended_sparse.at:213;Write 2D sparse 16-bit integer array;;
964;mat5_uncompressed_extended_sparse.at:255;Write 2D sparse 16-bit unsigned integer array;;
965;mat5_uncompressed_extended_sparse.at:297;Write 2D sparse 8-bit integer array;;
966;mat5_uncompressed_extended_sparse.at:339;Write 2D sparse 8-bit unsigned integer array;;
967;mat5_uncompressed_extended_sparse.at:381;Write 2D sparse complex single-precision array;;
968;mat5_uncompressed_extended_sparse.at:423;Write 2D sparse complex 64-bit integer complex array;;
969;mat5_uncompressed_extended_sparse.at:466;Write 2D sparse complex 64-bit unsigned integer complex array;;
970;mat5_uncompressed_extended_sparse.at:509;Write 2D sparse complex 32-bit integer complex array;;
971;mat5_uncompressed_extended_sparse.at:551;Write 2D sparse complex 32-bit unsigned integer complex array;;
972;mat5_uncompressed_extended_sparse.at:593;Write 2D sparse complex 16-bit integer complex array;;
973;mat5_uncompressed_extended_sparse.at:635;Write 2D sparse complex 16-bit unsigned integer complex array;;
974;mat5_uncompressed_extended_sparse.at:677;Write 2D sparse complex 8-bit integer complex array;;
975;mat5_uncompressed_extended_sparse.at:719;Write 2D sparse complex 8-bit unsigned integer complex array;;
976;mat5_compressed_extended_sparse.at:1;Write 2D sparse single-precision array;;
977;mat5_compressed_extended_sparse.at:44;Write 2D sparse 64-bit integer array;;
978;mat5_compressed_extended_sparse.at:88;Write 2D sparse 64-bit unsigned integer array;;
979;mat5_compressed_extended_sparse.at:132;Write 2D sparse 32-bit integer array;;
980;mat5_compressed_extended_sparse.at:175;Write 2D sparse 32-bit unsigned integer array;;
981;mat5_compressed_extended_sparse.at:218;Write 2D sparse 16-bit integer array;;
982;mat5_compressed_extended_sparse.at:261;Write 2D sparse 16-bit unsigned integer array;;
983;mat5_compressed_extended_sparse.at:304;Write 2D sparse 8-bit integer array;;
984;mat5_compressed_extended_sparse.at:347;Write 2D sparse 8-bit unsigned integer array;;
985;mat5_compressed_extended_sparse.at:390;Write 2D sparse complex single-precision array;;
986;mat5_compressed_extended_sparse.at:433;Write 2D sparse complex 64-bit integer complex array;;
987;mat5_compressed_extended_sparse.at:477;Write 2D sparse complex 64-bit unsigned integer complex array;;
988;mat5_compressed_extended_sparse.at:521;Write 2D sparse complex 32-bit integer complex array;;
989;mat5_compressed_extended_sparse.at:564;Write 2D sparse complex 32-bit unsigned integer complex array;;
990;mat5_compressed_extended_sparse.at:607;Write 2D sparse complex 16-bit integer complex array;;
991;mat5_compressed_extended_sparse.at:650;Write 2D sparse complex 16-bit unsigned integer complex array;;
992;mat5_compressed_extended_sparse.at:693;Write 2D sparse complex 8-bit integer complex array;;
993;mat5_compressed_extended_sparse.at:736;Write 2D sparse complex 8-bit unsigned integer complex array;;
994;mat73_uncompressed_extended_sparse.at:1;Write 2D sparse single-precision array;;
995;mat73_uncompressed_extended_sparse.at:44;Write 2D sparse 64-bit integer array;;
996;mat73_uncompressed_extended_sparse.at:88;Write 2D sparse 64-bit unsigned integer array;;
997;mat73_uncompressed_extended_sparse.at:132;Write 2D sparse 32-bit integer array;;
998;mat73_uncompressed_extended_sparse.at:175;Write 2D sparse 32-bit unsigned integer array;;
999;mat73_uncompressed_extended_sparse.at:218;Write 2D sparse 16-bit integer array;;
1000;mat73_uncompressed_extended_sparse.at:261;Write 2D sparse 16-bit unsigned integer array;;
1001;mat73_uncompressed_extended_sparse.at:304;Write 2D sparse 8-bit integer array;;
1002;mat73_uncompressed_extended_sparse.at:347;Write 2D sparse 8-bit unsigned integer array;;
1003;mat73_uncompressed_extended_sparse.at:390;Write 2D sparse complex single-precision array;;
1004;mat73_uncompressed_extended_sparse.at:433;Write 2D sparse complex 64-bit integer complex array;;
1005;mat73_uncompressed_extended_sparse.at:477;Write 2D sparse complex 64-bit unsigned integer complex array;;
1006;mat73_uncompressed_extended_sparse.at:521;Write 2D sparse complex 32-bit integer complex array;;
1007;mat73_uncompressed_extended_sparse.at:564;Write 2D sparse complex 32-bit unsigned integer complex array;;
1008;mat73_uncompressed_extended_sparse.at:607;Write 2D sparse complex 16-bit integer complex array;;
1009;mat73_uncompressed_extended_sparse.at:650;Write 2D sparse complex 16-bit unsigned integer complex array;;
1010;mat73_uncompressed_extended_sparse.at:693;Write 2D sparse complex 8-bit integer complex array;;
1011;mat73_uncompressed_extended_sparse.at:736;Write 2D sparse complex 8-bit unsigned integer complex array;;
1012;mat73_compressed_extended_sparse.at:1;Write 2D sparse single-precision array;;
1013;mat73_compressed_extended_sparse.at:45;Write 2D sparse 64-bit integer array;;
1014;mat73_compressed_extended_sparse.at:90;Write 2D sparse 64-bit unsigned integer array;;
1015;mat73_compressed_extended_sparse.at:135;Write 2D sparse 32-bit integer array;;
1016;mat73_compressed_extended_sparse.at:179;Write 2D sparse 32-bit unsigned integer array;;
1017;mat73_compressed_extended_sparse.at:223;Write 2D sparse 16-bit integer array;;
1018;mat73_compressed_extended_sparse.at:267;Write 2D sparse 16-bit unsigned integer array;;
1019;mat73_compressed_extended_sparse.at:311;Write 2D sparse 8-bit integer array;;
1020;mat73_compressed_extended_sparse.at:355;Write 2D sparse 8-bit unsigned integer array;;
1021;mat73_compressed_extended_sparse.at:399;Write 2D sparse complex single-precision array;;
1022;mat73_compressed_extended_sparse.at:443;Write 2D sparse complex 64-bit integer complex array;;
1023;mat73_compressed_extended_sparse.at:488;Write 2D sparse complex 64-bit unsigned integer complex array;;
1024;mat73_compressed_extended_sparse.at:533;Write 2D sparse complex 32-bit integer complex array;;
1025;mat73_compressed_extended_sparse.at:577;Write 2D sparse complex 32-bit unsigned integer complex array;;
1026;mat73_compressed_extended_sparse.at:621;Write 2D sparse complex 16-bit integer complex array;;
1027;mat73_compressed_extended_sparse.at:665;Write 2D sparse complex 16-bit unsigned integer complex array;;
1028;mat73_compressed_extended_sparse.at:709;Write 2D sparse complex 8-bit integer complex array;;
1029;mat73_compressed_extended_sparse.at:753;Write 2D sparse complex 8-bit unsigned integer complex array;;
1030;struct_api.at:27;Create structure array;struct_api;
1031;struct_api.at:67;Set structure field;struct_api;
1032;struct_api.at:158;Get structure fieldnames;struct_api;
1033;struct_api.at:174;Add fields to structure array;struct_api;
1034;struct_api.at:223;Linearly index a structure;struct_api;
1035;struct_api.at:491;Index structure via dimension slices;struct_api;
1036;cell_api.at:27;Set cell array elements;cell_api;
1037;cell_api.at:132;Linearly index cell array;cell_api;
1038;cell_api.at:265;Index cell array via dimension slices;cell_api;
"
# List of the all the test groups.
at_groups_all=`$as_echo "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 1038; then
      $as_echo "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`$as_echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`$as_echo "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: \`$at_envvar'" ;;
	esac
	at_value=`$as_echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) $as_echo "$as_me: invalid option: $at_option" >&2
	$as_echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"; then :
  as_fn_error $? "\`$at_prev' requires an argument"
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`$as_echo "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 disable colored test results, or enable even without terminal
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <chulbe2lsu@users.sourceforge.net>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
MATIO 1.5.2 test suite: matio testsuite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  $as_echo "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  $as_echo "$as_me (MATIO 1.5.2)" &&
  cat <<\_ATEOF || at_write_fail=1

Copyright (C) 2010 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.
# Banner 1. testsuite.at:60
# Category starts at test group 1.
at_banner_text_1="Read MAT version 4 (Little Endian)"
# Banner 2. testsuite.at:64
# Category starts at test group 6.
at_banner_text_2="Read MAT version 4 (Big Endian)"
# Banner 3. testsuite.at:68
# Category starts at test group 11.
at_banner_text_3="Read Uncompressed MAT version 5 (Little Endian)"
# Banner 4. testsuite.at:72
# Category starts at test group 123.
at_banner_text_4="Read Compressed MAT version 5 (Little Endian)"
# Banner 5. testsuite.at:76
# Category starts at test group 235.
at_banner_text_5="Read Uncompressed MAT version 5 (Big Endian)"
# Banner 6. testsuite.at:80
# Category starts at test group 347.
at_banner_text_6="Read Compressed MAT version 5 (Big Endian)"
# Banner 7. testsuite.at:84
# Category starts at test group 459.
at_banner_text_7="Read MAT version 7.3 (HDF5 Schema 1) (Little Endian)"
# Banner 8. testsuite.at:88
# Category starts at test group 571.
at_banner_text_8="Read MAT version 7.3 (HDF5 Schema 1) (Big Endian)"
# Banner 9. testsuite.at:92
# Category starts at test group 682.
at_banner_text_9="Write Uncompressed MAT version 5"
# Banner 10. testsuite.at:95
# Category starts at test group 751.
at_banner_text_10="Write Compressed MAT version 5"
# Banner 11. testsuite.at:98
# Category starts at test group 820.
at_banner_text_11="Write MAT version 7.3"
# Banner 12. testsuite.at:101
# Category starts at test group 889.
at_banner_text_12="Write Compressed MAT version 7.3"
# Banner 13. testsuite.at:104
# Category starts at test group 958.
at_banner_text_13="Extended Sparse Uncompressed MAT version 5"
# Banner 14. testsuite.at:107
# Category starts at test group 976.
at_banner_text_14="Extended Sparse Compressed MAT version 5"
# Banner 15. testsuite.at:110
# Category starts at test group 994.
at_banner_text_15="Extended Sparse version 7.3"
# Banner 16. testsuite.at:113
# Category starts at test group 1012.
at_banner_text_16="Extended Sparse Compressed version 7.3"
# Banner 17. testsuite.at:116
# Category starts at test group 1030.
at_banner_text_17="API Tests"

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory"
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file"
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`$as_echo "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.



# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
$as_echo "## ---------------------------------------- ##
## MATIO 1.5.2 test suite: matio testsuite. ##
## ---------------------------------------- ##"
{
  $as_echo "## ---------------------------------------- ##
## MATIO 1.5.2 test suite: matio testsuite. ##
## ---------------------------------------- ##"
  echo

  $as_echo "$as_me: command line was:"
  $as_echo "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    $as_echo "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    $as_echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    $as_echo "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  $as_echo "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  $as_echo "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do $as_echo "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$3: hard failure"; exit 99;;
    *) $as_echo "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    $as_echo "cd '$at_dir'" &&
    $as_echo "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  $as_echo "## ---------------- ##
## Tested programs. ##
## ---------------- ##"
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  case $at_program in
    [\\/]* | ?:[\\/]* ) $at_program_=$at_program ;;
    * )
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -f "$as_dir/$at_program" && break
  done
IFS=$as_save_IFS

    at_program_=$as_dir/$at_program ;;
  esac
  if test -f "$at_program_"; then
    {
      $as_echo "$at_srcdir/testsuite.at:27: $at_program_ --version"
      "$at_program_" --version </dev/null
      echo
    } >&5 2>&1
  else
    as_fn_error $? "cannot find $at_program" "$LINENO" 5
  fi
done

{
  $as_echo "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
$as_echo "$as_me: starting at: $at_start_date" >&5

# Check for libtool configuration data
# host_os and with_msvc_ld are used in MATIO_AT_HOST_DATA
eval `$LIBTOOL --config | grep '^EGREP='`
eval `$LIBTOOL --config | $EGREP '^(host_os|with_msvc_ld)='`

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create \`$at_suite_dir'" "$LINENO" 5

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for `-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"; then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
$as_echo "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above `rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet $as_echo_n "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <chulbe2lsu@users.sourceforge.net>.
_ATEOF
    $as_echo "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose $as_echo_n "$at_group. $at_setup_line: "
  $as_echo_n "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    $as_echo "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    $as_echo " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      $as_echo "$at_log_msg" >> "$at_group_log"
      $as_echo "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      $as_echo "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 1 -gt 2 && at_signame=$at_signal
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
$as_echo "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test "${TMOUT+set}" = set && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`$as_echo "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
$as_echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    $as_echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
$as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  $as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    $as_echo "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      $as_echo "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="\`${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  $as_echo "Please send $at_msg and all information you think might help:

   To: <chulbe2lsu@users.sourceforge.net>
   Subject: [MATIO 1.5.2] $as_me: $at_fail_list${at_fail_list:+ failed${at_xpass_list:+, }}$at_xpass_list${at_xpass_list:+ passed unexpectedly}

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below \`${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 'mat4_read.at:29' \
  "Read 2d double-precision array" "                 " 1
at_xfail=no
(
  $as_echo "1. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read.at:44: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var1" "mat4_read.at:44"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:44"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 'mat4_read.at:47' \
  "Read 2d double-precision complex array" "         " 1
at_xfail=no
(
  $as_echo "2. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read.at:62: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var11" "mat4_read.at:62"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 'mat4_read.at:65' \
  "Read 2D character array" "                        " 1
at_xfail=no
(
  $as_echo "3. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read.at:80: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var24" "mat4_read.at:80"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:80"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 'mat4_read.at:83' \
  "Read small v4 file" "                             " 1
at_xfail=no
(
  $as_echo "4. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read.at:95: \$builddir/test_mat readvar \$srcdir/datasets/small_v4_le.mat x"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/small_v4_le.mat x" "mat4_read.at:95"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/small_v4_le.mat x
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: x
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
3.14159 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read.at:95"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 'mat4_readslab_le.at:29' \
  "Read linear slab of double-precision array" "     " 1
at_xfail=no
(
  $as_echo "5. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_readslab_le.at:39: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_v4_le.mat var1\\(2:3:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_v4_le.mat var1\\(2:3:end\\)" "mat4_readslab_le.at:39"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_v4_le.mat var1\(2:3:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "2 
5 
8 
11 
14 
17 
20 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_readslab_le.at:39"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 'mat4_read_be.at:29' \
  "Read 2d double-precision array" "                 " 2
at_xfail=no
(
  $as_echo "6. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read_be.at:44: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var1" "mat4_read_be.at:44"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read_be.at:44"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 'mat4_read_be.at:47' \
  "Read 2d double-precision complex array" "         " 2
at_xfail=no
(
  $as_echo "7. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read_be.at:62: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var11" "mat4_read_be.at:62"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read_be.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 'mat4_read_be.at:65' \
  "Read 2D character array" "                        " 2
at_xfail=no
(
  $as_echo "8. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read_be.at:80: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_v4_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var24" "mat4_read_be.at:80"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_v4_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read_be.at:80"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 'mat4_read_be.at:83' \
  "Read small v4 file" "                             " 2
at_xfail=no
(
  $as_echo "9. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_read_be.at:95: \$builddir/test_mat readvar \$srcdir/datasets/small_v4_be.mat x"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/small_v4_be.mat x" "mat4_read_be.at:95"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/small_v4_be.mat x
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: x
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
3.14159 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_read_be.at:95"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 'mat4_readslab_be.at:29' \
  "Read linear slab of double-precision array" "     " 2
at_xfail=no
(
  $as_echo "10. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat4_readslab_be.at:39: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_v4_be.mat var1\\(2:3:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_v4_be.mat var1\\(2:3:end\\)" "mat4_readslab_be.at:39"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_v4_be.mat var1\(2:3:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "2 
5 
8 
11 
14 
17 
20 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat4_readslab_be.at:39"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 'mat5_uncompressed_read_le.at:27' \
  "Read 2D double-precision array" "                 " 3
at_xfail=no
(
  $as_echo "11. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:41: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var1" "mat5_uncompressed_read_le.at:41"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 'mat5_uncompressed_read_le.at:44' \
  "Read 2D single-precision array" "                 " 3
at_xfail=no
(
  $as_echo "12. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:58: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var2" "mat5_uncompressed_read_le.at:58"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:58"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 'mat5_uncompressed_read_le.at:61' \
  "Read 2D 64-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "13. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:75: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var3" "mat5_uncompressed_read_le.at:75"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:75"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 'mat5_uncompressed_read_le.at:78' \
  "Read 2D 64-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "14. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:92: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var4" "mat5_uncompressed_read_le.at:92"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:92"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 'mat5_uncompressed_read_le.at:95' \
  "Read 2D 32-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "15. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var5" "mat5_uncompressed_read_le.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 'mat5_uncompressed_read_le.at:112' \
  "Read 2D 32-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "16. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:126: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var6" "mat5_uncompressed_read_le.at:126"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 'mat5_uncompressed_read_le.at:129' \
  "Read 2D 16-bit integer array" "                   " 3
at_xfail=no
(
  $as_echo "17. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:143: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var7" "mat5_uncompressed_read_le.at:143"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:143"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
#AT_START_18
at_fn_group_banner 18 'mat5_uncompressed_read_le.at:146' \
  "Read 2D 16-bit unsigned integer array" "          " 3
at_xfail=no
(
  $as_echo "18. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:160: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var8" "mat5_uncompressed_read_le.at:160"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:160"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_18
#AT_START_19
at_fn_group_banner 19 'mat5_uncompressed_read_le.at:163' \
  "Read 2D 8-bit integer array" "                    " 3
at_xfail=no
(
  $as_echo "19. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:177: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var9" "mat5_uncompressed_read_le.at:177"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_19
#AT_START_20
at_fn_group_banner 20 'mat5_uncompressed_read_le.at:180' \
  "Read 2D 8-bit unsigned integer array" "           " 3
at_xfail=no
(
  $as_echo "20. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:194: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var10" "mat5_uncompressed_read_le.at:194"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:194"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_20
#AT_START_21
at_fn_group_banner 21 'mat5_uncompressed_read_le.at:197' \
  "Read 2D double-precision complex array" "         " 3
at_xfail=no
(
  $as_echo "21. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:211: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var11" "mat5_uncompressed_read_le.at:211"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:211"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_21
#AT_START_22
at_fn_group_banner 22 'mat5_uncompressed_read_le.at:214' \
  "Read 2D single-precision complex array" "         " 3
at_xfail=no
(
  $as_echo "22. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:228: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var12" "mat5_uncompressed_read_le.at:228"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:228"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_22
#AT_START_23
at_fn_group_banner 23 'mat5_uncompressed_read_le.at:231' \
  "Read 2D 64-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "23. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:245: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var13" "mat5_uncompressed_read_le.at:245"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:245"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_23
#AT_START_24
at_fn_group_banner 24 'mat5_uncompressed_read_le.at:248' \
  "Read 2D 64-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "24. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:262: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var14" "mat5_uncompressed_read_le.at:262"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_24
#AT_START_25
at_fn_group_banner 25 'mat5_uncompressed_read_le.at:265' \
  "Read 2D 32-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "25. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:279: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var15" "mat5_uncompressed_read_le.at:279"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:279"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_25
#AT_START_26
at_fn_group_banner 26 'mat5_uncompressed_read_le.at:282' \
  "Read 2D 32-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "26. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:296: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var16" "mat5_uncompressed_read_le.at:296"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:296"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_26
#AT_START_27
at_fn_group_banner 27 'mat5_uncompressed_read_le.at:299' \
  "Read 2D 16-bit integer complex array" "           " 3
at_xfail=no
(
  $as_echo "27. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:313: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var17" "mat5_uncompressed_read_le.at:313"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:313"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_27
#AT_START_28
at_fn_group_banner 28 'mat5_uncompressed_read_le.at:316' \
  "Read 2D 16-bit unsigned integer complex array" "  " 3
at_xfail=no
(
  $as_echo "28. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var18" "mat5_uncompressed_read_le.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_28
#AT_START_29
at_fn_group_banner 29 'mat5_uncompressed_read_le.at:333' \
  "Read 2D 8-bit integer complex array" "            " 3
at_xfail=no
(
  $as_echo "29. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:347: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var19" "mat5_uncompressed_read_le.at:347"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:347"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_29
#AT_START_30
at_fn_group_banner 30 'mat5_uncompressed_read_le.at:350' \
  "Read 2D 8-bit unsigned integer complex array" "   " 3
at_xfail=no
(
  $as_echo "30. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:364: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var20" "mat5_uncompressed_read_le.at:364"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:364"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_30
#AT_START_31
at_fn_group_banner 31 'mat5_uncompressed_read_le.at:367' \
  "Read 2D logical array" "                          " 3
at_xfail=no
(
  $as_echo "31. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:382: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var90" "mat5_uncompressed_read_le.at:382"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:382"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_31
#AT_START_32
at_fn_group_banner 32 'mat5_uncompressed_read_le.at:385' \
  "Read double-precision sparse array" "             " 3
at_xfail=no
(
  $as_echo "32. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:400: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var21" "mat5_uncompressed_read_le.at:400"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:400"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_32
#AT_START_33
at_fn_group_banner 33 'mat5_uncompressed_read_le.at:403' \
  "Read double-precision sparse complex array" "     " 3
at_xfail=no
(
  $as_echo "33. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:418: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var22" "mat5_uncompressed_read_le.at:418"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:418"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_33
#AT_START_34
at_fn_group_banner 34 'mat5_uncompressed_read_le.at:421' \
  "Read empty array" "                               " 3
at_xfail=no
(
  $as_echo "34. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:431: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var23" "mat5_uncompressed_read_le.at:431"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:431"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_34
#AT_START_35
at_fn_group_banner 35 'mat5_uncompressed_read_le.at:434' \
  "Read 2D character array" "                        " 3
at_xfail=no
(
  $as_echo "35. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:448: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24" "mat5_uncompressed_read_le.at:448"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:448"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_35
#AT_START_36
at_fn_group_banner 36 'mat5_uncompressed_read_le.at:451' \
  "Read empty structure array" "                     " 3
at_xfail=no
(
  $as_echo "36. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:461: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var25" "mat5_uncompressed_read_le.at:461"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:461"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_36
#AT_START_37
at_fn_group_banner 37 'mat5_uncompressed_read_le.at:464' \
  "Read empty structure array with fields" "         " 3
at_xfail=no
(
  $as_echo "37. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:478: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var26" "mat5_uncompressed_read_le.at:478"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_37
#AT_START_38
at_fn_group_banner 38 'mat5_uncompressed_read_le.at:481' \
  "Read structure array with empty fields" "         " 3
at_xfail=no
(
  $as_echo "38. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:516: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var27" "mat5_uncompressed_read_le.at:516"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:516"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_38
#AT_START_39
at_fn_group_banner 39 'mat5_uncompressed_read_le.at:519' \
  "Read structure array with double-precision fields" "" 3
at_xfail=no
(
  $as_echo "39. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:565: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var28" "mat5_uncompressed_read_le.at:565"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:565"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_39
#AT_START_40
at_fn_group_banner 40 'mat5_uncompressed_read_le.at:568' \
  "Read structure array with single-precision fields" "" 3
at_xfail=no
(
  $as_echo "40. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:614: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var29" "mat5_uncompressed_read_le.at:614"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:614"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_40
#AT_START_41
at_fn_group_banner 41 'mat5_uncompressed_read_le.at:617' \
  "Read structure array with 64-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "41. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:663: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var30" "mat5_uncompressed_read_le.at:663"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:663"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_41
#AT_START_42
at_fn_group_banner 42 'mat5_uncompressed_read_le.at:666' \
  "Read structure array with 64-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "42. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:712: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var31" "mat5_uncompressed_read_le.at:712"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:712"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_42
#AT_START_43
at_fn_group_banner 43 'mat5_uncompressed_read_le.at:715' \
  "Read structure array with 32-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "43. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:761: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var32" "mat5_uncompressed_read_le.at:761"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:761"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_43
#AT_START_44
at_fn_group_banner 44 'mat5_uncompressed_read_le.at:764' \
  "Read structure array with 32-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "44. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:810: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var33" "mat5_uncompressed_read_le.at:810"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:810"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_44
#AT_START_45
at_fn_group_banner 45 'mat5_uncompressed_read_le.at:813' \
  "Read structure array with 16-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "45. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:859: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var34" "mat5_uncompressed_read_le.at:859"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:859"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_45
#AT_START_46
at_fn_group_banner 46 'mat5_uncompressed_read_le.at:862' \
  "Read structure array with 16-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "46. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:908: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var35" "mat5_uncompressed_read_le.at:908"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:908"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_46
#AT_START_47
at_fn_group_banner 47 'mat5_uncompressed_read_le.at:911' \
  "Read structure array with 8-bit integer fields" " " 3
at_xfail=no
(
  $as_echo "47. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:957: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var36" "mat5_uncompressed_read_le.at:957"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:957"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_47
#AT_START_48
at_fn_group_banner 48 'mat5_uncompressed_read_le.at:960' \
  "Read structure array with 8-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "48. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1006: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var37" "mat5_uncompressed_read_le.at:1006"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1006"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_48
#AT_START_49
at_fn_group_banner 49 'mat5_uncompressed_read_le.at:1009' \
  "Read structure array with complex double-precision fields" "" 3
at_xfail=no
(
  $as_echo "49. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1055: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var38" "mat5_uncompressed_read_le.at:1055"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1055"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_49
#AT_START_50
at_fn_group_banner 50 'mat5_uncompressed_read_le.at:1058' \
  "Read structure array with complex single-precision fields" "" 3
at_xfail=no
(
  $as_echo "50. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1104: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var39" "mat5_uncompressed_read_le.at:1104"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1104"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_50
#AT_START_51
at_fn_group_banner 51 'mat5_uncompressed_read_le.at:1107' \
  "Read structure array with complex 64-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "51. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1153: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var40" "mat5_uncompressed_read_le.at:1153"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_51
#AT_START_52
at_fn_group_banner 52 'mat5_uncompressed_read_le.at:1156' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "52. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1202: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var41" "mat5_uncompressed_read_le.at:1202"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1202"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_52
#AT_START_53
at_fn_group_banner 53 'mat5_uncompressed_read_le.at:1205' \
  "Read structure array with complex 32-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "53. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1251: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var42" "mat5_uncompressed_read_le.at:1251"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1251"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_53
#AT_START_54
at_fn_group_banner 54 'mat5_uncompressed_read_le.at:1254' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "54. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1300: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var43" "mat5_uncompressed_read_le.at:1300"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1300"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_54
#AT_START_55
at_fn_group_banner 55 'mat5_uncompressed_read_le.at:1303' \
  "Read structure array with complex 16-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "55. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1349: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var44" "mat5_uncompressed_read_le.at:1349"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1349"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_55
#AT_START_56
at_fn_group_banner 56 'mat5_uncompressed_read_le.at:1352' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "56. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1398: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var45" "mat5_uncompressed_read_le.at:1398"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1398"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_56
#AT_START_57
at_fn_group_banner 57 'mat5_uncompressed_read_le.at:1401' \
  "Read structure array with complex 8-bit integer fields" "" 3
at_xfail=no
(
  $as_echo "57. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1447: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var46" "mat5_uncompressed_read_le.at:1447"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1447"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_57
#AT_START_58
at_fn_group_banner 58 'mat5_uncompressed_read_le.at:1450' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 3
at_xfail=no
(
  $as_echo "58. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1496: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var47" "mat5_uncompressed_read_le.at:1496"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1496"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_58
#AT_START_59
at_fn_group_banner 59 'mat5_uncompressed_read_le.at:1499' \
  "Read structure array with logical fields" "       " 3
at_xfail=no
(
  $as_echo "59. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1555: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var91" "mat5_uncompressed_read_le.at:1555"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1555"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_59
#AT_START_60
at_fn_group_banner 60 'mat5_uncompressed_read_le.at:1558' \
  "Read structure array with double-precision sparse fields" "" 3
at_xfail=no
(
  $as_echo "60. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1610: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var48" "mat5_uncompressed_read_le.at:1610"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1610"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_60
#AT_START_61
at_fn_group_banner 61 'mat5_uncompressed_read_le.at:1613' \
  "Read structure array with complex double-precision sparse fields" "" 3
at_xfail=no
(
  $as_echo "61. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1665: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var49" "mat5_uncompressed_read_le.at:1665"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1665"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_61
#AT_START_62
at_fn_group_banner 62 'mat5_uncompressed_read_le.at:1668' \
  "Read structure array with character fields" "     " 3
at_xfail=no
(
  $as_echo "62. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1710: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var50" "mat5_uncompressed_read_le.at:1710"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1710"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_62
#AT_START_63
at_fn_group_banner 63 'mat5_uncompressed_read_le.at:1713' \
  "Read empty cell array" "                          " 3
at_xfail=no
(
  $as_echo "63. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1723: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var51"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var51" "mat5_uncompressed_read_le.at:1723"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var51
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var51
      Rank: 2
Dimensions: 0 x 0
Class Type: Cell Array
 Data Type: Cell Array
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1723"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_63
#AT_START_64
at_fn_group_banner 64 'mat5_uncompressed_read_le.at:1726' \
  "Read cell array with empty arrays" "              " 3
at_xfail=no
(
  $as_echo "64. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1796: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var52" "mat5_uncompressed_read_le.at:1796"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1796"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_64
#AT_START_65
at_fn_group_banner 65 'mat5_uncompressed_read_le.at:1799' \
  "Read cell array with double-precision arrays" "   " 3
at_xfail=no
(
  $as_echo "65. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1860: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var53" "mat5_uncompressed_read_le.at:1860"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1860"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_65
#AT_START_66
at_fn_group_banner 66 'mat5_uncompressed_read_le.at:1863' \
  "Read cell array with single-precision arrays" "   " 3
at_xfail=no
(
  $as_echo "66. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1924: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var54" "mat5_uncompressed_read_le.at:1924"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1924"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_66
#AT_START_67
at_fn_group_banner 67 'mat5_uncompressed_read_le.at:1927' \
  "Read cell array with 64-bit integer arrays" "     " 3
at_xfail=no
(
  $as_echo "67. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:1988: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var55" "mat5_uncompressed_read_le.at:1988"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:1988"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_67
#AT_START_68
at_fn_group_banner 68 'mat5_uncompressed_read_le.at:1991' \
  "Read cell array with 64-bit unsigned integer arrays" "" 3
at_xfail=no
(
  $as_echo "68. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2052: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var56" "mat5_uncompressed_read_le.at:2052"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2052"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_68
#AT_START_69
at_fn_group_banner 69 'mat5_uncompressed_read_le.at:2055' \
  "Read cell array with 32-bit integer arrays" "     " 3
at_xfail=no
(
  $as_echo "69. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2116: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var57" "mat5_uncompressed_read_le.at:2116"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2116"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_69
#AT_START_70
at_fn_group_banner 70 'mat5_uncompressed_read_le.at:2119' \
  "Read cell array with 32-bit unsigned integer arrays" "" 3
at_xfail=no
(
  $as_echo "70. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2180: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var58" "mat5_uncompressed_read_le.at:2180"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2180"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_70
#AT_START_71
at_fn_group_banner 71 'mat5_uncompressed_read_le.at:2183' \
  "Read cell array with 16-bit integer arrays" "     " 3
at_xfail=no
(
  $as_echo "71. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2244: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var59" "mat5_uncompressed_read_le.at:2244"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2244"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_71
#AT_START_72
at_fn_group_banner 72 'mat5_uncompressed_read_le.at:2247' \
  "Read cell array with 16-bit unsigned integer arrays" "" 3
at_xfail=no
(
  $as_echo "72. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2308: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var60" "mat5_uncompressed_read_le.at:2308"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2308"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_72
#AT_START_73
at_fn_group_banner 73 'mat5_uncompressed_read_le.at:2311' \
  "Read cell array with 8-bit integer arrays" "      " 3
at_xfail=no
(
  $as_echo "73. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2372: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var61" "mat5_uncompressed_read_le.at:2372"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2372"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_73
#AT_START_74
at_fn_group_banner 74 'mat5_uncompressed_read_le.at:2375' \
  "Read cell array with 8-bit unsigned integer arrays" "" 3
at_xfail=no
(
  $as_echo "74. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2436: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var62" "mat5_uncompressed_read_le.at:2436"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2436"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_74
#AT_START_75
at_fn_group_banner 75 'mat5_uncompressed_read_le.at:2439' \
  "Read cell array with logical arrays" "            " 3
at_xfail=no
(
  $as_echo "75. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2491: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var92" "mat5_uncompressed_read_le.at:2491"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2491"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_75
#AT_START_76
at_fn_group_banner 76 'mat5_uncompressed_read_le.at:2494' \
  "Read cell array with double-precision sparse arrays" "" 3
at_xfail=no
(
  $as_echo "76. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2544: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var63" "mat5_uncompressed_read_le.at:2544"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2544"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_76
#AT_START_77
at_fn_group_banner 77 'mat5_uncompressed_read_le.at:2547' \
  "Read cell array with complex double-precision sparse arrays" "" 3
at_xfail=no
(
  $as_echo "77. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2597: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var64" "mat5_uncompressed_read_le.at:2597"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2597"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_77
#AT_START_78
at_fn_group_banner 78 'mat5_uncompressed_read_le.at:2600' \
  "Read cell array with character arrays" "          " 3
at_xfail=no
(
  $as_echo "78. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2638: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var65" "mat5_uncompressed_read_le.at:2638"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2638"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_78
#AT_START_79
at_fn_group_banner 79 'mat5_uncompressed_read_le.at:2641' \
  "Read cell array with empty structure arrays" "    " 3
at_xfail=no
(
  $as_echo "79. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:2698: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var66" "mat5_uncompressed_read_le.at:2698"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:2698"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_79
#AT_START_80
at_fn_group_banner 80 'mat5_uncompressed_read_le.at:2701' \
  "Read cell array with structure arrays (numeric fields)" "" 3
at_xfail=no
(
  $as_echo "80. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:3551: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var67" "mat5_uncompressed_read_le.at:3551"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:3551"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_80
#AT_START_81
at_fn_group_banner 81 'mat5_uncompressed_read_le.at:3554' \
  "Read cell array with structure arrays (sparse fields)" "" 3
at_xfail=no
(
  $as_echo "81. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:3660: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var68" "mat5_uncompressed_read_le.at:3660"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:3660"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_81
#AT_START_82
at_fn_group_banner 82 'mat5_uncompressed_read_le.at:3663' \
  "Read cell array structure arrays (character fields)" "" 3
at_xfail=no
(
  $as_echo "82. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_le.at:3717: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var69" "mat5_uncompressed_read_le.at:3717"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_le.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_le.at:3717"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_82
#AT_START_83
at_fn_group_banner 83 'mat5_uncompressed_readslab_le.at:1' \
  "Read slab of double-precision array" "            " 3
at_xfail=no
(
  $as_echo "83. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:30: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:30"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:30"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_83
#AT_START_84
at_fn_group_banner 84 'mat5_uncompressed_readslab_le.at:33' \
  "Read slab of single-precision array" "            " 3
at_xfail=no
(
  $as_echo "84. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:62: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:62"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_84
#AT_START_85
at_fn_group_banner 85 'mat5_uncompressed_readslab_le.at:65' \
  "Read slab of 64-bit integer array" "              " 3
at_xfail=no
(
  $as_echo "85. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:94: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:94"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:94"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_85
#AT_START_86
at_fn_group_banner 86 'mat5_uncompressed_readslab_le.at:97' \
  "Read slab of 64-bit unsigned integer array" "     " 3
at_xfail=no
(
  $as_echo "86. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:126: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:126"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_86
#AT_START_87
at_fn_group_banner 87 'mat5_uncompressed_readslab_le.at:129' \
  "Read slab of 32-bit integer array" "              " 3
at_xfail=no
(
  $as_echo "87. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:158: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:158"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:158"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_87
#AT_START_88
at_fn_group_banner 88 'mat5_uncompressed_readslab_le.at:161' \
  "Read slab of 32-bit unsigned integer array" "     " 3
at_xfail=no
(
  $as_echo "88. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:190: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:190"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:190"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_88
#AT_START_89
at_fn_group_banner 89 'mat5_uncompressed_readslab_le.at:193' \
  "Read slab of 16-bit integer array" "              " 3
at_xfail=no
(
  $as_echo "89. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:222: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:222"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_89
#AT_START_90
at_fn_group_banner 90 'mat5_uncompressed_readslab_le.at:225' \
  "Read slab of 16-bit unsigned integer array" "     " 3
at_xfail=no
(
  $as_echo "90. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:254: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:254"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:254"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_90
#AT_START_91
at_fn_group_banner 91 'mat5_uncompressed_readslab_le.at:257' \
  "Read slab of 8-bit integer array" "               " 3
at_xfail=no
(
  $as_echo "91. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:286: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:286"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:286"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_91
#AT_START_92
at_fn_group_banner 92 'mat5_uncompressed_readslab_le.at:289' \
  "Read slab of 8-bit unsigned integer array" "      " 3
at_xfail=no
(
  $as_echo "92. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:318: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:318"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:318"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_92
#AT_START_93
at_fn_group_banner 93 'mat5_uncompressed_readslab_le.at:321' \
  "Read slab of double-precision complex array" "    " 3
at_xfail=no
(
  $as_echo "93. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:350: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:350"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:350"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_93
#AT_START_94
at_fn_group_banner 94 'mat5_uncompressed_readslab_le.at:353' \
  "Read slab of single-precision complex array" "    " 3
at_xfail=no
(
  $as_echo "94. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:382: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:382"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:382"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_94
#AT_START_95
at_fn_group_banner 95 'mat5_uncompressed_readslab_le.at:385' \
  "Read slab of 64-bit integer complex array" "      " 3
at_xfail=no
(
  $as_echo "95. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:414: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:414"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:414"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_95
#AT_START_96
at_fn_group_banner 96 'mat5_uncompressed_readslab_le.at:417' \
  "Read slab of 64-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "96. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:446: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:446"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_96
#AT_START_97
at_fn_group_banner 97 'mat5_uncompressed_readslab_le.at:449' \
  "Read slab of 32-bit integer complex array" "      " 3
at_xfail=no
(
  $as_echo "97. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:478: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:478"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_97
#AT_START_98
at_fn_group_banner 98 'mat5_uncompressed_readslab_le.at:481' \
  "Read slab of 32-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "98. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:510: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:510"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:510"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_98
#AT_START_99
at_fn_group_banner 99 'mat5_uncompressed_readslab_le.at:513' \
  "Read slab of 16-bit integer complex array" "      " 3
at_xfail=no
(
  $as_echo "99. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:542: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:542"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_99
#AT_START_100
at_fn_group_banner 100 'mat5_uncompressed_readslab_le.at:545' \
  "Read slab of 16-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "100. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:574: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:574"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:574"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_100
#AT_START_101
at_fn_group_banner 101 'mat5_uncompressed_readslab_le.at:577' \
  "Read slab of 8-bit integer complex array" "       " 3
at_xfail=no
(
  $as_echo "101. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:606: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:606"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:606"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_101
#AT_START_102
at_fn_group_banner 102 'mat5_uncompressed_readslab_le.at:609' \
  "Read slab of 8-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "102. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:638: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_le.at:638"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:638"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_102
#AT_START_103
at_fn_group_banner 103 'mat5_uncompressed_readslab_le.at:641' \
  "Read linear slab of double-precision array" "     " 3
at_xfail=no
(
  $as_echo "103. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:671: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:671"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:671"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_103
#AT_START_104
at_fn_group_banner 104 'mat5_uncompressed_readslab_le.at:674' \
  "Read linear slab of single-precision array" "     " 3
at_xfail=no
(
  $as_echo "104. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:704: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:704"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:704"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_104
#AT_START_105
at_fn_group_banner 105 'mat5_uncompressed_readslab_le.at:707' \
  "Read linear slab of 64-bit integer array" "       " 3
at_xfail=no
(
  $as_echo "105. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:737: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:737"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:737"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_105
#AT_START_106
at_fn_group_banner 106 'mat5_uncompressed_readslab_le.at:740' \
  "Read linear slab of 64-bit unsigned integer array" "" 3
at_xfail=no
(
  $as_echo "106. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:770: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:770"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:770"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_106
#AT_START_107
at_fn_group_banner 107 'mat5_uncompressed_readslab_le.at:773' \
  "Read linear slab of 32-bit integer array" "       " 3
at_xfail=no
(
  $as_echo "107. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:803: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:803"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:803"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_107
#AT_START_108
at_fn_group_banner 108 'mat5_uncompressed_readslab_le.at:806' \
  "Read linear slab of 32-bit unsigned integer array" "" 3
at_xfail=no
(
  $as_echo "108. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:836: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:836"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:836"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_108
#AT_START_109
at_fn_group_banner 109 'mat5_uncompressed_readslab_le.at:839' \
  "Read linear slab of 16-bit integer array" "       " 3
at_xfail=no
(
  $as_echo "109. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:869: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:869"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:869"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_109
#AT_START_110
at_fn_group_banner 110 'mat5_uncompressed_readslab_le.at:872' \
  "Read linear slab of 16-bit unsigned integer array" "" 3
at_xfail=no
(
  $as_echo "110. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:902: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:902"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:902"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_110
#AT_START_111
at_fn_group_banner 111 'mat5_uncompressed_readslab_le.at:905' \
  "Read linear slab of 8-bit integer array" "        " 3
at_xfail=no
(
  $as_echo "111. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:935: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:935"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:935"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_111
#AT_START_112
at_fn_group_banner 112 'mat5_uncompressed_readslab_le.at:938' \
  "Read linear slab of 8-bit unsigned integer array" "" 3
at_xfail=no
(
  $as_echo "112. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:968: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:968"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:968"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_112
#AT_START_113
at_fn_group_banner 113 'mat5_uncompressed_readslab_le.at:971' \
  "Read linear slab of double-precision complex array" "" 3
at_xfail=no
(
  $as_echo "113. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1001: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1001"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1001"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_113
#AT_START_114
at_fn_group_banner 114 'mat5_uncompressed_readslab_le.at:1004' \
  "Read linear slab of single-precision complex array" "" 3
at_xfail=no
(
  $as_echo "114. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1034: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1034"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1034"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_114
#AT_START_115
at_fn_group_banner 115 'mat5_uncompressed_readslab_le.at:1037' \
  "Read linear slab of 64-bit integer complex array" "" 3
at_xfail=no
(
  $as_echo "115. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1067: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1067"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1067"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_115
#AT_START_116
at_fn_group_banner 116 'mat5_uncompressed_readslab_le.at:1070' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "116. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1100: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1100"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_116
#AT_START_117
at_fn_group_banner 117 'mat5_uncompressed_readslab_le.at:1103' \
  "Read linear slab of 32-bit integer complex array" "" 3
at_xfail=no
(
  $as_echo "117. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1133: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1133"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1133"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_117
#AT_START_118
at_fn_group_banner 118 'mat5_uncompressed_readslab_le.at:1136' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "118. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1166: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1166"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1166"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_118
#AT_START_119
at_fn_group_banner 119 'mat5_uncompressed_readslab_le.at:1169' \
  "Read linear slab of 16-bit integer complex array" "" 3
at_xfail=no
(
  $as_echo "119. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1199: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1199"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_119
#AT_START_120
at_fn_group_banner 120 'mat5_uncompressed_readslab_le.at:1202' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "120. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1232: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1232"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1232"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_120
#AT_START_121
at_fn_group_banner 121 'mat5_uncompressed_readslab_le.at:1235' \
  "Read linear slab of 8-bit integer complex array" "" 3
at_xfail=no
(
  $as_echo "121. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1265: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1265"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1265"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_121
#AT_START_122
at_fn_group_banner 122 'mat5_uncompressed_readslab_le.at:1268' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 3
at_xfail=no
(
  $as_echo "122. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_le.at:1298: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\\(3257:1111:end\\)" "mat5_uncompressed_readslab_le.at:1298"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_le.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_le.at:1298"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_122
#AT_START_123
at_fn_group_banner 123 'mat5_compressed_read_le.at:27' \
  "Read 2D double-precision array" "                 " 4
at_xfail=no
(
  $as_echo "123. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:28" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:28"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:42: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var1" "mat5_compressed_read_le.at:42"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_123
#AT_START_124
at_fn_group_banner 124 'mat5_compressed_read_le.at:45' \
  "Read 2D single-precision array" "                 " 4
at_xfail=no
(
  $as_echo "124. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:46" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:46"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:60: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var2" "mat5_compressed_read_le.at:60"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:60"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_124
#AT_START_125
at_fn_group_banner 125 'mat5_compressed_read_le.at:63' \
  "Read 2D 64-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "125. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:64" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:64"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:78: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var3" "mat5_compressed_read_le.at:78"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:78"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_125
#AT_START_126
at_fn_group_banner 126 'mat5_compressed_read_le.at:81' \
  "Read 2D 64-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "126. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:82" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:82"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:96: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var4" "mat5_compressed_read_le.at:96"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_126
#AT_START_127
at_fn_group_banner 127 'mat5_compressed_read_le.at:99' \
  "Read 2D 32-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "127. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:100" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:100"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:114: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var5" "mat5_compressed_read_le.at:114"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:114"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_127
#AT_START_128
at_fn_group_banner 128 'mat5_compressed_read_le.at:117' \
  "Read 2D 32-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "128. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:118" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:118"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:132: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var6" "mat5_compressed_read_le.at:132"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_128
#AT_START_129
at_fn_group_banner 129 'mat5_compressed_read_le.at:135' \
  "Read 2D 16-bit integer array" "                   " 4
at_xfail=no
(
  $as_echo "129. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:136" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:136"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:150: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var7" "mat5_compressed_read_le.at:150"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_129
#AT_START_130
at_fn_group_banner 130 'mat5_compressed_read_le.at:153' \
  "Read 2D 16-bit unsigned integer array" "          " 4
at_xfail=no
(
  $as_echo "130. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:154" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:154"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:168: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var8" "mat5_compressed_read_le.at:168"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_130
#AT_START_131
at_fn_group_banner 131 'mat5_compressed_read_le.at:171' \
  "Read 2D 8-bit integer array" "                    " 4
at_xfail=no
(
  $as_echo "131. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:172" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:172"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:186: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var9" "mat5_compressed_read_le.at:186"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_131
#AT_START_132
at_fn_group_banner 132 'mat5_compressed_read_le.at:189' \
  "Read 2D 8-bit unsigned integer array" "           " 4
at_xfail=no
(
  $as_echo "132. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:190" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:190"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:204: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var10" "mat5_compressed_read_le.at:204"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_132
#AT_START_133
at_fn_group_banner 133 'mat5_compressed_read_le.at:207' \
  "Read 2D double-precision complex array" "         " 4
at_xfail=no
(
  $as_echo "133. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:208" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:208"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var11" "mat5_compressed_read_le.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_133
#AT_START_134
at_fn_group_banner 134 'mat5_compressed_read_le.at:225' \
  "Read 2D single-precision complex array" "         " 4
at_xfail=no
(
  $as_echo "134. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:226" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:226"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:240: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var12" "mat5_compressed_read_le.at:240"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_134
#AT_START_135
at_fn_group_banner 135 'mat5_compressed_read_le.at:243' \
  "Read 2D 64-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "135. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:244" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:244"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:258: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var13" "mat5_compressed_read_le.at:258"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_135
#AT_START_136
at_fn_group_banner 136 'mat5_compressed_read_le.at:261' \
  "Read 2D 64-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "136. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:262" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:262"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:276: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var14" "mat5_compressed_read_le.at:276"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:276"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_136
#AT_START_137
at_fn_group_banner 137 'mat5_compressed_read_le.at:279' \
  "Read 2D 32-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "137. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:280" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:280"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:294: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var15" "mat5_compressed_read_le.at:294"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_137
#AT_START_138
at_fn_group_banner 138 'mat5_compressed_read_le.at:297' \
  "Read 2D 32-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "138. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:298" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:298"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:312: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var16" "mat5_compressed_read_le.at:312"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_138
#AT_START_139
at_fn_group_banner 139 'mat5_compressed_read_le.at:315' \
  "Read 2D 16-bit integer complex array" "           " 4
at_xfail=no
(
  $as_echo "139. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:316" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:316"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var17" "mat5_compressed_read_le.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_139
#AT_START_140
at_fn_group_banner 140 'mat5_compressed_read_le.at:333' \
  "Read 2D 16-bit unsigned integer complex array" "  " 4
at_xfail=no
(
  $as_echo "140. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:334" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:334"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:348: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var18" "mat5_compressed_read_le.at:348"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:348"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_140
#AT_START_141
at_fn_group_banner 141 'mat5_compressed_read_le.at:351' \
  "Read 2D 8-bit integer complex array" "            " 4
at_xfail=no
(
  $as_echo "141. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:352" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:352"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:366: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var19" "mat5_compressed_read_le.at:366"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_141
#AT_START_142
at_fn_group_banner 142 'mat5_compressed_read_le.at:369' \
  "Read 2D 8-bit unsigned integer complex array" "   " 4
at_xfail=no
(
  $as_echo "142. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:370" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:370"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:384: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var20" "mat5_compressed_read_le.at:384"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:384"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_142
#AT_START_143
at_fn_group_banner 143 'mat5_compressed_read_le.at:387' \
  "Read 2D logical array" "                          " 4
at_xfail=no
(
  $as_echo "143. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:388" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:388"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:403: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var90" "mat5_compressed_read_le.at:403"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:403"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_143
#AT_START_144
at_fn_group_banner 144 'mat5_compressed_read_le.at:406' \
  "Read double-precision sparse array" "             " 4
at_xfail=no
(
  $as_echo "144. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:407" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:407"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:422: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var21" "mat5_compressed_read_le.at:422"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_144
#AT_START_145
at_fn_group_banner 145 'mat5_compressed_read_le.at:425' \
  "Read double-precision sparse complex array" "     " 4
at_xfail=no
(
  $as_echo "145. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:426" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:426"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var22" "mat5_compressed_read_le.at:441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_145
#AT_START_146
at_fn_group_banner 146 'mat5_compressed_read_le.at:444' \
  "Read empty array" "                               " 4
at_xfail=no
(
  $as_echo "146. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:445" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:445"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:455: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var23" "mat5_compressed_read_le.at:455"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:455"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_146
#AT_START_147
at_fn_group_banner 147 'mat5_compressed_read_le.at:458' \
  "Read 2D character array" "                        " 4
at_xfail=no
(
  $as_echo "147. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:459" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:459"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:473: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var24" "mat5_compressed_read_le.at:473"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_147
#AT_START_148
at_fn_group_banner 148 'mat5_compressed_read_le.at:476' \
  "Read empty structure array" "                     " 4
at_xfail=no
(
  $as_echo "148. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:477" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:477"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:487: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var25" "mat5_compressed_read_le.at:487"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:487"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_148
#AT_START_149
at_fn_group_banner 149 'mat5_compressed_read_le.at:490' \
  "Read empty structure array with fields" "         " 4
at_xfail=no
(
  $as_echo "149. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:491" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:491"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:505: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var26" "mat5_compressed_read_le.at:505"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:505"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_149
#AT_START_150
at_fn_group_banner 150 'mat5_compressed_read_le.at:508' \
  "Read structure array with empty fields" "         " 4
at_xfail=no
(
  $as_echo "150. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:509" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:509"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:544: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var27" "mat5_compressed_read_le.at:544"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:544"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_150
#AT_START_151
at_fn_group_banner 151 'mat5_compressed_read_le.at:547' \
  "Read structure array with double-precision fields" "" 4
at_xfail=no
(
  $as_echo "151. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:548" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:548"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:594: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var28" "mat5_compressed_read_le.at:594"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:594"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_151
#AT_START_152
at_fn_group_banner 152 'mat5_compressed_read_le.at:597' \
  "Read structure array with single-precision fields" "" 4
at_xfail=no
(
  $as_echo "152. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:598" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:598"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:644: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var29" "mat5_compressed_read_le.at:644"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:644"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_152
#AT_START_153
at_fn_group_banner 153 'mat5_compressed_read_le.at:647' \
  "Read structure array with 64-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "153. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:648" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:648"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:694: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var30" "mat5_compressed_read_le.at:694"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:694"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_153
#AT_START_154
at_fn_group_banner 154 'mat5_compressed_read_le.at:697' \
  "Read structure array with 64-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "154. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:698" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:698"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:744: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var31" "mat5_compressed_read_le.at:744"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:744"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_154
#AT_START_155
at_fn_group_banner 155 'mat5_compressed_read_le.at:747' \
  "Read structure array with 32-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "155. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:748" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:748"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:794: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var32" "mat5_compressed_read_le.at:794"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:794"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_155
#AT_START_156
at_fn_group_banner 156 'mat5_compressed_read_le.at:797' \
  "Read structure array with 32-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "156. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:798" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:798"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:844: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var33" "mat5_compressed_read_le.at:844"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:844"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_156
#AT_START_157
at_fn_group_banner 157 'mat5_compressed_read_le.at:847' \
  "Read structure array with 16-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "157. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:848" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:848"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:894: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var34" "mat5_compressed_read_le.at:894"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:894"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_157
#AT_START_158
at_fn_group_banner 158 'mat5_compressed_read_le.at:897' \
  "Read structure array with 16-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "158. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:898" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:898"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:944: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var35" "mat5_compressed_read_le.at:944"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:944"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_158
#AT_START_159
at_fn_group_banner 159 'mat5_compressed_read_le.at:947' \
  "Read structure array with 8-bit integer fields" " " 4
at_xfail=no
(
  $as_echo "159. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:948" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:948"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:994: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var36" "mat5_compressed_read_le.at:994"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:994"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_159
#AT_START_160
at_fn_group_banner 160 'mat5_compressed_read_le.at:997' \
  "Read structure array with 8-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "160. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:998" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:998"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1044: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var37" "mat5_compressed_read_le.at:1044"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1044"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_160
#AT_START_161
at_fn_group_banner 161 'mat5_compressed_read_le.at:1047' \
  "Read structure array with complex double-precision fields" "" 4
at_xfail=no
(
  $as_echo "161. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1048" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1048"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1094: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var38" "mat5_compressed_read_le.at:1094"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1094"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_161
#AT_START_162
at_fn_group_banner 162 'mat5_compressed_read_le.at:1097' \
  "Read structure array with complex single-precision fields" "" 4
at_xfail=no
(
  $as_echo "162. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1098" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1098"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1144: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var39" "mat5_compressed_read_le.at:1144"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1144"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_162
#AT_START_163
at_fn_group_banner 163 'mat5_compressed_read_le.at:1147' \
  "Read structure array with complex 64-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "163. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1148" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1148"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1194: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var40" "mat5_compressed_read_le.at:1194"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1194"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_163
#AT_START_164
at_fn_group_banner 164 'mat5_compressed_read_le.at:1197' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "164. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1198" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1198"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1244: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var41" "mat5_compressed_read_le.at:1244"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1244"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_164
#AT_START_165
at_fn_group_banner 165 'mat5_compressed_read_le.at:1247' \
  "Read structure array with complex 32-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "165. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1248" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1248"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1294: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var42" "mat5_compressed_read_le.at:1294"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_165
#AT_START_166
at_fn_group_banner 166 'mat5_compressed_read_le.at:1297' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "166. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1298" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1298"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1344: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var43" "mat5_compressed_read_le.at:1344"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1344"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_166
#AT_START_167
at_fn_group_banner 167 'mat5_compressed_read_le.at:1347' \
  "Read structure array with complex 16-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "167. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1348" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1348"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1394: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var44" "mat5_compressed_read_le.at:1394"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_167
#AT_START_168
at_fn_group_banner 168 'mat5_compressed_read_le.at:1397' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "168. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1398" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1398"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1444: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var45" "mat5_compressed_read_le.at:1444"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1444"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_168
#AT_START_169
at_fn_group_banner 169 'mat5_compressed_read_le.at:1447' \
  "Read structure array with complex 8-bit integer fields" "" 4
at_xfail=no
(
  $as_echo "169. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1448" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1448"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1494: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var46" "mat5_compressed_read_le.at:1494"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1494"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_169
#AT_START_170
at_fn_group_banner 170 'mat5_compressed_read_le.at:1497' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 4
at_xfail=no
(
  $as_echo "170. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1498" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1498"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1544: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var47" "mat5_compressed_read_le.at:1544"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1544"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_170
#AT_START_171
at_fn_group_banner 171 'mat5_compressed_read_le.at:1547' \
  "Read structure array with logical fields" "       " 4
at_xfail=no
(
  $as_echo "171. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1548" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1548"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1604: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var91" "mat5_compressed_read_le.at:1604"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1604"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_171
#AT_START_172
at_fn_group_banner 172 'mat5_compressed_read_le.at:1607' \
  "Read structure array with double-precision sparse fields" "" 4
at_xfail=no
(
  $as_echo "172. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1608" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1608"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1660: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var48" "mat5_compressed_read_le.at:1660"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1660"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_172
#AT_START_173
at_fn_group_banner 173 'mat5_compressed_read_le.at:1663' \
  "Read structure array with complex double-precision sparse fields" "" 4
at_xfail=no
(
  $as_echo "173. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1664" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1664"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1716: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var49" "mat5_compressed_read_le.at:1716"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1716"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_173
#AT_START_174
at_fn_group_banner 174 'mat5_compressed_read_le.at:1719' \
  "Read structure array with character fields" "     " 4
at_xfail=no
(
  $as_echo "174. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1720" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1720"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1762: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var50" "mat5_compressed_read_le.at:1762"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1762"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_174
#AT_START_175
at_fn_group_banner 175 'mat5_compressed_read_le.at:1765' \
  "Read empty cell array" "                          " 4
at_xfail=no
(
  $as_echo "175. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1766" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1766"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1776: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var51"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var51" "mat5_compressed_read_le.at:1776"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var51
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var51
      Rank: 2
Dimensions: 0 x 0
Class Type: Cell Array
 Data Type: Cell Array
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1776"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_175
#AT_START_176
at_fn_group_banner 176 'mat5_compressed_read_le.at:1779' \
  "Read cell array with empty arrays" "              " 4
at_xfail=no
(
  $as_echo "176. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1780" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1780"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1850: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var52" "mat5_compressed_read_le.at:1850"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1850"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_176
#AT_START_177
at_fn_group_banner 177 'mat5_compressed_read_le.at:1853' \
  "Read cell array with double-precision arrays" "   " 4
at_xfail=no
(
  $as_echo "177. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1854" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1854"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1915: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var53" "mat5_compressed_read_le.at:1915"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1915"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_177
#AT_START_178
at_fn_group_banner 178 'mat5_compressed_read_le.at:1918' \
  "Read cell array with single-precision arrays" "   " 4
at_xfail=no
(
  $as_echo "178. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1919" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1919"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:1980: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var54" "mat5_compressed_read_le.at:1980"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:1980"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_178
#AT_START_179
at_fn_group_banner 179 'mat5_compressed_read_le.at:1983' \
  "Read cell array with 64-bit integer arrays" "     " 4
at_xfail=no
(
  $as_echo "179. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:1984" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:1984"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2045: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var55" "mat5_compressed_read_le.at:2045"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2045"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_179
#AT_START_180
at_fn_group_banner 180 'mat5_compressed_read_le.at:2048' \
  "Read cell array with 64-bit unsigned integer arrays" "" 4
at_xfail=no
(
  $as_echo "180. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2049" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2049"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2110: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var56" "mat5_compressed_read_le.at:2110"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2110"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_180
#AT_START_181
at_fn_group_banner 181 'mat5_compressed_read_le.at:2113' \
  "Read cell array with 32-bit integer arrays" "     " 4
at_xfail=no
(
  $as_echo "181. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2114" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2114"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2175: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var57" "mat5_compressed_read_le.at:2175"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2175"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_181
#AT_START_182
at_fn_group_banner 182 'mat5_compressed_read_le.at:2178' \
  "Read cell array with 32-bit unsigned integer arrays" "" 4
at_xfail=no
(
  $as_echo "182. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2179" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2179"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2240: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var58" "mat5_compressed_read_le.at:2240"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_182
#AT_START_183
at_fn_group_banner 183 'mat5_compressed_read_le.at:2243' \
  "Read cell array with 16-bit integer arrays" "     " 4
at_xfail=no
(
  $as_echo "183. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2244" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2244"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2305: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var59" "mat5_compressed_read_le.at:2305"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2305"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_183
#AT_START_184
at_fn_group_banner 184 'mat5_compressed_read_le.at:2308' \
  "Read cell array with 16-bit unsigned integer arrays" "" 4
at_xfail=no
(
  $as_echo "184. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2309" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2309"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2370: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var60" "mat5_compressed_read_le.at:2370"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2370"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_184
#AT_START_185
at_fn_group_banner 185 'mat5_compressed_read_le.at:2373' \
  "Read cell array with 8-bit integer arrays" "      " 4
at_xfail=no
(
  $as_echo "185. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2374" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2374"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2435: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var61" "mat5_compressed_read_le.at:2435"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2435"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_185
#AT_START_186
at_fn_group_banner 186 'mat5_compressed_read_le.at:2438' \
  "Read cell array with 8-bit unsigned integer arrays" "" 4
at_xfail=no
(
  $as_echo "186. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2439" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2439"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2500: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var62" "mat5_compressed_read_le.at:2500"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2500"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_186
#AT_START_187
at_fn_group_banner 187 'mat5_compressed_read_le.at:2503' \
  "Read cell array with logical arrays" "            " 4
at_xfail=no
(
  $as_echo "187. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2504" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2504"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2556: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var92" "mat5_compressed_read_le.at:2556"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2556"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_187
#AT_START_188
at_fn_group_banner 188 'mat5_compressed_read_le.at:2559' \
  "Read cell array with double-precision sparse arrays" "" 4
at_xfail=no
(
  $as_echo "188. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2560" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2560"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2610: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var63" "mat5_compressed_read_le.at:2610"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2610"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_188
#AT_START_189
at_fn_group_banner 189 'mat5_compressed_read_le.at:2613' \
  "Read cell array with complex double-precision sparse arrays" "" 4
at_xfail=no
(
  $as_echo "189. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2614" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2614"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2664: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var64" "mat5_compressed_read_le.at:2664"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2664"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_189
#AT_START_190
at_fn_group_banner 190 'mat5_compressed_read_le.at:2667' \
  "Read cell array with character arrays" "          " 4
at_xfail=no
(
  $as_echo "190. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2668" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2668"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2706: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var65" "mat5_compressed_read_le.at:2706"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2706"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_190
#AT_START_191
at_fn_group_banner 191 'mat5_compressed_read_le.at:2709' \
  "Read cell array with empty structure arrays" "    " 4
at_xfail=no
(
  $as_echo "191. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2710" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2710"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:2767: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var66" "mat5_compressed_read_le.at:2767"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:2767"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_191
#AT_START_192
at_fn_group_banner 192 'mat5_compressed_read_le.at:2770' \
  "Read cell array with structure arrays (numeric fields)" "" 4
at_xfail=no
(
  $as_echo "192. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:2771" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:2771"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:3621: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var67" "mat5_compressed_read_le.at:3621"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:3621"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_192
#AT_START_193
at_fn_group_banner 193 'mat5_compressed_read_le.at:3624' \
  "Read cell array with structure arrays (sparse fields)" "" 4
at_xfail=no
(
  $as_echo "193. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:3625" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:3625"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:3731: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var68" "mat5_compressed_read_le.at:3731"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:3731"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_193
#AT_START_194
at_fn_group_banner 194 'mat5_compressed_read_le.at:3734' \
  "Read cell array structure arrays (character fields)" "" 4
at_xfail=no
(
  $as_echo "194. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_le.at:3735" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_le.at:3735"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_le.at:3789: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_le.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var69" "mat5_compressed_read_le.at:3789"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_le.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_le.at:3789"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_194
#AT_START_195
at_fn_group_banner 195 'mat5_compressed_readslab_le.at:1' \
  "Read slab of double-precision array" "            " 4
at_xfail=no
(
  $as_echo "195. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:3" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:3"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:31: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:31"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:31"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_195
#AT_START_196
at_fn_group_banner 196 'mat5_compressed_readslab_le.at:34' \
  "Read slab of single-precision array" "            " 4
at_xfail=no
(
  $as_echo "196. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:36" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:36"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:64: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:64"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_196
#AT_START_197
at_fn_group_banner 197 'mat5_compressed_readslab_le.at:67' \
  "Read slab of 64-bit integer array" "              " 4
at_xfail=no
(
  $as_echo "197. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:69" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:69"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:97: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:97"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:97"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_197
#AT_START_198
at_fn_group_banner 198 'mat5_compressed_readslab_le.at:100' \
  "Read slab of 64-bit unsigned integer array" "     " 4
at_xfail=no
(
  $as_echo "198. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:102" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:102"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:130: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:130"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:130"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_198
#AT_START_199
at_fn_group_banner 199 'mat5_compressed_readslab_le.at:133' \
  "Read slab of 32-bit integer array" "              " 4
at_xfail=no
(
  $as_echo "199. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:135" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:135"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:163: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:163"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_199
#AT_START_200
at_fn_group_banner 200 'mat5_compressed_readslab_le.at:166' \
  "Read slab of 32-bit unsigned integer array" "     " 4
at_xfail=no
(
  $as_echo "200. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:168" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:168"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:196: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:196"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:196"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_200
#AT_START_201
at_fn_group_banner 201 'mat5_compressed_readslab_le.at:199' \
  "Read slab of 16-bit integer array" "              " 4
at_xfail=no
(
  $as_echo "201. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:201" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:201"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:229: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:229"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:229"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_201
#AT_START_202
at_fn_group_banner 202 'mat5_compressed_readslab_le.at:232' \
  "Read slab of 16-bit unsigned integer array" "     " 4
at_xfail=no
(
  $as_echo "202. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:234" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:234"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:262: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:262"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_202
#AT_START_203
at_fn_group_banner 203 'mat5_compressed_readslab_le.at:265' \
  "Read slab of 8-bit integer array" "               " 4
at_xfail=no
(
  $as_echo "203. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:267" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:267"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:295: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:295"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:295"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_203
#AT_START_204
at_fn_group_banner 204 'mat5_compressed_readslab_le.at:298' \
  "Read slab of 8-bit unsigned integer array" "      " 4
at_xfail=no
(
  $as_echo "204. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:300" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:300"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:328: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:328"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:328"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_204
#AT_START_205
at_fn_group_banner 205 'mat5_compressed_readslab_le.at:331' \
  "Read slab of double-precision complex array" "    " 4
at_xfail=no
(
  $as_echo "205. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:333" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:333"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:361: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:361"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_205
#AT_START_206
at_fn_group_banner 206 'mat5_compressed_readslab_le.at:364' \
  "Read slab of single-precision complex array" "    " 4
at_xfail=no
(
  $as_echo "206. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:366" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:366"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:394: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:394"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_206
#AT_START_207
at_fn_group_banner 207 'mat5_compressed_readslab_le.at:397' \
  "Read slab of 64-bit integer complex array" "      " 4
at_xfail=no
(
  $as_echo "207. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:399" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:399"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:427: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:427"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_207
#AT_START_208
at_fn_group_banner 208 'mat5_compressed_readslab_le.at:430' \
  "Read slab of 64-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "208. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:432" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:432"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:460: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:460"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_208
#AT_START_209
at_fn_group_banner 209 'mat5_compressed_readslab_le.at:463' \
  "Read slab of 32-bit integer complex array" "      " 4
at_xfail=no
(
  $as_echo "209. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:465" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:465"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:493: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:493"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:493"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_209
#AT_START_210
at_fn_group_banner 210 'mat5_compressed_readslab_le.at:496' \
  "Read slab of 32-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "210. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:498" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:498"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:526: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:526"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:526"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_210
#AT_START_211
at_fn_group_banner 211 'mat5_compressed_readslab_le.at:529' \
  "Read slab of 16-bit integer complex array" "      " 4
at_xfail=no
(
  $as_echo "211. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:531" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:531"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:559: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:559"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:559"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_211
#AT_START_212
at_fn_group_banner 212 'mat5_compressed_readslab_le.at:562' \
  "Read slab of 16-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "212. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:564" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:564"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:592: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:592"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:592"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_212
#AT_START_213
at_fn_group_banner 213 'mat5_compressed_readslab_le.at:595' \
  "Read slab of 8-bit integer complex array" "       " 4
at_xfail=no
(
  $as_echo "213. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:597" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:597"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:625: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:625"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_213
#AT_START_214
at_fn_group_banner 214 'mat5_compressed_readslab_le.at:628' \
  "Read slab of 8-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "214. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_le.at:630" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_le.at:630"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:658: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_le.at:658"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_214
#AT_START_215
at_fn_group_banner 215 'mat5_compressed_readslab_le.at:661' \
  "Read linear slab of double-precision array" "     " 4
at_xfail=no
(
  $as_echo "215. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:691: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var70\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:691"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:691"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_215
#AT_START_216
at_fn_group_banner 216 'mat5_compressed_readslab_le.at:694' \
  "Read linear slab of single-precision array" "     " 4
at_xfail=no
(
  $as_echo "216. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:724: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var71\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:724"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:724"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_216
#AT_START_217
at_fn_group_banner 217 'mat5_compressed_readslab_le.at:727' \
  "Read linear slab of 64-bit integer array" "       " 4
at_xfail=no
(
  $as_echo "217. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:757: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var72\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:757"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:757"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_217
#AT_START_218
at_fn_group_banner 218 'mat5_compressed_readslab_le.at:760' \
  "Read linear slab of 64-bit unsigned integer array" "" 4
at_xfail=no
(
  $as_echo "218. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:790: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var73\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:790"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:790"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_218
#AT_START_219
at_fn_group_banner 219 'mat5_compressed_readslab_le.at:793' \
  "Read linear slab of 32-bit integer array" "       " 4
at_xfail=no
(
  $as_echo "219. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:823: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var74\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:823"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:823"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_219
#AT_START_220
at_fn_group_banner 220 'mat5_compressed_readslab_le.at:826' \
  "Read linear slab of 32-bit unsigned integer array" "" 4
at_xfail=no
(
  $as_echo "220. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:856: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var75\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:856"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:856"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_220
#AT_START_221
at_fn_group_banner 221 'mat5_compressed_readslab_le.at:859' \
  "Read linear slab of 16-bit integer array" "       " 4
at_xfail=no
(
  $as_echo "221. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:889: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var76\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:889"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:889"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_221
#AT_START_222
at_fn_group_banner 222 'mat5_compressed_readslab_le.at:892' \
  "Read linear slab of 16-bit unsigned integer array" "" 4
at_xfail=no
(
  $as_echo "222. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:922: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var77\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:922"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:922"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_222
#AT_START_223
at_fn_group_banner 223 'mat5_compressed_readslab_le.at:925' \
  "Read linear slab of 8-bit integer array" "        " 4
at_xfail=no
(
  $as_echo "223. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:955: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var78\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:955"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:955"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_223
#AT_START_224
at_fn_group_banner 224 'mat5_compressed_readslab_le.at:958' \
  "Read linear slab of 8-bit unsigned integer array" "" 4
at_xfail=no
(
  $as_echo "224. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:988: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var79\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:988"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:988"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_224
#AT_START_225
at_fn_group_banner 225 'mat5_compressed_readslab_le.at:991' \
  "Read linear slab of double-precision complex array" "" 4
at_xfail=no
(
  $as_echo "225. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1021: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var80\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1021"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1021"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_225
#AT_START_226
at_fn_group_banner 226 'mat5_compressed_readslab_le.at:1024' \
  "Read linear slab of single-precision complex array" "" 4
at_xfail=no
(
  $as_echo "226. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1054: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var81\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1054"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1054"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_226
#AT_START_227
at_fn_group_banner 227 'mat5_compressed_readslab_le.at:1057' \
  "Read linear slab of 64-bit integer complex array" "" 4
at_xfail=no
(
  $as_echo "227. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1087: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var82\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1087"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1087"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_227
#AT_START_228
at_fn_group_banner 228 'mat5_compressed_readslab_le.at:1090' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "228. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1120: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var83\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1120"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1120"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_228
#AT_START_229
at_fn_group_banner 229 'mat5_compressed_readslab_le.at:1123' \
  "Read linear slab of 32-bit integer complex array" "" 4
at_xfail=no
(
  $as_echo "229. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1153: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var84\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1153"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_229
#AT_START_230
at_fn_group_banner 230 'mat5_compressed_readslab_le.at:1156' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "230. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1186: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var85\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1186"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_230
#AT_START_231
at_fn_group_banner 231 'mat5_compressed_readslab_le.at:1189' \
  "Read linear slab of 16-bit integer complex array" "" 4
at_xfail=no
(
  $as_echo "231. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1219: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var86\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1219"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1219"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_231
#AT_START_232
at_fn_group_banner 232 'mat5_compressed_readslab_le.at:1222' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "232. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1252: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var87\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1252"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1252"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_232
#AT_START_233
at_fn_group_banner 233 'mat5_compressed_readslab_le.at:1255' \
  "Read linear slab of 8-bit integer complex array" "" 4
at_xfail=no
(
  $as_echo "233. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1285: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var88\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1285"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1285"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_233
#AT_START_234
at_fn_group_banner 234 'mat5_compressed_readslab_le.at:1288' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 4
at_xfail=no
(
  $as_echo "234. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_le.at:1318: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_le.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var89\\(3257:1111:end\\)" "mat5_compressed_readslab_le.at:1318"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_le.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_le.at:1318"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_234
#AT_START_235
at_fn_group_banner 235 'mat5_uncompressed_read_be.at:27' \
  "Read 2D double-precision array" "                 " 5
at_xfail=no
(
  $as_echo "235. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:41: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var1" "mat5_uncompressed_read_be.at:41"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_235
#AT_START_236
at_fn_group_banner 236 'mat5_uncompressed_read_be.at:44' \
  "Read 2D single-precision array" "                 " 5
at_xfail=no
(
  $as_echo "236. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:58: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var2" "mat5_uncompressed_read_be.at:58"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:58"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_236
#AT_START_237
at_fn_group_banner 237 'mat5_uncompressed_read_be.at:61' \
  "Read 2D 64-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "237. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:75: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var3" "mat5_uncompressed_read_be.at:75"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:75"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_237
#AT_START_238
at_fn_group_banner 238 'mat5_uncompressed_read_be.at:78' \
  "Read 2D 64-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "238. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:92: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var4" "mat5_uncompressed_read_be.at:92"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:92"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_238
#AT_START_239
at_fn_group_banner 239 'mat5_uncompressed_read_be.at:95' \
  "Read 2D 32-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "239. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:109: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var5" "mat5_uncompressed_read_be.at:109"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:109"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_239
#AT_START_240
at_fn_group_banner 240 'mat5_uncompressed_read_be.at:112' \
  "Read 2D 32-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "240. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:126: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var6" "mat5_uncompressed_read_be.at:126"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_240
#AT_START_241
at_fn_group_banner 241 'mat5_uncompressed_read_be.at:129' \
  "Read 2D 16-bit integer array" "                   " 5
at_xfail=no
(
  $as_echo "241. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:143: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var7" "mat5_uncompressed_read_be.at:143"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:143"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_241
#AT_START_242
at_fn_group_banner 242 'mat5_uncompressed_read_be.at:146' \
  "Read 2D 16-bit unsigned integer array" "          " 5
at_xfail=no
(
  $as_echo "242. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:160: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var8" "mat5_uncompressed_read_be.at:160"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:160"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_242
#AT_START_243
at_fn_group_banner 243 'mat5_uncompressed_read_be.at:163' \
  "Read 2D 8-bit integer array" "                    " 5
at_xfail=no
(
  $as_echo "243. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:177: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var9" "mat5_uncompressed_read_be.at:177"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_243
#AT_START_244
at_fn_group_banner 244 'mat5_uncompressed_read_be.at:180' \
  "Read 2D 8-bit unsigned integer array" "           " 5
at_xfail=no
(
  $as_echo "244. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:194: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var10" "mat5_uncompressed_read_be.at:194"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:194"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_244
#AT_START_245
at_fn_group_banner 245 'mat5_uncompressed_read_be.at:197' \
  "Read 2D double-precision complex array" "         " 5
at_xfail=no
(
  $as_echo "245. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:211: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var11" "mat5_uncompressed_read_be.at:211"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:211"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_245
#AT_START_246
at_fn_group_banner 246 'mat5_uncompressed_read_be.at:214' \
  "Read 2D single-precision complex array" "         " 5
at_xfail=no
(
  $as_echo "246. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:228: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var12" "mat5_uncompressed_read_be.at:228"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:228"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_246
#AT_START_247
at_fn_group_banner 247 'mat5_uncompressed_read_be.at:231' \
  "Read 2D 64-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "247. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:245: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var13" "mat5_uncompressed_read_be.at:245"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:245"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_247
#AT_START_248
at_fn_group_banner 248 'mat5_uncompressed_read_be.at:248' \
  "Read 2D 64-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "248. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:262: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var14" "mat5_uncompressed_read_be.at:262"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_248
#AT_START_249
at_fn_group_banner 249 'mat5_uncompressed_read_be.at:265' \
  "Read 2D 32-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "249. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:279: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var15" "mat5_uncompressed_read_be.at:279"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:279"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_249
#AT_START_250
at_fn_group_banner 250 'mat5_uncompressed_read_be.at:282' \
  "Read 2D 32-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "250. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:296: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var16" "mat5_uncompressed_read_be.at:296"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:296"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_250
#AT_START_251
at_fn_group_banner 251 'mat5_uncompressed_read_be.at:299' \
  "Read 2D 16-bit integer complex array" "           " 5
at_xfail=no
(
  $as_echo "251. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:313: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var17" "mat5_uncompressed_read_be.at:313"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:313"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_251
#AT_START_252
at_fn_group_banner 252 'mat5_uncompressed_read_be.at:316' \
  "Read 2D 16-bit unsigned integer complex array" "  " 5
at_xfail=no
(
  $as_echo "252. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var18" "mat5_uncompressed_read_be.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_252
#AT_START_253
at_fn_group_banner 253 'mat5_uncompressed_read_be.at:333' \
  "Read 2D 8-bit integer complex array" "            " 5
at_xfail=no
(
  $as_echo "253. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:347: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var19" "mat5_uncompressed_read_be.at:347"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:347"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_253
#AT_START_254
at_fn_group_banner 254 'mat5_uncompressed_read_be.at:350' \
  "Read 2D 8-bit unsigned integer complex array" "   " 5
at_xfail=no
(
  $as_echo "254. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:364: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var20" "mat5_uncompressed_read_be.at:364"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:364"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_254
#AT_START_255
at_fn_group_banner 255 'mat5_uncompressed_read_be.at:367' \
  "Read 2D logical array" "                          " 5
at_xfail=no
(
  $as_echo "255. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:382: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var90" "mat5_uncompressed_read_be.at:382"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:382"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_255
#AT_START_256
at_fn_group_banner 256 'mat5_uncompressed_read_be.at:385' \
  "Read double-precision sparse array" "             " 5
at_xfail=no
(
  $as_echo "256. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:400: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var21" "mat5_uncompressed_read_be.at:400"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:400"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_256
#AT_START_257
at_fn_group_banner 257 'mat5_uncompressed_read_be.at:403' \
  "Read double-precision sparse complex array" "     " 5
at_xfail=no
(
  $as_echo "257. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:418: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var22" "mat5_uncompressed_read_be.at:418"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:418"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_257
#AT_START_258
at_fn_group_banner 258 'mat5_uncompressed_read_be.at:421' \
  "Read empty array" "                               " 5
at_xfail=no
(
  $as_echo "258. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:431: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var23" "mat5_uncompressed_read_be.at:431"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:431"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_258
#AT_START_259
at_fn_group_banner 259 'mat5_uncompressed_read_be.at:434' \
  "Read 2D character array" "                        " 5
at_xfail=no
(
  $as_echo "259. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:448: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var24" "mat5_uncompressed_read_be.at:448"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:448"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_259
#AT_START_260
at_fn_group_banner 260 'mat5_uncompressed_read_be.at:451' \
  "Read empty structure array" "                     " 5
at_xfail=no
(
  $as_echo "260. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:461: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var25" "mat5_uncompressed_read_be.at:461"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:461"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_260
#AT_START_261
at_fn_group_banner 261 'mat5_uncompressed_read_be.at:463' \
  "Read empty structure array with fields" "         " 5
at_xfail=no
(
  $as_echo "261. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:477: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var26" "mat5_uncompressed_read_be.at:477"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:477"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_261
#AT_START_262
at_fn_group_banner 262 'mat5_uncompressed_read_be.at:479' \
  "Read structure array with empty fields" "         " 5
at_xfail=no
(
  $as_echo "262. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:514: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var27" "mat5_uncompressed_read_be.at:514"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:514"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_262
#AT_START_263
at_fn_group_banner 263 'mat5_uncompressed_read_be.at:516' \
  "Read structure array with double-precision fields" "" 5
at_xfail=no
(
  $as_echo "263. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:562: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var28" "mat5_uncompressed_read_be.at:562"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:562"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_263
#AT_START_264
at_fn_group_banner 264 'mat5_uncompressed_read_be.at:564' \
  "Read structure array with single-precision fields" "" 5
at_xfail=no
(
  $as_echo "264. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:610: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var29" "mat5_uncompressed_read_be.at:610"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:610"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_264
#AT_START_265
at_fn_group_banner 265 'mat5_uncompressed_read_be.at:612' \
  "Read structure array with 64-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "265. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:658: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var30" "mat5_uncompressed_read_be.at:658"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_265
#AT_START_266
at_fn_group_banner 266 'mat5_uncompressed_read_be.at:660' \
  "Read structure array with 64-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "266. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:706: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var31" "mat5_uncompressed_read_be.at:706"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:706"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_266
#AT_START_267
at_fn_group_banner 267 'mat5_uncompressed_read_be.at:708' \
  "Read structure array with 32-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "267. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:754: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var32" "mat5_uncompressed_read_be.at:754"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:754"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_267
#AT_START_268
at_fn_group_banner 268 'mat5_uncompressed_read_be.at:756' \
  "Read structure array with 32-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "268. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:802: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var33" "mat5_uncompressed_read_be.at:802"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:802"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_268
#AT_START_269
at_fn_group_banner 269 'mat5_uncompressed_read_be.at:804' \
  "Read structure array with 16-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "269. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:850: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var34" "mat5_uncompressed_read_be.at:850"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:850"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_269
#AT_START_270
at_fn_group_banner 270 'mat5_uncompressed_read_be.at:852' \
  "Read structure array with 16-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "270. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:898: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var35" "mat5_uncompressed_read_be.at:898"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:898"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_270
#AT_START_271
at_fn_group_banner 271 'mat5_uncompressed_read_be.at:900' \
  "Read structure array with 8-bit integer fields" " " 5
at_xfail=no
(
  $as_echo "271. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:946: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var36" "mat5_uncompressed_read_be.at:946"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:946"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_271
#AT_START_272
at_fn_group_banner 272 'mat5_uncompressed_read_be.at:948' \
  "Read structure array with 8-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "272. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:994: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var37" "mat5_uncompressed_read_be.at:994"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:994"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_272
#AT_START_273
at_fn_group_banner 273 'mat5_uncompressed_read_be.at:996' \
  "Read structure array with complex double-precision fields" "" 5
at_xfail=no
(
  $as_echo "273. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1042: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var38" "mat5_uncompressed_read_be.at:1042"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1042"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_273
#AT_START_274
at_fn_group_banner 274 'mat5_uncompressed_read_be.at:1044' \
  "Read structure array with complex single-precision fields" "" 5
at_xfail=no
(
  $as_echo "274. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1090: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var39" "mat5_uncompressed_read_be.at:1090"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1090"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_274
#AT_START_275
at_fn_group_banner 275 'mat5_uncompressed_read_be.at:1092' \
  "Read structure array with complex 64-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "275. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1138: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var40" "mat5_uncompressed_read_be.at:1138"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1138"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_275
#AT_START_276
at_fn_group_banner 276 'mat5_uncompressed_read_be.at:1140' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "276. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1186: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var41" "mat5_uncompressed_read_be.at:1186"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_276
#AT_START_277
at_fn_group_banner 277 'mat5_uncompressed_read_be.at:1188' \
  "Read structure array with complex 32-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "277. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1234: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var42" "mat5_uncompressed_read_be.at:1234"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1234"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_277
#AT_START_278
at_fn_group_banner 278 'mat5_uncompressed_read_be.at:1236' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "278. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1282: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var43" "mat5_uncompressed_read_be.at:1282"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1282"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_278
#AT_START_279
at_fn_group_banner 279 'mat5_uncompressed_read_be.at:1284' \
  "Read structure array with complex 16-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "279. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var44" "mat5_uncompressed_read_be.at:1330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_279
#AT_START_280
at_fn_group_banner 280 'mat5_uncompressed_read_be.at:1332' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "280. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1378: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var45" "mat5_uncompressed_read_be.at:1378"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_280
#AT_START_281
at_fn_group_banner 281 'mat5_uncompressed_read_be.at:1380' \
  "Read structure array with complex 8-bit integer fields" "" 5
at_xfail=no
(
  $as_echo "281. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1426: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var46" "mat5_uncompressed_read_be.at:1426"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1426"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_281
#AT_START_282
at_fn_group_banner 282 'mat5_uncompressed_read_be.at:1428' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 5
at_xfail=no
(
  $as_echo "282. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1474: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var47" "mat5_uncompressed_read_be.at:1474"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1474"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_282
#AT_START_283
at_fn_group_banner 283 'mat5_uncompressed_read_be.at:1477' \
  "Read structure array with logical fields" "       " 5
at_xfail=no
(
  $as_echo "283. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1533: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var91" "mat5_uncompressed_read_be.at:1533"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1533"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_283
#AT_START_284
at_fn_group_banner 284 'mat5_uncompressed_read_be.at:1536' \
  "Read structure array with double-precision sparse fields" "" 5
at_xfail=no
(
  $as_echo "284. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1588: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var48" "mat5_uncompressed_read_be.at:1588"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_284
#AT_START_285
at_fn_group_banner 285 'mat5_uncompressed_read_be.at:1591' \
  "Read structure array with complex double-precision sparse fields" "" 5
at_xfail=no
(
  $as_echo "285. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1643: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var49" "mat5_uncompressed_read_be.at:1643"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1643"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_285
#AT_START_286
at_fn_group_banner 286 'mat5_uncompressed_read_be.at:1646' \
  "Read structure array with character fields" "     " 5
at_xfail=no
(
  $as_echo "286. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1688: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var50" "mat5_uncompressed_read_be.at:1688"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1688"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_286
#AT_START_287
at_fn_group_banner 287 'mat5_uncompressed_read_be.at:1691' \
  "Read empty cell array" "                          " 5
at_xfail=no
(
  $as_echo "287. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1701: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var51"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var51" "mat5_uncompressed_read_be.at:1701"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var51
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var51
      Rank: 2
Dimensions: 0 x 0
Class Type: Cell Array
 Data Type: Cell Array
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1701"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_287
#AT_START_288
at_fn_group_banner 288 'mat5_uncompressed_read_be.at:1704' \
  "Read cell array with empty arrays" "              " 5
at_xfail=no
(
  $as_echo "288. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1774: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var52" "mat5_uncompressed_read_be.at:1774"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1774"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_288
#AT_START_289
at_fn_group_banner 289 'mat5_uncompressed_read_be.at:1777' \
  "Read cell array with double-precision arrays" "   " 5
at_xfail=no
(
  $as_echo "289. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1838: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var53" "mat5_uncompressed_read_be.at:1838"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1838"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_289
#AT_START_290
at_fn_group_banner 290 'mat5_uncompressed_read_be.at:1841' \
  "Read cell array with single-precision arrays" "   " 5
at_xfail=no
(
  $as_echo "290. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1902: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var54" "mat5_uncompressed_read_be.at:1902"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1902"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_290
#AT_START_291
at_fn_group_banner 291 'mat5_uncompressed_read_be.at:1905' \
  "Read cell array with 64-bit integer arrays" "     " 5
at_xfail=no
(
  $as_echo "291. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:1966: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var55" "mat5_uncompressed_read_be.at:1966"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:1966"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_291
#AT_START_292
at_fn_group_banner 292 'mat5_uncompressed_read_be.at:1969' \
  "Read cell array with 64-bit unsigned integer arrays" "" 5
at_xfail=no
(
  $as_echo "292. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2030: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var56" "mat5_uncompressed_read_be.at:2030"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2030"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_292
#AT_START_293
at_fn_group_banner 293 'mat5_uncompressed_read_be.at:2033' \
  "Read cell array with 32-bit integer arrays" "     " 5
at_xfail=no
(
  $as_echo "293. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2094: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var57" "mat5_uncompressed_read_be.at:2094"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2094"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_293
#AT_START_294
at_fn_group_banner 294 'mat5_uncompressed_read_be.at:2097' \
  "Read cell array with 32-bit unsigned integer arrays" "" 5
at_xfail=no
(
  $as_echo "294. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2158: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var58" "mat5_uncompressed_read_be.at:2158"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2158"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_294
#AT_START_295
at_fn_group_banner 295 'mat5_uncompressed_read_be.at:2161' \
  "Read cell array with 16-bit integer arrays" "     " 5
at_xfail=no
(
  $as_echo "295. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var59" "mat5_uncompressed_read_be.at:2222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_295
#AT_START_296
at_fn_group_banner 296 'mat5_uncompressed_read_be.at:2225' \
  "Read cell array with 16-bit unsigned integer arrays" "" 5
at_xfail=no
(
  $as_echo "296. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2286: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var60" "mat5_uncompressed_read_be.at:2286"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2286"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_296
#AT_START_297
at_fn_group_banner 297 'mat5_uncompressed_read_be.at:2289' \
  "Read cell array with 8-bit integer arrays" "      " 5
at_xfail=no
(
  $as_echo "297. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2350: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var61" "mat5_uncompressed_read_be.at:2350"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2350"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_297
#AT_START_298
at_fn_group_banner 298 'mat5_uncompressed_read_be.at:2353' \
  "Read cell array with 8-bit unsigned integer arrays" "" 5
at_xfail=no
(
  $as_echo "298. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2414: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var62" "mat5_uncompressed_read_be.at:2414"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2414"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_298
#AT_START_299
at_fn_group_banner 299 'mat5_uncompressed_read_be.at:2417' \
  "Read cell array with logical arrays" "            " 5
at_xfail=no
(
  $as_echo "299. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2469: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var92" "mat5_uncompressed_read_be.at:2469"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2469"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_299
#AT_START_300
at_fn_group_banner 300 'mat5_uncompressed_read_be.at:2472' \
  "Read cell array with double-precision sparse arrays" "" 5
at_xfail=no
(
  $as_echo "300. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2522: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var63" "mat5_uncompressed_read_be.at:2522"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2522"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_300
#AT_START_301
at_fn_group_banner 301 'mat5_uncompressed_read_be.at:2525' \
  "Read cell array with complex double-precision sparse arrays" "" 5
at_xfail=no
(
  $as_echo "301. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2575: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var64" "mat5_uncompressed_read_be.at:2575"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2575"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_301
#AT_START_302
at_fn_group_banner 302 'mat5_uncompressed_read_be.at:2578' \
  "Read cell array with character arrays" "          " 5
at_xfail=no
(
  $as_echo "302. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2616: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var65" "mat5_uncompressed_read_be.at:2616"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2616"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_302
#AT_START_303
at_fn_group_banner 303 'mat5_uncompressed_read_be.at:2619' \
  "Read cell array with empty structure arrays" "    " 5
at_xfail=no
(
  $as_echo "303. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:2676: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var66" "mat5_uncompressed_read_be.at:2676"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:2676"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_303
#AT_START_304
at_fn_group_banner 304 'mat5_uncompressed_read_be.at:2679' \
  "Read cell array with structure arrays (numeric fields)" "" 5
at_xfail=no
(
  $as_echo "304. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:3529: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var67" "mat5_uncompressed_read_be.at:3529"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:3529"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_304
#AT_START_305
at_fn_group_banner 305 'mat5_uncompressed_read_be.at:3532' \
  "Read cell array with structure arrays (sparse fields)" "" 5
at_xfail=no
(
  $as_echo "305. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:3638: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var68" "mat5_uncompressed_read_be.at:3638"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:3638"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_305
#AT_START_306
at_fn_group_banner 306 'mat5_uncompressed_read_be.at:3641' \
  "Read cell array structure arrays (character fields)" "" 5
at_xfail=no
(
  $as_echo "306. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_read_be.at:3695: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var69" "mat5_uncompressed_read_be.at:3695"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_uncompressed_be.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_read_be.at:3695"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_306
#AT_START_307
at_fn_group_banner 307 'mat5_uncompressed_readslab_be.at:1' \
  "Read slab of 2D double-precision array" "         " 5
at_xfail=no
(
  $as_echo "307. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:30: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:30"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:30"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_307
#AT_START_308
at_fn_group_banner 308 'mat5_uncompressed_readslab_be.at:33' \
  "Read slab of single-precision array" "            " 5
at_xfail=no
(
  $as_echo "308. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:62: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:62"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:62"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_308
#AT_START_309
at_fn_group_banner 309 'mat5_uncompressed_readslab_be.at:65' \
  "Read slab of 64-bit integer array" "              " 5
at_xfail=no
(
  $as_echo "309. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:94: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:94"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:94"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_309
#AT_START_310
at_fn_group_banner 310 'mat5_uncompressed_readslab_be.at:97' \
  "Read slab of 64-bit unsigned integer array" "     " 5
at_xfail=no
(
  $as_echo "310. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:126: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:126"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_310
#AT_START_311
at_fn_group_banner 311 'mat5_uncompressed_readslab_be.at:129' \
  "Read slab of 32-bit integer array" "              " 5
at_xfail=no
(
  $as_echo "311. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:158: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:158"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:158"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_311
#AT_START_312
at_fn_group_banner 312 'mat5_uncompressed_readslab_be.at:161' \
  "Read slab of 32-bit unsigned integer array" "     " 5
at_xfail=no
(
  $as_echo "312. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:190: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:190"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:190"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_312
#AT_START_313
at_fn_group_banner 313 'mat5_uncompressed_readslab_be.at:193' \
  "Read slab of 16-bit integer array" "              " 5
at_xfail=no
(
  $as_echo "313. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:222: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:222"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_313
#AT_START_314
at_fn_group_banner 314 'mat5_uncompressed_readslab_be.at:225' \
  "Read slab of 16-bit unsigned integer array" "     " 5
at_xfail=no
(
  $as_echo "314. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:254: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:254"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:254"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_314
#AT_START_315
at_fn_group_banner 315 'mat5_uncompressed_readslab_be.at:257' \
  "Read slab of 8-bit integer array" "               " 5
at_xfail=no
(
  $as_echo "315. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:286: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:286"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:286"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_315
#AT_START_316
at_fn_group_banner 316 'mat5_uncompressed_readslab_be.at:289' \
  "Read slab of 8-bit unsigned integer array" "      " 5
at_xfail=no
(
  $as_echo "316. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:318: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:318"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:318"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_316
#AT_START_317
at_fn_group_banner 317 'mat5_uncompressed_readslab_be.at:321' \
  "Read slab of double-precision complex array" "    " 5
at_xfail=no
(
  $as_echo "317. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:350: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:350"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:350"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_317
#AT_START_318
at_fn_group_banner 318 'mat5_uncompressed_readslab_be.at:353' \
  "Read slab of single-precision complex array" "    " 5
at_xfail=no
(
  $as_echo "318. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:382: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:382"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:382"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_318
#AT_START_319
at_fn_group_banner 319 'mat5_uncompressed_readslab_be.at:385' \
  "Read slab of 64-bit integer complex array" "      " 5
at_xfail=no
(
  $as_echo "319. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:414: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:414"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:414"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_319
#AT_START_320
at_fn_group_banner 320 'mat5_uncompressed_readslab_be.at:417' \
  "Read slab of 64-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "320. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:446: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:446"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_320
#AT_START_321
at_fn_group_banner 321 'mat5_uncompressed_readslab_be.at:449' \
  "Read slab of 32-bit integer complex array" "      " 5
at_xfail=no
(
  $as_echo "321. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:478: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:478"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_321
#AT_START_322
at_fn_group_banner 322 'mat5_uncompressed_readslab_be.at:481' \
  "Read slab of 32-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "322. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:510: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:510"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:510"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_322
#AT_START_323
at_fn_group_banner 323 'mat5_uncompressed_readslab_be.at:513' \
  "Read slab of 16-bit integer complex array" "      " 5
at_xfail=no
(
  $as_echo "323. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:542: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:542"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_323
#AT_START_324
at_fn_group_banner 324 'mat5_uncompressed_readslab_be.at:545' \
  "Read slab of 16-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "324. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:574: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:574"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:574"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_324
#AT_START_325
at_fn_group_banner 325 'mat5_uncompressed_readslab_be.at:577' \
  "Read slab of 8-bit integer complex array" "       " 5
at_xfail=no
(
  $as_echo "325. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:606: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:606"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:606"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_325
#AT_START_326
at_fn_group_banner 326 'mat5_uncompressed_readslab_be.at:609' \
  "Read slab of 8-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "326. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:638: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat5_uncompressed_readslab_be.at:638"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:638"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_326
#AT_START_327
at_fn_group_banner 327 'mat5_uncompressed_readslab_be.at:641' \
  "Read linear slab of double-precision array" "     " 5
at_xfail=no
(
  $as_echo "327. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:671: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:671"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:671"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_327
#AT_START_328
at_fn_group_banner 328 'mat5_uncompressed_readslab_be.at:674' \
  "Read linear slab of single-precision array" "     " 5
at_xfail=no
(
  $as_echo "328. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:704: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:704"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:704"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_328
#AT_START_329
at_fn_group_banner 329 'mat5_uncompressed_readslab_be.at:707' \
  "Read linear slab of 64-bit integer array" "       " 5
at_xfail=no
(
  $as_echo "329. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:737: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:737"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:737"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_329
#AT_START_330
at_fn_group_banner 330 'mat5_uncompressed_readslab_be.at:740' \
  "Read linear slab of 64-bit unsigned integer array" "" 5
at_xfail=no
(
  $as_echo "330. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:770: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:770"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:770"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_330
#AT_START_331
at_fn_group_banner 331 'mat5_uncompressed_readslab_be.at:773' \
  "Read linear slab of 32-bit integer array" "       " 5
at_xfail=no
(
  $as_echo "331. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:803: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:803"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:803"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_331
#AT_START_332
at_fn_group_banner 332 'mat5_uncompressed_readslab_be.at:806' \
  "Read linear slab of 32-bit unsigned integer array" "" 5
at_xfail=no
(
  $as_echo "332. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:836: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:836"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:836"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_332
#AT_START_333
at_fn_group_banner 333 'mat5_uncompressed_readslab_be.at:839' \
  "Read linear slab of 16-bit integer array" "       " 5
at_xfail=no
(
  $as_echo "333. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:869: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:869"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:869"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_333
#AT_START_334
at_fn_group_banner 334 'mat5_uncompressed_readslab_be.at:872' \
  "Read linear slab of 16-bit unsigned integer array" "" 5
at_xfail=no
(
  $as_echo "334. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:902: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:902"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:902"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_334
#AT_START_335
at_fn_group_banner 335 'mat5_uncompressed_readslab_be.at:905' \
  "Read linear slab of 8-bit integer array" "        " 5
at_xfail=no
(
  $as_echo "335. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:935: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:935"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:935"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_335
#AT_START_336
at_fn_group_banner 336 'mat5_uncompressed_readslab_be.at:938' \
  "Read linear slab of 8-bit unsigned integer array" "" 5
at_xfail=no
(
  $as_echo "336. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:968: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:968"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:968"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_336
#AT_START_337
at_fn_group_banner 337 'mat5_uncompressed_readslab_be.at:971' \
  "Read linear slab of double-precision complex array" "" 5
at_xfail=no
(
  $as_echo "337. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1001: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1001"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1001"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_337
#AT_START_338
at_fn_group_banner 338 'mat5_uncompressed_readslab_be.at:1004' \
  "Read linear slab of single-precision complex array" "" 5
at_xfail=no
(
  $as_echo "338. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1034: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1034"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1034"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_338
#AT_START_339
at_fn_group_banner 339 'mat5_uncompressed_readslab_be.at:1037' \
  "Read linear slab of 64-bit integer complex array" "" 5
at_xfail=no
(
  $as_echo "339. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1067: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1067"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1067"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_339
#AT_START_340
at_fn_group_banner 340 'mat5_uncompressed_readslab_be.at:1070' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "340. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1100: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1100"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_340
#AT_START_341
at_fn_group_banner 341 'mat5_uncompressed_readslab_be.at:1103' \
  "Read linear slab of 32-bit integer complex array" "" 5
at_xfail=no
(
  $as_echo "341. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1133: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1133"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1133"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_341
#AT_START_342
at_fn_group_banner 342 'mat5_uncompressed_readslab_be.at:1136' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "342. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1166: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1166"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1166"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_342
#AT_START_343
at_fn_group_banner 343 'mat5_uncompressed_readslab_be.at:1169' \
  "Read linear slab of 16-bit integer complex array" "" 5
at_xfail=no
(
  $as_echo "343. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1199: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1199"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1199"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_343
#AT_START_344
at_fn_group_banner 344 'mat5_uncompressed_readslab_be.at:1202' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "344. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1232: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1232"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1232"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_344
#AT_START_345
at_fn_group_banner 345 'mat5_uncompressed_readslab_be.at:1235' \
  "Read linear slab of 8-bit integer complex array" "" 5
at_xfail=no
(
  $as_echo "345. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1265: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1265"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1265"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_345
#AT_START_346
at_fn_group_banner 346 'mat5_uncompressed_readslab_be.at:1268' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 5
at_xfail=no
(
  $as_echo "346. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_readslab_be.at:1298: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\\(3257:1111:end\\)" "mat5_uncompressed_readslab_be.at:1298"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_uncompressed_be.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_readslab_be.at:1298"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_346
#AT_START_347
at_fn_group_banner 347 'mat5_compressed_read_be.at:27' \
  "Read 2D double-precision array" "                 " 6
at_xfail=no
(
  $as_echo "347. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:28" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:28"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:42: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var1" "mat5_compressed_read_be.at:42"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_347
#AT_START_348
at_fn_group_banner 348 'mat5_compressed_read_be.at:45' \
  "Read 2D single-precision array" "                 " 6
at_xfail=no
(
  $as_echo "348. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:46" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:46"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:60: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var2" "mat5_compressed_read_be.at:60"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:60"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_348
#AT_START_349
at_fn_group_banner 349 'mat5_compressed_read_be.at:63' \
  "Read 2D 64-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "349. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:64" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:64"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:78: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var3" "mat5_compressed_read_be.at:78"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:78"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_349
#AT_START_350
at_fn_group_banner 350 'mat5_compressed_read_be.at:81' \
  "Read 2D 64-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "350. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:82" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:82"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:96: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var4" "mat5_compressed_read_be.at:96"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_350
#AT_START_351
at_fn_group_banner 351 'mat5_compressed_read_be.at:99' \
  "Read 2D 32-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "351. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:100" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:100"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:114: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var5" "mat5_compressed_read_be.at:114"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:114"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_351
#AT_START_352
at_fn_group_banner 352 'mat5_compressed_read_be.at:117' \
  "Read 2D 32-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "352. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:118" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:118"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:132: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var6" "mat5_compressed_read_be.at:132"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_352
#AT_START_353
at_fn_group_banner 353 'mat5_compressed_read_be.at:135' \
  "Read 2D 16-bit integer array" "                   " 6
at_xfail=no
(
  $as_echo "353. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:136" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:136"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:150: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var7" "mat5_compressed_read_be.at:150"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_353
#AT_START_354
at_fn_group_banner 354 'mat5_compressed_read_be.at:153' \
  "Read 2D 16-bit unsigned integer array" "          " 6
at_xfail=no
(
  $as_echo "354. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:154" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:154"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:168: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var8" "mat5_compressed_read_be.at:168"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_354
#AT_START_355
at_fn_group_banner 355 'mat5_compressed_read_be.at:171' \
  "Read 2D 8-bit integer array" "                    " 6
at_xfail=no
(
  $as_echo "355. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:172" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:172"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:186: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var9" "mat5_compressed_read_be.at:186"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_355
#AT_START_356
at_fn_group_banner 356 'mat5_compressed_read_be.at:189' \
  "Read 2D 8-bit unsigned integer array" "           " 6
at_xfail=no
(
  $as_echo "356. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:190" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:190"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:204: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var10" "mat5_compressed_read_be.at:204"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_356
#AT_START_357
at_fn_group_banner 357 'mat5_compressed_read_be.at:207' \
  "Read 2D double-precision complex array" "         " 6
at_xfail=no
(
  $as_echo "357. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:208" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:208"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var11" "mat5_compressed_read_be.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_357
#AT_START_358
at_fn_group_banner 358 'mat5_compressed_read_be.at:225' \
  "Read 2D single-precision complex array" "         " 6
at_xfail=no
(
  $as_echo "358. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:226" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:226"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:240: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var12" "mat5_compressed_read_be.at:240"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_358
#AT_START_359
at_fn_group_banner 359 'mat5_compressed_read_be.at:243' \
  "Read 2D 64-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "359. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:244" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:244"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:258: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var13" "mat5_compressed_read_be.at:258"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_359
#AT_START_360
at_fn_group_banner 360 'mat5_compressed_read_be.at:261' \
  "Read 2D 64-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "360. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:262" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:262"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:276: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var14" "mat5_compressed_read_be.at:276"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:276"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_360
#AT_START_361
at_fn_group_banner 361 'mat5_compressed_read_be.at:279' \
  "Read 2D 32-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "361. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:280" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:280"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:294: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var15" "mat5_compressed_read_be.at:294"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_361
#AT_START_362
at_fn_group_banner 362 'mat5_compressed_read_be.at:297' \
  "Read 2D 32-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "362. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:298" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:298"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:312: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var16" "mat5_compressed_read_be.at:312"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_362
#AT_START_363
at_fn_group_banner 363 'mat5_compressed_read_be.at:315' \
  "Read 2D 16-bit integer complex array" "           " 6
at_xfail=no
(
  $as_echo "363. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:316" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:316"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var17" "mat5_compressed_read_be.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_363
#AT_START_364
at_fn_group_banner 364 'mat5_compressed_read_be.at:333' \
  "Read 2D 16-bit unsigned integer complex array" "  " 6
at_xfail=no
(
  $as_echo "364. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:334" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:334"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:348: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var18" "mat5_compressed_read_be.at:348"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:348"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_364
#AT_START_365
at_fn_group_banner 365 'mat5_compressed_read_be.at:351' \
  "Read 2D 8-bit integer complex array" "            " 6
at_xfail=no
(
  $as_echo "365. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:352" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:352"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:366: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var19" "mat5_compressed_read_be.at:366"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_365
#AT_START_366
at_fn_group_banner 366 'mat5_compressed_read_be.at:369' \
  "Read 2D 8-bit unsigned integer complex array" "   " 6
at_xfail=no
(
  $as_echo "366. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:370" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:370"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:384: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var20" "mat5_compressed_read_be.at:384"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:384"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_366
#AT_START_367
at_fn_group_banner 367 'mat5_compressed_read_be.at:387' \
  "Read 2D logical array" "                          " 6
at_xfail=no
(
  $as_echo "367. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:388" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:388"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:403: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var90" "mat5_compressed_read_be.at:403"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:403"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_367
#AT_START_368
at_fn_group_banner 368 'mat5_compressed_read_be.at:406' \
  "Read double-precision sparse array" "             " 6
at_xfail=no
(
  $as_echo "368. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:407" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:407"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:422: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var21" "mat5_compressed_read_be.at:422"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_368
#AT_START_369
at_fn_group_banner 369 'mat5_compressed_read_be.at:425' \
  "Read double-precision sparse complex array" "     " 6
at_xfail=no
(
  $as_echo "369. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:426" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:426"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var22" "mat5_compressed_read_be.at:441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_369
#AT_START_370
at_fn_group_banner 370 'mat5_compressed_read_be.at:444' \
  "Read empty array" "                               " 6
at_xfail=no
(
  $as_echo "370. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:445" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:445"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:455: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var23" "mat5_compressed_read_be.at:455"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:455"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_370
#AT_START_371
at_fn_group_banner 371 'mat5_compressed_read_be.at:458' \
  "Read 2D character array" "                        " 6
at_xfail=no
(
  $as_echo "371. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:459" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:459"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:473: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var24" "mat5_compressed_read_be.at:473"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_371
#AT_START_372
at_fn_group_banner 372 'mat5_compressed_read_be.at:476' \
  "Read empty structure array" "                     " 6
at_xfail=no
(
  $as_echo "372. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:477" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:477"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:487: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var25" "mat5_compressed_read_be.at:487"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:487"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_372
#AT_START_373
at_fn_group_banner 373 'mat5_compressed_read_be.at:489' \
  "Read empty structure array with fields" "         " 6
at_xfail=no
(
  $as_echo "373. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:490" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:490"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:504: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var26" "mat5_compressed_read_be.at:504"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:504"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_373
#AT_START_374
at_fn_group_banner 374 'mat5_compressed_read_be.at:506' \
  "Read structure array with empty fields" "         " 6
at_xfail=no
(
  $as_echo "374. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:507" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:507"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:542: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var27" "mat5_compressed_read_be.at:542"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_374
#AT_START_375
at_fn_group_banner 375 'mat5_compressed_read_be.at:544' \
  "Read structure array with double-precision fields" "" 6
at_xfail=no
(
  $as_echo "375. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:545" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:545"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:591: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var28" "mat5_compressed_read_be.at:591"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:591"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_375
#AT_START_376
at_fn_group_banner 376 'mat5_compressed_read_be.at:593' \
  "Read structure array with single-precision fields" "" 6
at_xfail=no
(
  $as_echo "376. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:594" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:594"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:640: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var29" "mat5_compressed_read_be.at:640"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:640"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_376
#AT_START_377
at_fn_group_banner 377 'mat5_compressed_read_be.at:642' \
  "Read structure array with 64-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "377. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:643" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:643"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:689: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var30" "mat5_compressed_read_be.at:689"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:689"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_377
#AT_START_378
at_fn_group_banner 378 'mat5_compressed_read_be.at:691' \
  "Read structure array with 64-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "378. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:692" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:692"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:738: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var31" "mat5_compressed_read_be.at:738"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:738"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_378
#AT_START_379
at_fn_group_banner 379 'mat5_compressed_read_be.at:740' \
  "Read structure array with 32-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "379. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:741" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:741"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:787: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var32" "mat5_compressed_read_be.at:787"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:787"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_379
#AT_START_380
at_fn_group_banner 380 'mat5_compressed_read_be.at:789' \
  "Read structure array with 32-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "380. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:790" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:790"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:836: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var33" "mat5_compressed_read_be.at:836"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:836"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_380
#AT_START_381
at_fn_group_banner 381 'mat5_compressed_read_be.at:838' \
  "Read structure array with 16-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "381. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:839" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:839"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:885: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var34" "mat5_compressed_read_be.at:885"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:885"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_381
#AT_START_382
at_fn_group_banner 382 'mat5_compressed_read_be.at:887' \
  "Read structure array with 16-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "382. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:888" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:888"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:934: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var35" "mat5_compressed_read_be.at:934"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:934"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_382
#AT_START_383
at_fn_group_banner 383 'mat5_compressed_read_be.at:936' \
  "Read structure array with 8-bit integer fields" " " 6
at_xfail=no
(
  $as_echo "383. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:937" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:937"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:983: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var36" "mat5_compressed_read_be.at:983"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:983"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_383
#AT_START_384
at_fn_group_banner 384 'mat5_compressed_read_be.at:985' \
  "Read structure array with 8-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "384. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:986" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:986"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1032: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var37" "mat5_compressed_read_be.at:1032"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1032"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_384
#AT_START_385
at_fn_group_banner 385 'mat5_compressed_read_be.at:1034' \
  "Read structure array with complex double-precision fields" "" 6
at_xfail=no
(
  $as_echo "385. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1035" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1035"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1081: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var38" "mat5_compressed_read_be.at:1081"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1081"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_385
#AT_START_386
at_fn_group_banner 386 'mat5_compressed_read_be.at:1083' \
  "Read structure array with complex single-precision fields" "" 6
at_xfail=no
(
  $as_echo "386. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1084" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1084"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1130: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var39" "mat5_compressed_read_be.at:1130"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1130"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_386
#AT_START_387
at_fn_group_banner 387 'mat5_compressed_read_be.at:1132' \
  "Read structure array with complex 64-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "387. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1133" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1133"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1179: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var40" "mat5_compressed_read_be.at:1179"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1179"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_387
#AT_START_388
at_fn_group_banner 388 'mat5_compressed_read_be.at:1181' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "388. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1182" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1182"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1228: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var41" "mat5_compressed_read_be.at:1228"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1228"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_388
#AT_START_389
at_fn_group_banner 389 'mat5_compressed_read_be.at:1230' \
  "Read structure array with complex 32-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "389. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1231" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1231"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1277: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var42" "mat5_compressed_read_be.at:1277"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1277"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_389
#AT_START_390
at_fn_group_banner 390 'mat5_compressed_read_be.at:1279' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "390. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1280" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1280"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1326: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var43" "mat5_compressed_read_be.at:1326"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1326"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_390
#AT_START_391
at_fn_group_banner 391 'mat5_compressed_read_be.at:1328' \
  "Read structure array with complex 16-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "391. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1329" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1329"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1375: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var44" "mat5_compressed_read_be.at:1375"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1375"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_391
#AT_START_392
at_fn_group_banner 392 'mat5_compressed_read_be.at:1377' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "392. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1378" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1378"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1424: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var45" "mat5_compressed_read_be.at:1424"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1424"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_392
#AT_START_393
at_fn_group_banner 393 'mat5_compressed_read_be.at:1426' \
  "Read structure array with complex 8-bit integer fields" "" 6
at_xfail=no
(
  $as_echo "393. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1427" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1427"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1473: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var46" "mat5_compressed_read_be.at:1473"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_393
#AT_START_394
at_fn_group_banner 394 'mat5_compressed_read_be.at:1475' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 6
at_xfail=no
(
  $as_echo "394. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1476" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1476"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1522: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var47" "mat5_compressed_read_be.at:1522"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1522"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_394
#AT_START_395
at_fn_group_banner 395 'mat5_compressed_read_be.at:1525' \
  "Read structure array with logical fields" "       " 6
at_xfail=no
(
  $as_echo "395. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1526" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1526"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1582: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var91" "mat5_compressed_read_be.at:1582"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1582"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_395
#AT_START_396
at_fn_group_banner 396 'mat5_compressed_read_be.at:1585' \
  "Read structure array with double-precision sparse fields" "" 6
at_xfail=no
(
  $as_echo "396. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1586" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1586"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1638: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var48" "mat5_compressed_read_be.at:1638"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1638"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_396
#AT_START_397
at_fn_group_banner 397 'mat5_compressed_read_be.at:1641' \
  "Read structure array with complex double-precision sparse fields" "" 6
at_xfail=no
(
  $as_echo "397. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1642" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1642"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1694: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var49" "mat5_compressed_read_be.at:1694"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1694"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_397
#AT_START_398
at_fn_group_banner 398 'mat5_compressed_read_be.at:1697' \
  "Read structure array with character fields" "     " 6
at_xfail=no
(
  $as_echo "398. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1698" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1698"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1740: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var50" "mat5_compressed_read_be.at:1740"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1740"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_398
#AT_START_399
at_fn_group_banner 399 'mat5_compressed_read_be.at:1743' \
  "Read empty cell array" "                          " 6
at_xfail=no
(
  $as_echo "399. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1744" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1744"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1754: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var51"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var51" "mat5_compressed_read_be.at:1754"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var51
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var51
      Rank: 2
Dimensions: 0 x 0
Class Type: Cell Array
 Data Type: Cell Array
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1754"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_399
#AT_START_400
at_fn_group_banner 400 'mat5_compressed_read_be.at:1757' \
  "Read cell array with empty arrays" "              " 6
at_xfail=no
(
  $as_echo "400. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1758" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1758"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1828: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var52" "mat5_compressed_read_be.at:1828"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
}
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1828"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_400
#AT_START_401
at_fn_group_banner 401 'mat5_compressed_read_be.at:1831' \
  "Read cell array with double-precision arrays" "   " 6
at_xfail=no
(
  $as_echo "401. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1832" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1832"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1893: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var53" "mat5_compressed_read_be.at:1893"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1893"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_401
#AT_START_402
at_fn_group_banner 402 'mat5_compressed_read_be.at:1896' \
  "Read cell array with single-precision arrays" "   " 6
at_xfail=no
(
  $as_echo "402. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1897" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1897"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:1958: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var54" "mat5_compressed_read_be.at:1958"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:1958"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_402
#AT_START_403
at_fn_group_banner 403 'mat5_compressed_read_be.at:1961' \
  "Read cell array with 64-bit integer arrays" "     " 6
at_xfail=no
(
  $as_echo "403. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:1962" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:1962"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2023: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var55" "mat5_compressed_read_be.at:2023"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2023"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_403
#AT_START_404
at_fn_group_banner 404 'mat5_compressed_read_be.at:2026' \
  "Read cell array with 64-bit unsigned integer arrays" "" 6
at_xfail=no
(
  $as_echo "404. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2027" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2027"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2088: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var56" "mat5_compressed_read_be.at:2088"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2088"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_404
#AT_START_405
at_fn_group_banner 405 'mat5_compressed_read_be.at:2091' \
  "Read cell array with 32-bit integer arrays" "     " 6
at_xfail=no
(
  $as_echo "405. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2092" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2092"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2153: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var57" "mat5_compressed_read_be.at:2153"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_405
#AT_START_406
at_fn_group_banner 406 'mat5_compressed_read_be.at:2156' \
  "Read cell array with 32-bit unsigned integer arrays" "" 6
at_xfail=no
(
  $as_echo "406. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2157" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2157"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2218: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var58" "mat5_compressed_read_be.at:2218"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2218"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_406
#AT_START_407
at_fn_group_banner 407 'mat5_compressed_read_be.at:2221' \
  "Read cell array with 16-bit integer arrays" "     " 6
at_xfail=no
(
  $as_echo "407. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2222" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2222"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2283: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var59" "mat5_compressed_read_be.at:2283"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2283"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_407
#AT_START_408
at_fn_group_banner 408 'mat5_compressed_read_be.at:2286' \
  "Read cell array with 16-bit unsigned integer arrays" "" 6
at_xfail=no
(
  $as_echo "408. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2287" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2287"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2348: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var60" "mat5_compressed_read_be.at:2348"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2348"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_408
#AT_START_409
at_fn_group_banner 409 'mat5_compressed_read_be.at:2351' \
  "Read cell array with 8-bit integer arrays" "      " 6
at_xfail=no
(
  $as_echo "409. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2352" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2352"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2413: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var61" "mat5_compressed_read_be.at:2413"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2413"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_409
#AT_START_410
at_fn_group_banner 410 'mat5_compressed_read_be.at:2416' \
  "Read cell array with 8-bit unsigned integer arrays" "" 6
at_xfail=no
(
  $as_echo "410. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2417" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2417"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2478: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var62" "mat5_compressed_read_be.at:2478"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2478"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_410
#AT_START_411
at_fn_group_banner 411 'mat5_compressed_read_be.at:2481' \
  "Read cell array with logical arrays" "            " 6
at_xfail=no
(
  $as_echo "411. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2482" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2482"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2534: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var92" "mat5_compressed_read_be.at:2534"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2534"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_411
#AT_START_412
at_fn_group_banner 412 'mat5_compressed_read_be.at:2537' \
  "Read cell array with double-precision sparse arrays" "" 6
at_xfail=no
(
  $as_echo "412. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2538" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2538"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2588: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var63" "mat5_compressed_read_be.at:2588"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_412
#AT_START_413
at_fn_group_banner 413 'mat5_compressed_read_be.at:2591' \
  "Read cell array with complex double-precision sparse arrays" "" 6
at_xfail=no
(
  $as_echo "413. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2592" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2592"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2642: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var64" "mat5_compressed_read_be.at:2642"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2642"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_413
#AT_START_414
at_fn_group_banner 414 'mat5_compressed_read_be.at:2645' \
  "Read cell array with character arrays" "          " 6
at_xfail=no
(
  $as_echo "414. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2646" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2646"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2684: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var65" "mat5_compressed_read_be.at:2684"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2684"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_414
#AT_START_415
at_fn_group_banner 415 'mat5_compressed_read_be.at:2687' \
  "Read cell array with empty structure arrays" "    " 6
at_xfail=no
(
  $as_echo "415. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2688" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2688"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:2745: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var66" "mat5_compressed_read_be.at:2745"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:2745"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_415
#AT_START_416
at_fn_group_banner 416 'mat5_compressed_read_be.at:2748' \
  "Read cell array with structure arrays (numeric fields)" "" 6
at_xfail=no
(
  $as_echo "416. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:2749" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:2749"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:3599: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var67" "mat5_compressed_read_be.at:3599"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:3599"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_416
#AT_START_417
at_fn_group_banner 417 'mat5_compressed_read_be.at:3602' \
  "Read cell array with structure arrays (sparse fields)" "" 6
at_xfail=no
(
  $as_echo "417. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:3603" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:3603"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:3709: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var68" "mat5_compressed_read_be.at:3709"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:3709"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_417
#AT_START_418
at_fn_group_banner 418 'mat5_compressed_read_be.at:3712' \
  "Read cell array structure arrays (character fields)" "" 6
at_xfail=no
(
  $as_echo "418. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_read_be.at:3713" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_read_be.at:3713"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_read_be.at:3767: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_compressed_be.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var69" "mat5_compressed_read_be.at:3767"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_compressed_be.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_read_be.at:3767"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_418
#AT_START_419
at_fn_group_banner 419 'mat5_compressed_readslab_be.at:1' \
  "Read slab of double-precision array" "            " 6
at_xfail=no
(
  $as_echo "419. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:3" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:3"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:31: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:31"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:31"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_419
#AT_START_420
at_fn_group_banner 420 'mat5_compressed_readslab_be.at:34' \
  "Read slab of single-precision array" "            " 6
at_xfail=no
(
  $as_echo "420. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:36" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:36"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:64: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:64"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_420
#AT_START_421
at_fn_group_banner 421 'mat5_compressed_readslab_be.at:67' \
  "Read slab of 64-bit integer array" "              " 6
at_xfail=no
(
  $as_echo "421. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:69" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:69"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:97: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:97"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:97"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_421
#AT_START_422
at_fn_group_banner 422 'mat5_compressed_readslab_be.at:100' \
  "Read slab of 64-bit unsigned integer array" "     " 6
at_xfail=no
(
  $as_echo "422. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:102" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:102"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:130: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:130"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:130"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_422
#AT_START_423
at_fn_group_banner 423 'mat5_compressed_readslab_be.at:133' \
  "Read slab of 32-bit integer array" "              " 6
at_xfail=no
(
  $as_echo "423. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:135" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:135"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:163: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:163"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_423
#AT_START_424
at_fn_group_banner 424 'mat5_compressed_readslab_be.at:166' \
  "Read slab of 32-bit unsigned integer array" "     " 6
at_xfail=no
(
  $as_echo "424. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:168" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:168"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:196: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:196"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:196"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_424
#AT_START_425
at_fn_group_banner 425 'mat5_compressed_readslab_be.at:199' \
  "Read slab of 16-bit integer array" "              " 6
at_xfail=no
(
  $as_echo "425. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:201" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:201"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:229: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:229"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:229"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_425
#AT_START_426
at_fn_group_banner 426 'mat5_compressed_readslab_be.at:232' \
  "Read slab of 16-bit unsigned integer array" "     " 6
at_xfail=no
(
  $as_echo "426. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:234" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:234"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:262: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:262"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_426
#AT_START_427
at_fn_group_banner 427 'mat5_compressed_readslab_be.at:265' \
  "Read slab of 8-bit integer array" "               " 6
at_xfail=no
(
  $as_echo "427. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:267" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:267"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:295: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:295"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:295"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_427
#AT_START_428
at_fn_group_banner 428 'mat5_compressed_readslab_be.at:298' \
  "Read slab of 8-bit unsigned integer array" "      " 6
at_xfail=no
(
  $as_echo "428. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:300" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:300"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:328: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:328"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:328"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_428
#AT_START_429
at_fn_group_banner 429 'mat5_compressed_readslab_be.at:331' \
  "Read slab of double-precision complex array" "    " 6
at_xfail=no
(
  $as_echo "429. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:333" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:333"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:361: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:361"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_429
#AT_START_430
at_fn_group_banner 430 'mat5_compressed_readslab_be.at:364' \
  "Read slab of single-precision complex array" "    " 6
at_xfail=no
(
  $as_echo "430. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:366" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:366"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:394: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:394"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_430
#AT_START_431
at_fn_group_banner 431 'mat5_compressed_readslab_be.at:397' \
  "Read slab of 64-bit integer complex array" "      " 6
at_xfail=no
(
  $as_echo "431. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:399" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:399"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:427: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:427"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_431
#AT_START_432
at_fn_group_banner 432 'mat5_compressed_readslab_be.at:430' \
  "Read slab of 64-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "432. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:432" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:432"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:460: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:460"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_432
#AT_START_433
at_fn_group_banner 433 'mat5_compressed_readslab_be.at:463' \
  "Read slab of 32-bit integer complex array" "      " 6
at_xfail=no
(
  $as_echo "433. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:465" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:465"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:493: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:493"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:493"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_433
#AT_START_434
at_fn_group_banner 434 'mat5_compressed_readslab_be.at:496' \
  "Read slab of 32-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "434. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:498" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:498"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:526: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:526"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:526"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_434
#AT_START_435
at_fn_group_banner 435 'mat5_compressed_readslab_be.at:529' \
  "Read slab of 16-bit integer complex array" "      " 6
at_xfail=no
(
  $as_echo "435. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:531" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:531"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:559: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:559"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:559"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_435
#AT_START_436
at_fn_group_banner 436 'mat5_compressed_readslab_be.at:562' \
  "Read slab of 16-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "436. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:564" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:564"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:592: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:592"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:592"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_436
#AT_START_437
at_fn_group_banner 437 'mat5_compressed_readslab_be.at:595' \
  "Read slab of 8-bit integer complex array" "       " 6
at_xfail=no
(
  $as_echo "437. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:597" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:597"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:625: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:625"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_437
#AT_START_438
at_fn_group_banner 438 'mat5_compressed_readslab_be.at:628' \
  "Read slab of 8-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "438. $at_setup_line: testing $at_desc ..."
  $at_traceon


$as_echo "mat5_compressed_readslab_be.at:630" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_readslab_be.at:630"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:658: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat5_compressed_readslab_be.at:658"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_438
#AT_START_439
at_fn_group_banner 439 'mat5_compressed_readslab_be.at:661' \
  "Read linear slab of double-precision array" "     " 6
at_xfail=no
(
  $as_echo "439. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:691: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var70\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:691"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:691"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_439
#AT_START_440
at_fn_group_banner 440 'mat5_compressed_readslab_be.at:694' \
  "Read linear slab of single-precision array" "     " 6
at_xfail=no
(
  $as_echo "440. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:724: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var71\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:724"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:724"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_440
#AT_START_441
at_fn_group_banner 441 'mat5_compressed_readslab_be.at:727' \
  "Read linear slab of 64-bit integer array" "       " 6
at_xfail=no
(
  $as_echo "441. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:757: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var72\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:757"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:757"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_441
#AT_START_442
at_fn_group_banner 442 'mat5_compressed_readslab_be.at:760' \
  "Read linear slab of 64-bit unsigned integer array" "" 6
at_xfail=no
(
  $as_echo "442. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:790: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var73\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:790"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:790"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_442
#AT_START_443
at_fn_group_banner 443 'mat5_compressed_readslab_be.at:793' \
  "Read linear slab of 32-bit integer array" "       " 6
at_xfail=no
(
  $as_echo "443. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:823: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var74\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:823"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:823"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_443
#AT_START_444
at_fn_group_banner 444 'mat5_compressed_readslab_be.at:826' \
  "Read linear slab of 32-bit unsigned integer array" "" 6
at_xfail=no
(
  $as_echo "444. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:856: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var75\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:856"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:856"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_444
#AT_START_445
at_fn_group_banner 445 'mat5_compressed_readslab_be.at:859' \
  "Read linear slab of 16-bit integer array" "       " 6
at_xfail=no
(
  $as_echo "445. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:889: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var76\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:889"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:889"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_445
#AT_START_446
at_fn_group_banner 446 'mat5_compressed_readslab_be.at:892' \
  "Read linear slab of 16-bit unsigned integer array" "" 6
at_xfail=no
(
  $as_echo "446. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:922: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var77\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:922"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:922"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_446
#AT_START_447
at_fn_group_banner 447 'mat5_compressed_readslab_be.at:925' \
  "Read linear slab of 8-bit integer array" "        " 6
at_xfail=no
(
  $as_echo "447. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:955: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var78\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:955"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:955"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_447
#AT_START_448
at_fn_group_banner 448 'mat5_compressed_readslab_be.at:958' \
  "Read linear slab of 8-bit unsigned integer array" "" 6
at_xfail=no
(
  $as_echo "448. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:988: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var79\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:988"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:988"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_448
#AT_START_449
at_fn_group_banner 449 'mat5_compressed_readslab_be.at:991' \
  "Read linear slab of double-precision complex array" "" 6
at_xfail=no
(
  $as_echo "449. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1021: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var80\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1021"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1021"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_449
#AT_START_450
at_fn_group_banner 450 'mat5_compressed_readslab_be.at:1024' \
  "Read linear slab of single-precision complex array" "" 6
at_xfail=no
(
  $as_echo "450. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1054: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var81\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1054"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1054"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_450
#AT_START_451
at_fn_group_banner 451 'mat5_compressed_readslab_be.at:1057' \
  "Read linear slab of 64-bit integer complex array" "" 6
at_xfail=no
(
  $as_echo "451. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1087: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var82\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1087"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1087"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_451
#AT_START_452
at_fn_group_banner 452 'mat5_compressed_readslab_be.at:1090' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "452. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1120: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var83\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1120"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1120"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_452
#AT_START_453
at_fn_group_banner 453 'mat5_compressed_readslab_be.at:1123' \
  "Read linear slab of 32-bit integer complex array" "" 6
at_xfail=no
(
  $as_echo "453. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1153: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var84\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1153"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1153"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_453
#AT_START_454
at_fn_group_banner 454 'mat5_compressed_readslab_be.at:1156' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "454. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1186: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var85\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1186"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_454
#AT_START_455
at_fn_group_banner 455 'mat5_compressed_readslab_be.at:1189' \
  "Read linear slab of 16-bit integer complex array" "" 6
at_xfail=no
(
  $as_echo "455. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1219: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var86\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1219"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1219"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_455
#AT_START_456
at_fn_group_banner 456 'mat5_compressed_readslab_be.at:1222' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "456. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1252: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var87\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1252"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1252"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_456
#AT_START_457
at_fn_group_banner 457 'mat5_compressed_readslab_be.at:1255' \
  "Read linear slab of 8-bit integer complex array" "" 6
at_xfail=no
(
  $as_echo "457. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1285: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var88\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1285"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1285"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_457
#AT_START_458
at_fn_group_banner 458 'mat5_compressed_readslab_be.at:1288' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 6
at_xfail=no
(
  $as_echo "458. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat5_compressed_readslab_be.at:1318: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_compressed_be.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var89\\(3257:1111:end\\)" "mat5_compressed_readslab_be.at:1318"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_compressed_be.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_readslab_be.at:1318"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_458
#AT_START_459
at_fn_group_banner 459 'mat73_read_le.at:27' \
  "Read 2D double-precision array" "                 " 7
at_xfail=no
(
  $as_echo "459. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:28: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:28"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:28"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:42: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var1" "mat73_read_le.at:42"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_459
#AT_START_460
at_fn_group_banner 460 'mat73_read_le.at:45' \
  "Read 2D single-precision array" "                 " 7
at_xfail=no
(
  $as_echo "460. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:46: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:46"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:60: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var2" "mat73_read_le.at:60"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:60"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_460
#AT_START_461
at_fn_group_banner 461 'mat73_read_le.at:63' \
  "Read 2D 64-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "461. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:64: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:64"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:78: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var3" "mat73_read_le.at:78"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:78"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_461
#AT_START_462
at_fn_group_banner 462 'mat73_read_le.at:81' \
  "Read 2D 64-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "462. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:82: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:82"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:82"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:96: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var4" "mat73_read_le.at:96"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_462
#AT_START_463
at_fn_group_banner 463 'mat73_read_le.at:99' \
  "Read 2D 32-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "463. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:100: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:100"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:100"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:114: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var5" "mat73_read_le.at:114"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:114"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_463
#AT_START_464
at_fn_group_banner 464 'mat73_read_le.at:117' \
  "Read 2D 32-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "464. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:118: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:118"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:118"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:132: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var6" "mat73_read_le.at:132"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_464
#AT_START_465
at_fn_group_banner 465 'mat73_read_le.at:135' \
  "Read 2D 16-bit integer array" "                   " 7
at_xfail=no
(
  $as_echo "465. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:136: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:136"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:136"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:150: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var7" "mat73_read_le.at:150"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_465
#AT_START_466
at_fn_group_banner 466 'mat73_read_le.at:153' \
  "Read 2D 16-bit unsigned integer array" "          " 7
at_xfail=no
(
  $as_echo "466. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:154: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:154"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:168: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var8" "mat73_read_le.at:168"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_466
#AT_START_467
at_fn_group_banner 467 'mat73_read_le.at:171' \
  "Read 2D 8-bit integer array" "                    " 7
at_xfail=no
(
  $as_echo "467. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:172: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:172"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:172"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:186: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var9" "mat73_read_le.at:186"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_467
#AT_START_468
at_fn_group_banner 468 'mat73_read_le.at:189' \
  "Read 2D 8-bit unsigned integer array" "           " 7
at_xfail=no
(
  $as_echo "468. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:190: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:190"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:190"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:204: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var10" "mat73_read_le.at:204"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_468
#AT_START_469
at_fn_group_banner 469 'mat73_read_le.at:207' \
  "Read 2D double-precision complex array" "         " 7
at_xfail=no
(
  $as_echo "469. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:208: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:208"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:208"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var11" "mat73_read_le.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_469
#AT_START_470
at_fn_group_banner 470 'mat73_read_le.at:225' \
  "Read 2D single-precision complex array" "         " 7
at_xfail=no
(
  $as_echo "470. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:226: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:226"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:226"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:240: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var12" "mat73_read_le.at:240"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_470
#AT_START_471
at_fn_group_banner 471 'mat73_read_le.at:243' \
  "Read 2D 64-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "471. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:244: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:244"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:244"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:258: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var13" "mat73_read_le.at:258"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_471
#AT_START_472
at_fn_group_banner 472 'mat73_read_le.at:261' \
  "Read 2D 64-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "472. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:262: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:262"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:276: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var14" "mat73_read_le.at:276"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:276"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_472
#AT_START_473
at_fn_group_banner 473 'mat73_read_le.at:279' \
  "Read 2D 32-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "473. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:280: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:280"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:280"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:294: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var15" "mat73_read_le.at:294"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_473
#AT_START_474
at_fn_group_banner 474 'mat73_read_le.at:297' \
  "Read 2D 32-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "474. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:298: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:298"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:298"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:312: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var16" "mat73_read_le.at:312"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_474
#AT_START_475
at_fn_group_banner 475 'mat73_read_le.at:315' \
  "Read 2D 16-bit integer complex array" "           " 7
at_xfail=no
(
  $as_echo "475. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:316: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:316"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:316"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var17" "mat73_read_le.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_475
#AT_START_476
at_fn_group_banner 476 'mat73_read_le.at:333' \
  "Read 2D 16-bit unsigned integer complex array" "  " 7
at_xfail=no
(
  $as_echo "476. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:334: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:334"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:334"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:348: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var18" "mat73_read_le.at:348"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:348"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_476
#AT_START_477
at_fn_group_banner 477 'mat73_read_le.at:351' \
  "Read 2D 8-bit integer complex array" "            " 7
at_xfail=no
(
  $as_echo "477. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:352: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:352"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:352"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:366: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var19" "mat73_read_le.at:366"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_477
#AT_START_478
at_fn_group_banner 478 'mat73_read_le.at:369' \
  "Read 2D 8-bit unsigned integer complex array" "   " 7
at_xfail=no
(
  $as_echo "478. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:370: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:370"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:370"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:384: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var20" "mat73_read_le.at:384"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:384"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_478
#AT_START_479
at_fn_group_banner 479 'mat73_read_le.at:387' \
  "Read 2D logical array" "                          " 7
at_xfail=no
(
  $as_echo "479. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:388: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:388"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:388"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:403: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var90" "mat73_read_le.at:403"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:403"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_479
#AT_START_480
at_fn_group_banner 480 'mat73_read_le.at:406' \
  "Read double-precision sparse array" "             " 7
at_xfail=no
(
  $as_echo "480. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:407: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:407"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:407"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:422: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var21" "mat73_read_le.at:422"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_480
#AT_START_481
at_fn_group_banner 481 'mat73_read_le.at:425' \
  "Read double-precision sparse complex array" "     " 7
at_xfail=no
(
  $as_echo "481. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:426: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:426"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:426"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var22" "mat73_read_le.at:441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_481
#AT_START_482
at_fn_group_banner 482 'mat73_read_le.at:444' \
  "Read empty array" "                               " 7
at_xfail=no
(
  $as_echo "482. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:445: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:445"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:445"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:453: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var23" "mat73_read_le.at:453"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:453"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_482
#AT_START_483
at_fn_group_banner 483 'mat73_read_le.at:456' \
  "Read 2D character array" "                        " 7
at_xfail=no
(
  $as_echo "483. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:457: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:457"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:457"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:471: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var24" "mat73_read_le.at:471"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:471"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_483
#AT_START_484
at_fn_group_banner 484 'mat73_read_le.at:474' \
  "Read empty structure array" "                     " 7
at_xfail=no
(
  $as_echo "484. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:475: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:475"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:475"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:485: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var25" "mat73_read_le.at:485"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:485"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_484
#AT_START_485
at_fn_group_banner 485 'mat73_read_le.at:488' \
  "Read empty structure array with fields" "         " 7
at_xfail=no
(
  $as_echo "485. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:489: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:489"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:489"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:503: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var26" "mat73_read_le.at:503"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:503"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_485
#AT_START_486
at_fn_group_banner 486 'mat73_read_le.at:506' \
  "Read structure array with empty fields" "         " 7
at_xfail=no
(
  $as_echo "486. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:507: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:507"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:507"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:541: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var27" "mat73_read_le.at:541"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:541"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_486
#AT_START_487
at_fn_group_banner 487 'mat73_read_le.at:544' \
  "Read structure array with double-precision fields" "" 7
at_xfail=no
(
  $as_echo "487. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:545: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:545"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:545"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:591: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var28" "mat73_read_le.at:591"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:591"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_487
#AT_START_488
at_fn_group_banner 488 'mat73_read_le.at:594' \
  "Read structure array with single-precision fields" "" 7
at_xfail=no
(
  $as_echo "488. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:595: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:595"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:595"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:641: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var29" "mat73_read_le.at:641"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:641"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_488
#AT_START_489
at_fn_group_banner 489 'mat73_read_le.at:644' \
  "Read structure array with 64-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "489. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:645: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:645"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:645"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:691: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var30" "mat73_read_le.at:691"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:691"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_489
#AT_START_490
at_fn_group_banner 490 'mat73_read_le.at:694' \
  "Read structure array with 64-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "490. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:695: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:695"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:695"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:741: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var31" "mat73_read_le.at:741"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:741"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_490
#AT_START_491
at_fn_group_banner 491 'mat73_read_le.at:744' \
  "Read structure array with 32-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "491. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:745: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:745"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:745"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:791: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var32" "mat73_read_le.at:791"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:791"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_491
#AT_START_492
at_fn_group_banner 492 'mat73_read_le.at:794' \
  "Read structure array with 32-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "492. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:795: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:795"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:795"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:841: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var33" "mat73_read_le.at:841"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:841"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_492
#AT_START_493
at_fn_group_banner 493 'mat73_read_le.at:844' \
  "Read structure array with 16-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "493. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:845: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:845"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:845"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:891: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var34" "mat73_read_le.at:891"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:891"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_493
#AT_START_494
at_fn_group_banner 494 'mat73_read_le.at:894' \
  "Read structure array with 16-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "494. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:895: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:895"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:895"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:941: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var35" "mat73_read_le.at:941"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:941"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_494
#AT_START_495
at_fn_group_banner 495 'mat73_read_le.at:944' \
  "Read structure array with 8-bit integer fields" " " 7
at_xfail=no
(
  $as_echo "495. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:945: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:945"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:945"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:991: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var36" "mat73_read_le.at:991"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:991"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_495
#AT_START_496
at_fn_group_banner 496 'mat73_read_le.at:994' \
  "Read structure array with 8-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "496. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:995: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:995"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:995"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1041: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var37" "mat73_read_le.at:1041"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1041"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_496
#AT_START_497
at_fn_group_banner 497 'mat73_read_le.at:1044' \
  "Read structure array with complex double-precision fields" "" 7
at_xfail=no
(
  $as_echo "497. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1045: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1045"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1045"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1091: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var38" "mat73_read_le.at:1091"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1091"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_497
#AT_START_498
at_fn_group_banner 498 'mat73_read_le.at:1094' \
  "Read structure array with complex single-precision fields" "" 7
at_xfail=no
(
  $as_echo "498. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1095: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1095"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1095"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1141: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var39" "mat73_read_le.at:1141"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1141"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_498
#AT_START_499
at_fn_group_banner 499 'mat73_read_le.at:1144' \
  "Read structure array with complex 64-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "499. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1145: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1145"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1145"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1191: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var40" "mat73_read_le.at:1191"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1191"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_499
#AT_START_500
at_fn_group_banner 500 'mat73_read_le.at:1194' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "500. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1195: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1195"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1195"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1241: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var41" "mat73_read_le.at:1241"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1241"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_500
#AT_START_501
at_fn_group_banner 501 'mat73_read_le.at:1244' \
  "Read structure array with complex 32-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "501. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1245: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1245"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1245"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1291: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var42" "mat73_read_le.at:1291"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1291"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_501
#AT_START_502
at_fn_group_banner 502 'mat73_read_le.at:1294' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "502. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1295: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1295"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1295"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1341: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var43" "mat73_read_le.at:1341"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1341"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_502
#AT_START_503
at_fn_group_banner 503 'mat73_read_le.at:1344' \
  "Read structure array with complex 16-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "503. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1345: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1345"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1345"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1391: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var44" "mat73_read_le.at:1391"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1391"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_503
#AT_START_504
at_fn_group_banner 504 'mat73_read_le.at:1394' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "504. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1395: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1395"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1395"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var45" "mat73_read_le.at:1441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_504
#AT_START_505
at_fn_group_banner 505 'mat73_read_le.at:1444' \
  "Read structure array with complex 8-bit integer fields" "" 7
at_xfail=no
(
  $as_echo "505. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1445: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1445"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1445"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1491: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var46" "mat73_read_le.at:1491"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1491"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_505
#AT_START_506
at_fn_group_banner 506 'mat73_read_le.at:1494' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 7
at_xfail=no
(
  $as_echo "506. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1495: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1495"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1495"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1541: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var47" "mat73_read_le.at:1541"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1541"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_506
#AT_START_507
at_fn_group_banner 507 'mat73_read_le.at:1544' \
  "Read structure array with logical fields" "       " 7
at_xfail=no
(
  $as_echo "507. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1545: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1545"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1545"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1601: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var91" "mat73_read_le.at:1601"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1601"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_507
#AT_START_508
at_fn_group_banner 508 'mat73_read_le.at:1604' \
  "Read structure array with double-precision sparse fields" "" 7
at_xfail=no
(
  $as_echo "508. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1605: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1605"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1605"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1657: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var48" "mat73_read_le.at:1657"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1657"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_508
#AT_START_509
at_fn_group_banner 509 'mat73_read_le.at:1660' \
  "Read structure array with complex double-precision sparse fields" "" 7
at_xfail=no
(
  $as_echo "509. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1661: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1661"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1661"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1713: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var49" "mat73_read_le.at:1713"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1713"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_509
#AT_START_510
at_fn_group_banner 510 'mat73_read_le.at:1716' \
  "Read structure array with character fields" "     " 7
at_xfail=no
(
  $as_echo "510. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1717: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1717"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1717"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1759: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var50" "mat73_read_le.at:1759"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1759"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_510
#AT_START_511
at_fn_group_banner 511 'mat73_read_le.at:1762' \
  "Read empty cell array" "                          " 7
at_xfail=no
(
  $as_echo "511. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1763: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1763"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1763"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1773: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var51"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var51" "mat73_read_le.at:1773"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var51
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var51
      Rank: 2
Dimensions: 0 x 0
Class Type: Cell Array
 Data Type: Cell Array
{
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1773"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_511
#AT_START_512
at_fn_group_banner 512 'mat73_read_le.at:1776' \
  "Read cell array with empty arrays" "              " 7
at_xfail=no
(
  $as_echo "512. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1777: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1777"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1777"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1827: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var52" "mat73_read_le.at:1827"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1827"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_512
#AT_START_513
at_fn_group_banner 513 'mat73_read_le.at:1830' \
  "Read cell array with double-precision arrays" "   " 7
at_xfail=no
(
  $as_echo "513. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1831: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1831"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1831"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1892: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var53" "mat73_read_le.at:1892"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1892"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_513
#AT_START_514
at_fn_group_banner 514 'mat73_read_le.at:1895' \
  "Read cell array with single-precision arrays" "   " 7
at_xfail=no
(
  $as_echo "514. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1896: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1896"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1896"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1957: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var54" "mat73_read_le.at:1957"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1957"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_514
#AT_START_515
at_fn_group_banner 515 'mat73_read_le.at:1960' \
  "Read cell array with 64-bit integer arrays" "     " 7
at_xfail=no
(
  $as_echo "515. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:1961: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:1961"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:1961"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2022: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var55" "mat73_read_le.at:2022"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2022"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_515
#AT_START_516
at_fn_group_banner 516 'mat73_read_le.at:2025' \
  "Read cell array with 64-bit unsigned integer arrays" "" 7
at_xfail=no
(
  $as_echo "516. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2026: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2026"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2026"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2087: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var56" "mat73_read_le.at:2087"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2087"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_516
#AT_START_517
at_fn_group_banner 517 'mat73_read_le.at:2090' \
  "Read cell array with 32-bit integer arrays" "     " 7
at_xfail=no
(
  $as_echo "517. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2091: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2091"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2091"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2152: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var57" "mat73_read_le.at:2152"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2152"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_517
#AT_START_518
at_fn_group_banner 518 'mat73_read_le.at:2155' \
  "Read cell array with 32-bit unsigned integer arrays" "" 7
at_xfail=no
(
  $as_echo "518. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2156: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2156"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2156"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2217: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var58" "mat73_read_le.at:2217"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2217"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_518
#AT_START_519
at_fn_group_banner 519 'mat73_read_le.at:2220' \
  "Read cell array with 16-bit integer arrays" "     " 7
at_xfail=no
(
  $as_echo "519. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2221: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2221"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2221"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2282: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var59" "mat73_read_le.at:2282"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2282"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_519
#AT_START_520
at_fn_group_banner 520 'mat73_read_le.at:2285' \
  "Read cell array with 16-bit unsigned integer arrays" "" 7
at_xfail=no
(
  $as_echo "520. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2286: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2286"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2286"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2347: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var60" "mat73_read_le.at:2347"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2347"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_520
#AT_START_521
at_fn_group_banner 521 'mat73_read_le.at:2350' \
  "Read cell array with 8-bit integer arrays" "      " 7
at_xfail=no
(
  $as_echo "521. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2351: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2351"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2351"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2412: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var61" "mat73_read_le.at:2412"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2412"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_521
#AT_START_522
at_fn_group_banner 522 'mat73_read_le.at:2415' \
  "Read cell array with 8-bit unsigned integer arrays" "" 7
at_xfail=no
(
  $as_echo "522. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2416: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2416"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2416"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2477: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var62" "mat73_read_le.at:2477"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2477"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_522
#AT_START_523
at_fn_group_banner 523 'mat73_read_le.at:2480' \
  "Read cell array with logical arrays" "            " 7
at_xfail=no
(
  $as_echo "523. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2481: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2481"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2481"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2533: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var92" "mat73_read_le.at:2533"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2533"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_523
#AT_START_524
at_fn_group_banner 524 'mat73_read_le.at:2536' \
  "Read cell array with double-precision sparse arrays" "" 7
at_xfail=no
(
  $as_echo "524. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2537: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2537"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2537"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2587: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var63" "mat73_read_le.at:2587"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2587"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_524
#AT_START_525
at_fn_group_banner 525 'mat73_read_le.at:2590' \
  "Read cell array with complex double-precision sparse arrays" "" 7
at_xfail=no
(
  $as_echo "525. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2591: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2591"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2591"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2641: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var64" "mat73_read_le.at:2641"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2641"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_525
#AT_START_526
at_fn_group_banner 526 'mat73_read_le.at:2644' \
  "Read cell array with character arrays" "          " 7
at_xfail=no
(
  $as_echo "526. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2645: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2645"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2645"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2683: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var65" "mat73_read_le.at:2683"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2683"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_526
#AT_START_527
at_fn_group_banner 527 'mat73_read_le.at:2686' \
  "Read cell array with empty structure arrays" "    " 7
at_xfail=no
(
  $as_echo "527. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2687: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2687"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2687"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2743: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var66" "mat73_read_le.at:2743"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2743"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_527
#AT_START_528
at_fn_group_banner 528 'mat73_read_le.at:2746' \
  "Read cell array with structure arrays (numeric fields)" "" 7
at_xfail=no
(
  $as_echo "528. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:2747: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:2747"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:2747"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:3597: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var67" "mat73_read_le.at:3597"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:3597"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_528
#AT_START_529
at_fn_group_banner 529 'mat73_read_le.at:3600' \
  "Read cell array with structure arrays (sparse fields)" "" 7
at_xfail=no
(
  $as_echo "529. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:3601: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:3601"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:3601"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:3707: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var68" "mat73_read_le.at:3707"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:3707"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_529
#AT_START_530
at_fn_group_banner 530 'mat73_read_le.at:3710' \
  "Read cell array structure arrays (character fields)" "" 7
at_xfail=no
(
  $as_echo "530. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:3711: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_le.at:3711"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:3711"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_le.at:3765: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_le.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var69" "mat73_read_le.at:3765"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_le.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_le.at:3765"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_530
#AT_START_531
at_fn_group_banner 531 'mat73_readslab_le.at:1' \
  "Read slab of double-precision array" "            " 7
at_xfail=no
(
  $as_echo "531. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:3: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:3"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:3"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:31: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:31"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:31"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_531
#AT_START_532
at_fn_group_banner 532 'mat73_readslab_le.at:34' \
  "Read slab of single-precision array" "            " 7
at_xfail=no
(
  $as_echo "532. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:36: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:36"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:36"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:64: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:64"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_532
#AT_START_533
at_fn_group_banner 533 'mat73_readslab_le.at:67' \
  "Read slab of 64-bit integer array" "              " 7
at_xfail=no
(
  $as_echo "533. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:69: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:69"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:69"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:97: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:97"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:97"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_533
#AT_START_534
at_fn_group_banner 534 'mat73_readslab_le.at:100' \
  "Read slab of 64-bit unsigned integer array" "     " 7
at_xfail=no
(
  $as_echo "534. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:102: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:102"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:102"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:130: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:130"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:130"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_534
#AT_START_535
at_fn_group_banner 535 'mat73_readslab_le.at:133' \
  "Read slab of 32-bit integer array" "              " 7
at_xfail=no
(
  $as_echo "535. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:135: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:135"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:135"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:163: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:163"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_535
#AT_START_536
at_fn_group_banner 536 'mat73_readslab_le.at:166' \
  "Read slab of 32-bit unsigned integer array" "     " 7
at_xfail=no
(
  $as_echo "536. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:168: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:168"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:196: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:196"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:196"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_536
#AT_START_537
at_fn_group_banner 537 'mat73_readslab_le.at:199' \
  "Read slab of 16-bit integer array" "              " 7
at_xfail=no
(
  $as_echo "537. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:201: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:201"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:201"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:229: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:229"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:229"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_537
#AT_START_538
at_fn_group_banner 538 'mat73_readslab_le.at:232' \
  "Read slab of 16-bit unsigned integer array" "     " 7
at_xfail=no
(
  $as_echo "538. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:234: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:234"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:234"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:262: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:262"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_538
#AT_START_539
at_fn_group_banner 539 'mat73_readslab_le.at:265' \
  "Read slab of 8-bit integer array" "               " 7
at_xfail=no
(
  $as_echo "539. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:267: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:267"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:267"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:295: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:295"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:295"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_539
#AT_START_540
at_fn_group_banner 540 'mat73_readslab_le.at:298' \
  "Read slab of 8-bit unsigned integer array" "      " 7
at_xfail=no
(
  $as_echo "540. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:300: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:300"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:300"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:328: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:328"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:328"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_540
#AT_START_541
at_fn_group_banner 541 'mat73_readslab_le.at:331' \
  "Read slab of double-precision complex array" "    " 7
at_xfail=no
(
  $as_echo "541. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:333: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:333"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:333"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:361: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:361"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_541
#AT_START_542
at_fn_group_banner 542 'mat73_readslab_le.at:364' \
  "Read slab of single-precision complex array" "    " 7
at_xfail=no
(
  $as_echo "542. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:366: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:366"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:394: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:394"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_542
#AT_START_543
at_fn_group_banner 543 'mat73_readslab_le.at:397' \
  "Read slab of 64-bit integer complex array" "      " 7
at_xfail=no
(
  $as_echo "543. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:399: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:399"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:399"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:427: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:427"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_543
#AT_START_544
at_fn_group_banner 544 'mat73_readslab_le.at:430' \
  "Read slab of 64-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "544. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:432: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:432"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:432"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:460: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:460"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_544
#AT_START_545
at_fn_group_banner 545 'mat73_readslab_le.at:463' \
  "Read slab of 32-bit integer complex array" "      " 7
at_xfail=no
(
  $as_echo "545. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:465: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:465"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:465"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:493: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:493"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:493"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_545
#AT_START_546
at_fn_group_banner 546 'mat73_readslab_le.at:496' \
  "Read slab of 32-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "546. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:498: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:498"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:498"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:526: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:526"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:526"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_546
#AT_START_547
at_fn_group_banner 547 'mat73_readslab_le.at:529' \
  "Read slab of 16-bit integer complex array" "      " 7
at_xfail=no
(
  $as_echo "547. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:531: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:531"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:531"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:559: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:559"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:559"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_547
#AT_START_548
at_fn_group_banner 548 'mat73_readslab_le.at:562' \
  "Read slab of 16-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "548. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:564: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:564"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:564"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:592: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:592"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:592"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_548
#AT_START_549
at_fn_group_banner 549 'mat73_readslab_le.at:595' \
  "Read slab of 8-bit integer complex array" "       " 7
at_xfail=no
(
  $as_echo "549. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:597: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:597"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:597"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:625: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:625"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_549
#AT_START_550
at_fn_group_banner 550 'mat73_readslab_le.at:628' \
  "Read slab of 8-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "550. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:630: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:630"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:630"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:658: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_le.at:658"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_550
#AT_START_551
at_fn_group_banner 551 'mat73_readslab_le.at:661' \
  "Read linear slab of double-precision array" "     " 7
at_xfail=no
(
  $as_echo "551. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:663: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:663"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:663"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:692: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var70\\(3257:1111:end\\)" "mat73_readslab_le.at:692"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:692"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_551
#AT_START_552
at_fn_group_banner 552 'mat73_readslab_le.at:695' \
  "Read linear slab of single-precision array" "     " 7
at_xfail=no
(
  $as_echo "552. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:697: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:697"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:697"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:726: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var71\\(3257:1111:end\\)" "mat73_readslab_le.at:726"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:726"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_552
#AT_START_553
at_fn_group_banner 553 'mat73_readslab_le.at:729' \
  "Read linear slab of 64-bit integer array" "       " 7
at_xfail=no
(
  $as_echo "553. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:731: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:731"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:731"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:760: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var72\\(3257:1111:end\\)" "mat73_readslab_le.at:760"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:760"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_553
#AT_START_554
at_fn_group_banner 554 'mat73_readslab_le.at:763' \
  "Read linear slab of 64-bit unsigned integer array" "" 7
at_xfail=no
(
  $as_echo "554. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:765: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:765"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:765"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:794: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var73\\(3257:1111:end\\)" "mat73_readslab_le.at:794"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:794"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_554
#AT_START_555
at_fn_group_banner 555 'mat73_readslab_le.at:797' \
  "Read linear slab of 32-bit integer array" "       " 7
at_xfail=no
(
  $as_echo "555. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:799: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:799"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:799"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:828: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var74\\(3257:1111:end\\)" "mat73_readslab_le.at:828"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:828"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_555
#AT_START_556
at_fn_group_banner 556 'mat73_readslab_le.at:831' \
  "Read linear slab of 32-bit unsigned integer array" "" 7
at_xfail=no
(
  $as_echo "556. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:833: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:833"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:833"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:862: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var75\\(3257:1111:end\\)" "mat73_readslab_le.at:862"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:862"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_556
#AT_START_557
at_fn_group_banner 557 'mat73_readslab_le.at:865' \
  "Read linear slab of 16-bit integer array" "       " 7
at_xfail=no
(
  $as_echo "557. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:867: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:867"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:896: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var76\\(3257:1111:end\\)" "mat73_readslab_le.at:896"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:896"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_557
#AT_START_558
at_fn_group_banner 558 'mat73_readslab_le.at:899' \
  "Read linear slab of 16-bit unsigned integer array" "" 7
at_xfail=no
(
  $as_echo "558. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:901: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:901"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:901"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:930: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var77\\(3257:1111:end\\)" "mat73_readslab_le.at:930"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:930"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_558
#AT_START_559
at_fn_group_banner 559 'mat73_readslab_le.at:933' \
  "Read linear slab of 8-bit integer array" "        " 7
at_xfail=no
(
  $as_echo "559. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:935: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:935"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:935"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:964: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var78\\(3257:1111:end\\)" "mat73_readslab_le.at:964"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:964"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_559
#AT_START_560
at_fn_group_banner 560 'mat73_readslab_le.at:967' \
  "Read linear slab of 8-bit unsigned integer array" "" 7
at_xfail=no
(
  $as_echo "560. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:969: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:969"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:969"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:998: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var79\\(3257:1111:end\\)" "mat73_readslab_le.at:998"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:998"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_560
#AT_START_561
at_fn_group_banner 561 'mat73_readslab_le.at:1001' \
  "Read linear slab of double-precision complex array" "" 7
at_xfail=no
(
  $as_echo "561. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1003: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1003"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1003"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1032: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var80\\(3257:1111:end\\)" "mat73_readslab_le.at:1032"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1032"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_561
#AT_START_562
at_fn_group_banner 562 'mat73_readslab_le.at:1035' \
  "Read linear slab of single-precision complex array" "" 7
at_xfail=no
(
  $as_echo "562. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1037: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1037"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1037"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1066: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var81\\(3257:1111:end\\)" "mat73_readslab_le.at:1066"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1066"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_562
#AT_START_563
at_fn_group_banner 563 'mat73_readslab_le.at:1069' \
  "Read linear slab of 64-bit integer complex array" "" 7
at_xfail=no
(
  $as_echo "563. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1071: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1071"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1071"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1100: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var82\\(3257:1111:end\\)" "mat73_readslab_le.at:1100"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_563
#AT_START_564
at_fn_group_banner 564 'mat73_readslab_le.at:1103' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "564. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1105: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1105"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1105"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1134: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var83\\(3257:1111:end\\)" "mat73_readslab_le.at:1134"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1134"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_564
#AT_START_565
at_fn_group_banner 565 'mat73_readslab_le.at:1137' \
  "Read linear slab of 32-bit integer complex array" "" 7
at_xfail=no
(
  $as_echo "565. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1139: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1139"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1139"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1168: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var84\\(3257:1111:end\\)" "mat73_readslab_le.at:1168"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_565
#AT_START_566
at_fn_group_banner 566 'mat73_readslab_le.at:1171' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "566. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1173: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1173"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1173"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1202: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var85\\(3257:1111:end\\)" "mat73_readslab_le.at:1202"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1202"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_566
#AT_START_567
at_fn_group_banner 567 'mat73_readslab_le.at:1205' \
  "Read linear slab of 16-bit integer complex array" "" 7
at_xfail=no
(
  $as_echo "567. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1207: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1207"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1207"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1236: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var86\\(3257:1111:end\\)" "mat73_readslab_le.at:1236"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1236"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_567
#AT_START_568
at_fn_group_banner 568 'mat73_readslab_le.at:1239' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "568. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1241: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1241"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1241"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1270: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var87\\(3257:1111:end\\)" "mat73_readslab_le.at:1270"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1270"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_568
#AT_START_569
at_fn_group_banner 569 'mat73_readslab_le.at:1273' \
  "Read linear slab of 8-bit integer complex array" "" 7
at_xfail=no
(
  $as_echo "569. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1275: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1275"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1275"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1304: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var88\\(3257:1111:end\\)" "mat73_readslab_le.at:1304"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1304"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_569
#AT_START_570
at_fn_group_banner 570 'mat73_readslab_le.at:1307' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 7
at_xfail=no
(
  $as_echo "570. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1309: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_le.at:1309"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1309"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_le.at:1338: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_le.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var89\\(3257:1111:end\\)" "mat73_readslab_le.at:1338"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_le.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_le.at:1338"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_570
#AT_START_571
at_fn_group_banner 571 'mat73_read_be.at:27' \
  "Read 2D double-precision array" "                 " 8
at_xfail=no
(
  $as_echo "571. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:28: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:28"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:28"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:42: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var1" "mat73_read_be.at:42"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var1
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_571
#AT_START_572
at_fn_group_banner 572 'mat73_read_be.at:45' \
  "Read 2D single-precision array" "                 " 8
at_xfail=no
(
  $as_echo "572. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:46: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:46"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:60: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var2" "mat73_read_be.at:60"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var2
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:60"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_572
#AT_START_573
at_fn_group_banner 573 'mat73_read_be.at:63' \
  "Read 2D 64-bit integer array" "                   " 8
at_xfail=no
(
  $as_echo "573. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:64: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:64"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:78: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var3" "mat73_read_be.at:78"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var3
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:78"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_573
#AT_START_574
at_fn_group_banner 574 'mat73_read_be.at:81' \
  "Read 2D 64-bit unsigned integer array" "          " 8
at_xfail=no
(
  $as_echo "574. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:82: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:82"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:82"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:96: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var4" "mat73_read_be.at:96"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var4
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_574
#AT_START_575
at_fn_group_banner 575 'mat73_read_be.at:99' \
  "Read 2D 32-bit integer array" "                   " 8
at_xfail=no
(
  $as_echo "575. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:100: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:100"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:100"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:114: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var5"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var5" "mat73_read_be.at:114"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var5
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var5
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:114"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_575
#AT_START_576
at_fn_group_banner 576 'mat73_read_be.at:117' \
  "Read 2D 32-bit unsigned integer array" "          " 8
at_xfail=no
(
  $as_echo "576. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:118: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:118"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:118"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:132: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var6"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var6" "mat73_read_be.at:132"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var6
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var6
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_576
#AT_START_577
at_fn_group_banner 577 'mat73_read_be.at:135' \
  "Read 2D 16-bit integer array" "                   " 8
at_xfail=no
(
  $as_echo "577. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:136: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:136"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:136"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:150: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var7"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var7" "mat73_read_be.at:150"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var7
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var7
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:150"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_577
#AT_START_578
at_fn_group_banner 578 'mat73_read_be.at:153' \
  "Read 2D 16-bit unsigned integer array" "          " 8
at_xfail=no
(
  $as_echo "578. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:154: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:154"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:168: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var8"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var8" "mat73_read_be.at:168"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var8
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var8
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_578
#AT_START_579
at_fn_group_banner 579 'mat73_read_be.at:171' \
  "Read 2D 8-bit integer array" "                    " 8
at_xfail=no
(
  $as_echo "579. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:172: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:172"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:172"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:186: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var9"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var9" "mat73_read_be.at:186"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var9
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var9
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:186"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_579
#AT_START_580
at_fn_group_banner 580 'mat73_read_be.at:189' \
  "Read 2D 8-bit unsigned integer array" "           " 8
at_xfail=no
(
  $as_echo "580. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:190: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:190"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:190"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:204: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var10"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var10" "mat73_read_be.at:204"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var10
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var10
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 5 9 13 17 
2 6 10 14 18 
3 7 11 15 19 
4 8 12 16 20 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_580
#AT_START_581
at_fn_group_banner 581 'mat73_read_be.at:207' \
  "Read 2D double-precision complex array" "         " 8
at_xfail=no
(
  $as_echo "581. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:208: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:208"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:208"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:222: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var11"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var11" "mat73_read_be.at:222"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var11
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var11
      Rank: 2
Dimensions: 4 x 5
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_581
#AT_START_582
at_fn_group_banner 582 'mat73_read_be.at:225' \
  "Read 2D single-precision complex array" "         " 8
at_xfail=no
(
  $as_echo "582. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:226: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:226"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:226"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:240: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var12"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var12" "mat73_read_be.at:240"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var12
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var12
      Rank: 2
Dimensions: 4 x 5
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:240"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_582
#AT_START_583
at_fn_group_banner 583 'mat73_read_be.at:243' \
  "Read 2D 64-bit integer complex array" "           " 8
at_xfail=no
(
  $as_echo "583. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:244: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:244"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:244"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:258: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var13"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var13" "mat73_read_be.at:258"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var13
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var13
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_583
#AT_START_584
at_fn_group_banner 584 'mat73_read_be.at:261' \
  "Read 2D 64-bit unsigned integer complex array" "  " 8
at_xfail=no
(
  $as_echo "584. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:262: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:262"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:276: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var14"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var14" "mat73_read_be.at:276"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var14
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var14
      Rank: 2
Dimensions: 4 x 5
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:276"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_584
#AT_START_585
at_fn_group_banner 585 'mat73_read_be.at:279' \
  "Read 2D 32-bit integer complex array" "           " 8
at_xfail=no
(
  $as_echo "585. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:280: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:280"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:280"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:294: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var15"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var15" "mat73_read_be.at:294"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var15
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var15
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_585
#AT_START_586
at_fn_group_banner 586 'mat73_read_be.at:297' \
  "Read 2D 32-bit unsigned integer complex array" "  " 8
at_xfail=no
(
  $as_echo "586. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:298: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:298"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:298"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:312: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var16"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var16" "mat73_read_be.at:312"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var16
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var16
      Rank: 2
Dimensions: 4 x 5
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_586
#AT_START_587
at_fn_group_banner 587 'mat73_read_be.at:315' \
  "Read 2D 16-bit integer complex array" "           " 8
at_xfail=no
(
  $as_echo "587. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:316: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:316"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:316"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:330: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var17"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var17" "mat73_read_be.at:330"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var17
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var17
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:330"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_587
#AT_START_588
at_fn_group_banner 588 'mat73_read_be.at:333' \
  "Read 2D 16-bit unsigned integer complex array" "  " 8
at_xfail=no
(
  $as_echo "588. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:334: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:334"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:334"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:348: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var18"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var18" "mat73_read_be.at:348"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var18
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var18
      Rank: 2
Dimensions: 4 x 5
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:348"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_588
#AT_START_589
at_fn_group_banner 589 'mat73_read_be.at:351' \
  "Read 2D 8-bit integer complex array" "            " 8
at_xfail=no
(
  $as_echo "589. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:352: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:352"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:352"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:366: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var19"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var19" "mat73_read_be.at:366"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var19
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var19
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_589
#AT_START_590
at_fn_group_banner 590 'mat73_read_be.at:369' \
  "Read 2D 8-bit unsigned integer complex array" "   " 8
at_xfail=no
(
  $as_echo "590. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:370: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:370"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:370"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:384: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var20"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var20" "mat73_read_be.at:384"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var20
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var20
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 21i 5 + 25i 9 + 29i 13 + 33i 17 + 37i 
2 + 22i 6 + 26i 10 + 30i 14 + 34i 18 + 38i 
3 + 23i 7 + 27i 11 + 31i 15 + 35i 19 + 39i 
4 + 24i 8 + 28i 12 + 32i 16 + 36i 20 + 40i 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:384"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_590
#AT_START_591
at_fn_group_banner 591 'mat73_read_be.at:387' \
  "Read 2D logical array" "                          " 8
at_xfail=no
(
  $as_echo "591. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:388: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:388"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:388"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:403: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var90"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var90" "mat73_read_be.at:403"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var90
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var90
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:403"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_591
#AT_START_592
at_fn_group_banner 592 'mat73_read_be.at:406' \
  "Read double-precision sparse array" "             " 8
at_xfail=no
(
  $as_echo "592. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:407: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:407"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:407"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:422: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var21"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var21" "mat73_read_be.at:422"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var21
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var21
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,2)  2
    (3,3)  3
    (4,4)  4
    (5,5)  5
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_592
#AT_START_593
at_fn_group_banner 593 'mat73_read_be.at:425' \
  "Read double-precision sparse complex array" "     " 8
at_xfail=no
(
  $as_echo "593. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:426: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:426"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:426"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var22"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var22" "mat73_read_be.at:441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var22
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var22
      Rank: 2
Dimensions: 5 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 6i
    (2,2)  2 + 7i
    (3,3)  3 + 8i
    (4,4)  4 + 9i
    (5,5)  5 + 10i
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_593
#AT_START_594
at_fn_group_banner 594 'mat73_read_be.at:444' \
  "Read empty array" "                               " 8
at_xfail=no
(
  $as_echo "594. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:445: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:445"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:445"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:453: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var23"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var23" "mat73_read_be.at:453"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var23
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var23
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:453"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_594
#AT_START_595
at_fn_group_banner 595 'mat73_read_be.at:456' \
  "Read 2D character array" "                        " 8
at_xfail=no
(
  $as_echo "595. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:457: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:457"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:457"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:471: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var24"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var24" "mat73_read_be.at:471"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var24
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var24
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#\$%^&*()-_=+\`~
[{]}\\|;:'\",<.>/?          
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:471"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_595
#AT_START_596
at_fn_group_banner 596 'mat73_read_be.at:474' \
  "Read empty structure array" "                     " 8
at_xfail=no
(
  $as_echo "596. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:475: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:475"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:475"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:485: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var25"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var25" "mat73_read_be.at:485"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var25
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var25
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:485"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_596
#AT_START_597
at_fn_group_banner 597 'mat73_read_be.at:487' \
  "Read empty structure array with fields" "         " 8
at_xfail=no
(
  $as_echo "597. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:488: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:488"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:488"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:502: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var26"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var26" "mat73_read_be.at:502"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var26
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var26
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:502"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_597
#AT_START_598
at_fn_group_banner 598 'mat73_read_be.at:504' \
  "Read structure array with empty fields" "         " 8
at_xfail=no
(
  $as_echo "598. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:505: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:505"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:505"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:539: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var27"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var27" "mat73_read_be.at:539"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var27
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var27
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:539"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_598
#AT_START_599
at_fn_group_banner 599 'mat73_read_be.at:541' \
  "Read structure array with double-precision fields" "" 8
at_xfail=no
(
  $as_echo "599. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:542: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:542"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:588: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var28"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var28" "mat73_read_be.at:588"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var28
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var28
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_599
#AT_START_600
at_fn_group_banner 600 'mat73_read_be.at:590' \
  "Read structure array with single-precision fields" "" 8
at_xfail=no
(
  $as_echo "600. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:591: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:591"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:591"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:637: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var29"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var29" "mat73_read_be.at:637"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var29
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var29
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:637"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_600
#AT_START_601
at_fn_group_banner 601 'mat73_read_be.at:639' \
  "Read structure array with 64-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "601. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:640: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:640"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:640"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:686: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var30"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var30" "mat73_read_be.at:686"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var30
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var30
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:686"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_601
#AT_START_602
at_fn_group_banner 602 'mat73_read_be.at:688' \
  "Read structure array with 64-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "602. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:689: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:689"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:689"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:735: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var31"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var31" "mat73_read_be.at:735"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var31
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var31
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:735"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_602
#AT_START_603
at_fn_group_banner 603 'mat73_read_be.at:737' \
  "Read structure array with 32-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "603. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:738: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:738"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:738"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:784: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var32"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var32" "mat73_read_be.at:784"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var32
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var32
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:784"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_603
#AT_START_604
at_fn_group_banner 604 'mat73_read_be.at:786' \
  "Read structure array with 32-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "604. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:787: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:787"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:787"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:833: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var33"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var33" "mat73_read_be.at:833"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var33
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var33
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:833"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_604
#AT_START_605
at_fn_group_banner 605 'mat73_read_be.at:835' \
  "Read structure array with 16-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "605. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:836: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:836"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:836"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:882: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var34"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var34" "mat73_read_be.at:882"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var34
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var34
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:882"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_605
#AT_START_606
at_fn_group_banner 606 'mat73_read_be.at:884' \
  "Read structure array with 16-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "606. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:885: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:885"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:885"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:931: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var35"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var35" "mat73_read_be.at:931"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var35
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var35
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:931"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_606
#AT_START_607
at_fn_group_banner 607 'mat73_read_be.at:933' \
  "Read structure array with 8-bit integer fields" " " 8
at_xfail=no
(
  $as_echo "607. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:934: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:934"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:934"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:980: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var36"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var36" "mat73_read_be.at:980"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var36
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var36
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:980"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_607
#AT_START_608
at_fn_group_banner 608 'mat73_read_be.at:982' \
  "Read structure array with 8-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "608. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:983: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:983"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:983"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1029: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var37"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var37" "mat73_read_be.at:1029"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var37
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var37
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1029"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_608
#AT_START_609
at_fn_group_banner 609 'mat73_read_be.at:1031' \
  "Read structure array with complex double-precision fields" "" 8
at_xfail=no
(
  $as_echo "609. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1032: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1032"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1032"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1078: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var38"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var38" "mat73_read_be.at:1078"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var38
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var38
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1078"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_609
#AT_START_610
at_fn_group_banner 610 'mat73_read_be.at:1080' \
  "Read structure array with complex single-precision fields" "" 8
at_xfail=no
(
  $as_echo "610. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1081: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1081"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1081"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1127: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var39"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var39" "mat73_read_be.at:1127"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var39
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var39
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_610
#AT_START_611
at_fn_group_banner 611 'mat73_read_be.at:1129' \
  "Read structure array with complex 64-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "611. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1130: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1130"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1130"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1176: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var40"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var40" "mat73_read_be.at:1176"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var40
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var40
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1176"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_611
#AT_START_612
at_fn_group_banner 612 'mat73_read_be.at:1178' \
  "Read structure array with complex 64-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "612. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1179: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1179"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1179"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1225: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var41"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var41" "mat73_read_be.at:1225"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var41
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var41
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1225"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_612
#AT_START_613
at_fn_group_banner 613 'mat73_read_be.at:1227' \
  "Read structure array with complex 32-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "613. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1228: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1228"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1228"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1274: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var42"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var42" "mat73_read_be.at:1274"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var42
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var42
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1274"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_613
#AT_START_614
at_fn_group_banner 614 'mat73_read_be.at:1276' \
  "Read structure array with complex 32-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "614. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1277: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1277"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1277"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1323: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var43"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var43" "mat73_read_be.at:1323"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var43
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var43
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1323"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_614
#AT_START_615
at_fn_group_banner 615 'mat73_read_be.at:1325' \
  "Read structure array with complex 16-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "615. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1326: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1326"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1326"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1372: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var44"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var44" "mat73_read_be.at:1372"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var44
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var44
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1372"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_615
#AT_START_616
at_fn_group_banner 616 'mat73_read_be.at:1374' \
  "Read structure array with complex 16-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "616. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1375: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1375"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1375"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1421: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var45"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var45" "mat73_read_be.at:1421"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var45
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var45
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1421"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_616
#AT_START_617
at_fn_group_banner 617 'mat73_read_be.at:1423' \
  "Read structure array with complex 8-bit integer fields" "" 8
at_xfail=no
(
  $as_echo "617. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1424: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1424"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1424"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1470: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var46"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var46" "mat73_read_be.at:1470"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var46
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var46
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1470"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_617
#AT_START_618
at_fn_group_banner 618 'mat73_read_be.at:1472' \
  "Read structure array with complex 8-bit unsigned integer fields" "" 8
at_xfail=no
(
  $as_echo "618. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1473: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1473"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1473"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1519: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var47"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var47" "mat73_read_be.at:1519"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var47
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var47
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1519"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_618
#AT_START_619
at_fn_group_banner 619 'mat73_read_be.at:1522' \
  "Read structure array with logical fields" "       " 8
at_xfail=no
(
  $as_echo "619. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1523: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1523"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1523"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1579: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var91"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var91" "mat73_read_be.at:1579"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var91
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var91
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Name: field1
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1579"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_619
#AT_START_620
at_fn_group_banner 620 'mat73_read_be.at:1582' \
  "Read structure array with double-precision sparse fields" "" 8
at_xfail=no
(
  $as_echo "620. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1583: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1583"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1583"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1635: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var48"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var48" "mat73_read_be.at:1635"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var48
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var48
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1635"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_620
#AT_START_621
at_fn_group_banner 621 'mat73_read_be.at:1638' \
  "Read structure array with complex double-precision sparse fields" "" 8
at_xfail=no
(
  $as_echo "621. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1639: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1639"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1639"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1691: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var49"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var49" "mat73_read_be.at:1691"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var49
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var49
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1691"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_621
#AT_START_622
at_fn_group_banner 622 'mat73_read_be.at:1694' \
  "Read structure array with character fields" "     " 8
at_xfail=no
(
  $as_echo "622. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1695: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1695"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1695"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1737: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var50"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var50" "mat73_read_be.at:1737"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var50
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var50
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1737"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_622
#AT_START_623
at_fn_group_banner 623 'mat73_read_be.at:1740' \
  "Read cell array with empty arrays" "              " 8
at_xfail=no
(
  $as_echo "623. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1741: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1741"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1741"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1791: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var52"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var52" "mat73_read_be.at:1791"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var52
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var52
      Rank: 2
Dimensions: 1 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 0
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Rank: 2
Dimensions: 0 x 0
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
      Rank: 2
Dimensions: 0 x 0
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1791"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_623
#AT_START_624
at_fn_group_banner 624 'mat73_read_be.at:1794' \
  "Read cell array with double-precision arrays" "   " 8
at_xfail=no
(
  $as_echo "624. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1795: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1795"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1795"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1856: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var53"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var53" "mat73_read_be.at:1856"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var53
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var53
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1856"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_624
#AT_START_625
at_fn_group_banner 625 'mat73_read_be.at:1859' \
  "Read cell array with single-precision arrays" "   " 8
at_xfail=no
(
  $as_echo "625. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1860: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1860"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1860"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1921: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var54"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var54" "mat73_read_be.at:1921"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var54
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var54
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1921"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_625
#AT_START_626
at_fn_group_banner 626 'mat73_read_be.at:1924' \
  "Read cell array with 64-bit integer arrays" "     " 8
at_xfail=no
(
  $as_echo "626. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1925: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1925"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1925"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1986: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var55"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var55" "mat73_read_be.at:1986"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var55
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var55
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1986"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_626
#AT_START_627
at_fn_group_banner 627 'mat73_read_be.at:1989' \
  "Read cell array with 64-bit unsigned integer arrays" "" 8
at_xfail=no
(
  $as_echo "627. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:1990: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:1990"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:1990"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2051: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var56"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var56" "mat73_read_be.at:2051"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var56
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var56
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2051"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_627
#AT_START_628
at_fn_group_banner 628 'mat73_read_be.at:2054' \
  "Read cell array with 32-bit integer arrays" "     " 8
at_xfail=no
(
  $as_echo "628. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2055: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2055"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2055"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2116: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var57"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var57" "mat73_read_be.at:2116"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var57
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var57
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2116"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_628
#AT_START_629
at_fn_group_banner 629 'mat73_read_be.at:2119' \
  "Read cell array with 32-bit unsigned integer arrays" "" 8
at_xfail=no
(
  $as_echo "629. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2120: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2120"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2120"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2181: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var58"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var58" "mat73_read_be.at:2181"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var58
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var58
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2181"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_629
#AT_START_630
at_fn_group_banner 630 'mat73_read_be.at:2184' \
  "Read cell array with 16-bit integer arrays" "     " 8
at_xfail=no
(
  $as_echo "630. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2185: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2185"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2185"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2246: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var59"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var59" "mat73_read_be.at:2246"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var59
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var59
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2246"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_630
#AT_START_631
at_fn_group_banner 631 'mat73_read_be.at:2249' \
  "Read cell array with 16-bit unsigned integer arrays" "" 8
at_xfail=no
(
  $as_echo "631. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2250: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2250"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2250"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2311: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var60"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var60" "mat73_read_be.at:2311"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var60
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var60
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2311"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_631
#AT_START_632
at_fn_group_banner 632 'mat73_read_be.at:2314' \
  "Read cell array with 8-bit integer arrays" "      " 8
at_xfail=no
(
  $as_echo "632. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2315: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2315"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2315"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2376: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var61"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var61" "mat73_read_be.at:2376"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var61
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var61
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2376"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_632
#AT_START_633
at_fn_group_banner 633 'mat73_read_be.at:2379' \
  "Read cell array with 8-bit unsigned integer arrays" "" 8
at_xfail=no
(
  $as_echo "633. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2380: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2380"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2380"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2441: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var62"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var62" "mat73_read_be.at:2441"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var62
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var62
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 2 
3 4 
}
      Rank: 2
Dimensions: 2 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
19 20 
21 22 
}
      Rank: 2
Dimensions: 2 x 3
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
5 6 7 
8 9 10 
}
      Rank: 2
Dimensions: 3 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
23 24 
25 26 
27 28 
}
      Rank: 2
Dimensions: 2 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
11 12 13 14 
15 16 17 18 
}
      Rank: 2
Dimensions: 4 x 2
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
29 30 
31 32 
33 34 
35 36 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2441"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_633
#AT_START_634
at_fn_group_banner 634 'mat73_read_be.at:2444' \
  "Read cell array with logical arrays" "            " 8
at_xfail=no
(
  $as_echo "634. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2445: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2445"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2445"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2497: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var92"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var92" "mat73_read_be.at:2497"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var92
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var92
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 4 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 0 0 0 0 
1 1 1 1 1 
0 0 0 0 0 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2497"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_634
#AT_START_635
at_fn_group_banner 635 'mat73_read_be.at:2500' \
  "Read cell array with double-precision sparse arrays" "" 8
at_xfail=no
(
  $as_echo "635. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2501: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2501"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2501"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2551: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var63"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var63" "mat73_read_be.at:2551"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var63
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var63
      Rank: 2
Dimensions: 1 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2551"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_635
#AT_START_636
at_fn_group_banner 636 'mat73_read_be.at:2554' \
  "Read cell array with complex double-precision sparse arrays" "" 8
at_xfail=no
(
  $as_echo "636. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2555: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2555"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2555"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2605: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var64"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var64" "mat73_read_be.at:2605"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var64
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var64
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2605"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_636
#AT_START_637
at_fn_group_banner 637 'mat73_read_be.at:2608' \
  "Read cell array with character arrays" "          " 8
at_xfail=no
(
  $as_echo "637. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2609: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2609"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2609"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2647: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var65"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var65" "mat73_read_be.at:2647"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var65
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var65
      Rank: 2
Dimensions: 2 x 2
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2647"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_637
#AT_START_638
at_fn_group_banner 638 'mat73_read_be.at:2650' \
  "Read cell array with empty structure arrays" "    " 8
at_xfail=no
(
  $as_echo "638. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2651: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2651"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2651"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2707: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var66"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var66" "mat73_read_be.at:2707"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var66
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var66
      Rank: 2
Dimensions: 1 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Rank: 2
Dimensions: 1 x 2
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2707"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_638
#AT_START_639
at_fn_group_banner 639 'mat73_read_be.at:2710' \
  "Read cell array with structure arrays (numeric fields)" "" 8
at_xfail=no
(
  $as_echo "639. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:2711: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:2711"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:2711"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:3561: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var67"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var67" "mat73_read_be.at:3561"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var67
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var67
      Rank: 2
Dimensions: 2 x 10
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
2 5 8 11 
3 6 9 12 
4 7 10 13 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
14 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
15 18 21 24 
16 19 22 25 
17 20 23 26 
}
}
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
4 + 54i 7 + 57i 10 + 60i 13 + 63i 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 1
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
14 + 64i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
16 + 66i 19 + 69i 22 + 72i 25 + 75i 
17 + 67i 20 + 70i 23 + 73i 26 + 76i 
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:3561"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_639
#AT_START_640
at_fn_group_banner 640 'mat73_read_be.at:3564' \
  "Read cell array with structure arrays (sparse fields)" "" 8
at_xfail=no
(
  $as_echo "640. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:3565: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:3565"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:3565"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:3671: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var68"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var68" "mat73_read_be.at:3671"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var68
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var68
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (1,2)  5
    (2,2)  6
    (1,3)  9
    (2,3)  10
    (3,3)  11
    (1,4)  13
    (2,4)  14
    (3,4)  15
    (4,4)  16
    (1,5)  17
    (2,5)  18
    (3,5)  19
    (4,5)  20
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (2,1)  5
    (3,1)  9
    (4,1)  13
    (5,1)  17
    (2,2)  6
    (3,2)  10
    (4,2)  14
    (5,2)  18
    (3,3)  11
    (4,3)  15
    (5,3)  19
    (4,4)  16
    (5,4)  20
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 4 x 5
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 21i
    (1,2)  5 + 25i
    (2,2)  6 + 26i
    (1,3)  9 + 29i
    (2,3)  10 + 30i
    (3,3)  11 + 31i
    (1,4)  13 + 33i
    (2,4)  14 + 34i
    (3,4)  15 + 35i
    (4,4)  16 + 36i
    (1,5)  17 + 37i
    (2,5)  18 + 38i
    (3,5)  19 + 39i
    (4,5)  20 + 40i
}
      Name: field2
      Rank: 2
Dimensions: 5 x 4
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + -21i
    (2,1)  5 + -25i
    (3,1)  9 + -29i
    (4,1)  13 + -33i
    (5,1)  17 + -37i
    (2,2)  6 + -26i
    (3,2)  10 + -30i
    (4,2)  14 + -34i
    (5,2)  18 + -38i
    (3,3)  11 + -31i
    (4,3)  15 + -35i
    (5,3)  19 + -39i
    (4,4)  16 + -36i
    (5,4)  20 + -40i
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:3671"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_640
#AT_START_641
at_fn_group_banner 641 'mat73_read_be.at:3674' \
  "Read cell array structure arrays (character fields)" "" 8
at_xfail=no
(
  $as_echo "641. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:3675: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_read_be.at:3675"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:3675"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_read_be.at:3729: \$builddir/test_mat readvar \$srcdir/datasets/matio_test_cases_hdf_be.mat var69"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var69" "mat73_read_be.at:3729"
( $at_check_trace; $builddir/test_mat readvar $srcdir/datasets/matio_test_cases_hdf_be.mat var69
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "      Name: var69
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
ABCDEFGHIJKLMNOPQRSTUVWXYZ
}
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
1234567890!@#\$%^&*()-_=+\`~
}
      Name: field2
      Rank: 2
Dimensions: 1 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
[{]}\\|;:'\",<.>/?          
}
}
}
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_read_be.at:3729"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_641
#AT_START_642
at_fn_group_banner 642 'mat73_readslab_be.at:1' \
  "Read slab of double-precision array" "            " 8
at_xfail=no
(
  $as_echo "642. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:3: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:3"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:3"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:31: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var70\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:31"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var70\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var70(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var70(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:31"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_642
#AT_START_643
at_fn_group_banner 643 'mat73_readslab_be.at:34' \
  "Read slab of single-precision array" "            " 8
at_xfail=no
(
  $as_echo "643. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:36: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:36"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:36"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:64: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var71\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:64"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var71\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var71(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var71(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_643
#AT_START_644
at_fn_group_banner 644 'mat73_readslab_be.at:67' \
  "Read slab of 64-bit integer array" "              " 8
at_xfail=no
(
  $as_echo "644. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:69: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:69"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:69"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:97: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var72\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:97"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var72\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var72(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var72(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:97"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_644
#AT_START_645
at_fn_group_banner 645 'mat73_readslab_be.at:100' \
  "Read slab of 64-bit unsigned integer array" "     " 8
at_xfail=no
(
  $as_echo "645. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:102: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:102"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:102"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:130: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var73\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:130"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var73\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var73(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var73(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:130"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_645
#AT_START_646
at_fn_group_banner 646 'mat73_readslab_be.at:133' \
  "Read slab of 32-bit integer array" "              " 8
at_xfail=no
(
  $as_echo "646. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:135: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:135"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:135"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:163: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var74\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:163"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var74\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var74(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var74(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:163"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_646
#AT_START_647
at_fn_group_banner 647 'mat73_readslab_be.at:166' \
  "Read slab of 32-bit unsigned integer array" "     " 8
at_xfail=no
(
  $as_echo "647. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:168: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:168"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:196: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var75\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:196"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var75\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var75(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var75(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:196"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_647
#AT_START_648
at_fn_group_banner 648 'mat73_readslab_be.at:199' \
  "Read slab of 16-bit integer array" "              " 8
at_xfail=no
(
  $as_echo "648. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:201: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:201"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:201"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:229: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var76\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:229"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var76\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var76(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var76(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:229"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_648
#AT_START_649
at_fn_group_banner 649 'mat73_readslab_be.at:232' \
  "Read slab of 16-bit unsigned integer array" "     " 8
at_xfail=no
(
  $as_echo "649. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:234: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:234"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:234"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:262: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var77\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:262"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var77\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var77(:,:,0) = 
    7266 7426 7586 7746 7906 8066 
    7269 7429 7589 7749 7909 8069 
    7272 7432 7592 7752 7912 8072 
    7275 7435 7595 7755 7915 8075 
    7278 7438 7598 7758 7918 8078 
    7281 7441 7601 7761 7921 8081 
    7284 7444 7604 7764 7924 8084 
    7287 7447 7607 7767 7927 8087 
    7290 7450 7610 7770 7930 8090 
    7293 7453 7613 7773 7933 8093 
    7296 7456 7616 7776 7936 8096 

var77(:,:,1) = 
    23650 23810 23970 24130 24290 24450 
    23653 23813 23973 24133 24293 24453 
    23656 23816 23976 24136 24296 24456 
    23659 23819 23979 24139 24299 24459 
    23662 23822 23982 24142 24302 24462 
    23665 23825 23985 24145 24305 24465 
    23668 23828 23988 24148 24308 24468 
    23671 23831 23991 24151 24311 24471 
    23674 23834 23994 24154 24314 24474 
    23677 23837 23997 24157 24317 24477 
    23680 23840 24000 24160 24320 24480 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_649
#AT_START_650
at_fn_group_banner 650 'mat73_readslab_be.at:265' \
  "Read slab of 8-bit integer array" "               " 8
at_xfail=no
(
  $as_echo "650. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:267: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:267"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:267"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:295: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var78\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:295"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var78\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var78(:,:,0) = 
    1 -92 -60 -52 95 -76 
    37 39 -19 -57 -75 117 
    -55 109 99 2 -77 12 
    -70 -69 85 106 -83 -108 
    -48 68 76 -34 -112 51 
    -84 76 109 -77 69 -35 
    -96 -42 96 92 -57 -105 
    -93 -4 -60 30 -97 -1 
    -91 36 24 -126 36 99 
    -24 45 112 -55 37 -103 
    -123 -89 74 3 90 55 

var78(:,:,1) = 
    -77 59 40 39 115 -80 
    27 -19 27 88 -121 113 
    59 84 90 -55 99 27 
    -38 -99 122 -95 47 45 
    -96 -27 124 -27 -108 94 
    32 121 7 -5 -99 124 
    -52 25 -2 -11 -9 7 
    -32 -22 -84 48 -70 54 
    123 8 -45 125 67 76 
    63 -70 -79 94 -89 -54 
    122 9 -120 36 107 -48 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:295"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_650
#AT_START_651
at_fn_group_banner 651 'mat73_readslab_be.at:298' \
  "Read slab of 8-bit unsigned integer array" "      " 8
at_xfail=no
(
  $as_echo "651. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:300: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:300"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:300"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:328: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var79\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:328"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var79\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var79(:,:,0) = 
    36 74 142 112 148 136 
    154 65 205 97 230 111 
    198 249 42 154 21 22 
    69 151 43 26 210 103 
    227 109 2 191 13 188 
    194 131 15 53 28 221 
    140 194 177 214 216 4 
    19 237 240 216 1 139 
    11 190 164 229 21 238 
    17 218 112 187 20 175 
    151 35 138 192 179 207 

var79(:,:,1) = 
    193 249 252 237 98 44 
    24 124 18 241 88 145 
    236 83 133 212 40 144 
    141 90 214 19 115 223 
    144 102 101 102 185 123 
    226 213 22 212 226 48 
    48 227 176 123 23 190 
    36 255 101 57 22 70 
    207 152 233 225 160 115 
    199 212 106 27 111 113 
    30 62 39 178 100 7 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:328"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_651
#AT_START_652
at_fn_group_banner 652 'mat73_readslab_be.at:331' \
  "Read slab of double-precision complex array" "    " 8
at_xfail=no
(
  $as_echo "652. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:333: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:333"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:333"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:361: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var80\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:361"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var80\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var80(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var80(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:361"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_652
#AT_START_653
at_fn_group_banner 653 'mat73_readslab_be.at:364' \
  "Read slab of single-precision complex array" "    " 8
at_xfail=no
(
  $as_echo "653. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:366: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:366"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:366"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:394: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var81\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:394"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var81\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var81(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var81(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_653
#AT_START_654
at_fn_group_banner 654 'mat73_readslab_be.at:397' \
  "Read slab of 64-bit integer complex array" "      " 8
at_xfail=no
(
  $as_echo "654. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:399: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:399"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:399"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:427: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var82\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:427"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var82\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var82(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var82(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_654
#AT_START_655
at_fn_group_banner 655 'mat73_readslab_be.at:430' \
  "Read slab of 64-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "655. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:432: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:432"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:432"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:460: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var83\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:460"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var83\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var83(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var83(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:460"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_655
#AT_START_656
at_fn_group_banner 656 'mat73_readslab_be.at:463' \
  "Read slab of 32-bit integer complex array" "      " 8
at_xfail=no
(
  $as_echo "656. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:465: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:465"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:465"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:493: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var84\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:493"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var84\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var84(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var84(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:493"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_656
#AT_START_657
at_fn_group_banner 657 'mat73_readslab_be.at:496' \
  "Read slab of 32-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "657. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:498: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:498"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:498"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:526: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var85\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:526"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var85\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var85(:,:,0) = 
    14531 + 14532i 14851 + 14852i 15171 + 15172i 15491 + 15492i 15811 + 15812i 16131 + 16132i 
    14537 + 14538i 14857 + 14858i 15177 + 15178i 15497 + 15498i 15817 + 15818i 16137 + 16138i 
    14543 + 14544i 14863 + 14864i 15183 + 15184i 15503 + 15504i 15823 + 15824i 16143 + 16144i 
    14549 + 14550i 14869 + 14870i 15189 + 15190i 15509 + 15510i 15829 + 15830i 16149 + 16150i 
    14555 + 14556i 14875 + 14876i 15195 + 15196i 15515 + 15516i 15835 + 15836i 16155 + 16156i 
    14561 + 14562i 14881 + 14882i 15201 + 15202i 15521 + 15522i 15841 + 15842i 16161 + 16162i 
    14567 + 14568i 14887 + 14888i 15207 + 15208i 15527 + 15528i 15847 + 15848i 16167 + 16168i 
    14573 + 14574i 14893 + 14894i 15213 + 15214i 15533 + 15534i 15853 + 15854i 16173 + 16174i 
    14579 + 14580i 14899 + 14900i 15219 + 15220i 15539 + 15540i 15859 + 15860i 16179 + 16180i 
    14585 + 14586i 14905 + 14906i 15225 + 15226i 15545 + 15546i 15865 + 15866i 16185 + 16186i 
    14591 + 14592i 14911 + 14912i 15231 + 15232i 15551 + 15552i 15871 + 15872i 16191 + 16192i 

var85(:,:,1) = 
    47299 + 47300i 47619 + 47620i 47939 + 47940i 48259 + 48260i 48579 + 48580i 48899 + 48900i 
    47305 + 47306i 47625 + 47626i 47945 + 47946i 48265 + 48266i 48585 + 48586i 48905 + 48906i 
    47311 + 47312i 47631 + 47632i 47951 + 47952i 48271 + 48272i 48591 + 48592i 48911 + 48912i 
    47317 + 47318i 47637 + 47638i 47957 + 47958i 48277 + 48278i 48597 + 48598i 48917 + 48918i 
    47323 + 47324i 47643 + 47644i 47963 + 47964i 48283 + 48284i 48603 + 48604i 48923 + 48924i 
    47329 + 47330i 47649 + 47650i 47969 + 47970i 48289 + 48290i 48609 + 48610i 48929 + 48930i 
    47335 + 47336i 47655 + 47656i 47975 + 47976i 48295 + 48296i 48615 + 48616i 48935 + 48936i 
    47341 + 47342i 47661 + 47662i 47981 + 47982i 48301 + 48302i 48621 + 48622i 48941 + 48942i 
    47347 + 47348i 47667 + 47668i 47987 + 47988i 48307 + 48308i 48627 + 48628i 48947 + 48948i 
    47353 + 47354i 47673 + 47674i 47993 + 47994i 48313 + 48314i 48633 + 48634i 48953 + 48954i 
    47359 + 47360i 47679 + 47680i 47999 + 48000i 48319 + 48320i 48639 + 48640i 48959 + 48960i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:526"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_657
#AT_START_658
at_fn_group_banner 658 'mat73_readslab_be.at:529' \
  "Read slab of 16-bit integer complex array" "      " 8
at_xfail=no
(
  $as_echo "658. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:531: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:531"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:531"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:559: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var86\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:559"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var86\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var86(:,:,0) = 
    31419 + 12074i -16493 + -9400i 2771 + -10261i -13965 + 16888i -25303 + 5509i 13196 + 15195i 
    11550 + 31935i 15688 + 20383i -25754 + -31533i -1934 + -19892i 16352 + 363i -12123 + -23263i 
    14036 + -25970i -10204 + -15596i 27007 + -3499i 24973 + -17196i 9743 + -9728i -10874 + 25982i 
    12950 + -26466i 14390 + -20232i -7948 + -4034i 29557 + -23198i 6783 + -16717i -11012 + -7600i 
    11549 + -13221i -21008 + 3161i 1047 + -17085i -26196 + -27443i 27364 + -31769i -10870 + -24078i 
    8802 + -13913i 22712 + -11293i 28781 + -6213i 17138 + 17163i 845 + -5483i -4181 + 21428i 
    -8540 + 20686i 16110 + -30851i 22132 + 27840i 4173 + 22551i -5927 + 30238i 19441 + -25234i 
    82 + -2536i 6298 + -2954i -2300 + -1878i 21456 + -372i 9080 + 5283i 27199 + -11909i 
    6556 + 25498i -10732 + -25971i 14919 + -19351i -12554 + -766i 25263 + -12552i -4204 + 14748i 
    -22761 + -19987i -15133 + 15777i -32577 + 15858i -11899 + 26000i -6594 + 9643i -12638 + 6522i 
    -14602 + -32033i -23705 + 32679i 28973 + -16332i -13223 + -7784i -21471 + -8832i -21381 + 3874i 

var86(:,:,1) = 
    10009 + -1227i 23621 + 10035i -22333 + -20060i -28782 + 3888i -5804 + -12847i -2817 + 10293i 
    23342 + 16514i -26955 + -8794i -28080 + -30034i -26055 + -4279i -19613 + 7820i -666 + -21153i 
    27792 + -11483i 3884 + 18834i -24965 + 30996i 17075 + -5598i -24500 + 23384i 6202 + 23652i 
    -16194 + -25596i 25669 + 17940i 11506 + -19238i 15629 + 19686i 6332 + -32352i -27772 + 7728i 
    9911 + -20183i 19480 + -25157i -5438 + 17227i -27961 + -5378i 9084 + 8866i 24485 + 27017i 
    -28341 + 22322i -24243 + -10527i 6325 + 19908i 22850 + -7463i 12787 + 16795i 7898 + 4210i 
    3508 + -7880i 4464 + 28510i 16761 + 20643i -17585 + 883i 27522 + 650i 8062 + 28365i 
    20369 + -482i -6616 + -24233i 18192 + -20736i -1421 + -6768i 7219 + -25890i -28910 + -21963i 
    -4578 + 21351i -14599 + -1762i -18629 + 17622i 28956 + -7833i -16811 + -5838i 7298 + -10445i 
    18426 + 31578i -19424 + 6424i 2759 + -21496i 19321 + -31347i 22569 + 6221i 29980 + 25776i 
    -26016 + 17152i -29786 + 14220i 15764 + 18250i 22739 + -27552i 21757 + -28407i 5019 + -2720i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:559"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_658
#AT_START_659
at_fn_group_banner 659 'mat73_readslab_be.at:562' \
  "Read slab of 16-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "659. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:564: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:564"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:564"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:592: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var87\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:592"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var87\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var87(:,:,0) = 
    63490 + 42712i 48615 + 54935i 14063 + 54325i 12093 + 4405i 47337 + 59129i 25576 + 6335i 
    29714 + 8391i 11083 + 51765i 15062 + 33495i 8834 + 7721i 62332 + 27780i 12201 + 17545i 
    61483 + 15861i 2973 + 2285i 51022 + 34454i 54420 + 31822i 3623 + 2694i 49659 + 37636i 
    15850 + 33874i 47407 + 28409i 60470 + 39080i 26675 + 29151i 11530 + 27741i 28187 + 58668i 
    55082 + 3631i 33701 + 18840i 44448 + 44287i 42660 + 29044i 4141 + 36801i 3135 + 5269i 
    45390 + 5685i 34873 + 47323i 64996 + 30009i 65323 + 50276i 64250 + 50570i 16458 + 14517i 
    10423 + 60745i 13711 + 7195i 283 + 64783i 7139 + 32010i 39722 + 49989i 31662 + 28316i 
    44728 + 38383i 6046 + 45393i 18983 + 191i 47157 + 29016i 26118 + 40150i 38430 + 36198i 
    43170 + 36676i 44211 + 53418i 3436 + 45327i 35840 + 18163i 28214 + 21931i 47450 + 50404i 
    46711 + 20162i 16574 + 31089i 44524 + 18230i 15379 + 14923i 25798 + 27469i 201 + 49160i 
    49188 + 52357i 41210 + 28626i 15729 + 21345i 30214 + 63617i 62573 + 58367i 50221 + 54517i 

var87(:,:,1) = 
    47469 + 42818i 8920 + 61180i 45303 + 55200i 10001 + 43967i 58589 + 45954i 16219 + 17867i 
    7124 + 35280i 29466 + 54541i 4881 + 31280i 48614 + 38397i 9073 + 25270i 59934 + 13526i 
    34741 + 37493i 65042 + 23250i 38207 + 48851i 14572 + 48016i 20846 + 33025i 58464 + 17576i 
    44064 + 39694i 1978 + 56271i 807 + 7069i 25265 + 24936i 22905 + 59697i 34801 + 59568i 
    6995 + 4154i 14377 + 47601i 50473 + 21558i 1715 + 40096i 22981 + 42347i 20649 + 30475i 
    7531 + 33600i 12353 + 11382i 6544 + 29624i 37345 + 13265i 24828 + 62213i 55999 + 42307i 
    54978 + 37775i 8336 + 45819i 52787 + 2034i 11025 + 46066i 46887 + 36422i 4464 + 16054i 
    15416 + 23755i 45530 + 55892i 5986 + 58345i 37554 + 31865i 50013 + 60501i 23302 + 47556i 
    27259 + 51376i 8908 + 40510i 57054 + 22602i 4791 + 53489i 29781 + 52236i 24764 + 55871i 
    64300 + 6331i 11258 + 60909i 2935 + 55316i 22789 + 15282i 37210 + 42165i 22331 + 53630i 
    1212 + 37261i 56638 + 57033i 42851 + 16897i 23465 + 10050i 37785 + 60771i 63541 + 34455i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:592"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_659
#AT_START_660
at_fn_group_banner 660 'mat73_readslab_be.at:595' \
  "Read slab of 8-bit integer complex array" "       " 8
at_xfail=no
(
  $as_echo "660. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:597: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:597"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:597"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:625: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var88\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:625"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var88\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var88(:,:,0) = 
    24 + -109i 5 + 103i 79 + -98i -11 + -41i 3 + -95i -99 + -15i 
    -38 + 98i -71 + -109i -125 + -9i -4 + -5i -69 + -113i -92 + -70i 
    -32 + 69i -9 + 76i -81 + -45i 111 + -12i -24 + -55i 115 + 62i 
    1 + -58i 52 + -40i -30 + 6i -79 + 23i -40 + -78i -29 + -52i 
    106 + 37i -48 + 1i 109 + -65i 118 + -68i 81 + -95i -121 + 61i 
    23 + -118i -1 + -71i -111 + -88i 60 + -49i 108 + -15i -62 + 101i 
    86 + -117i 43 + 106i -21 + -57i -31 + -47i -37 + 5i -72 + 52i 
    3 + -10i 121 + -39i -59 + -22i 98 + -49i 24 + -97i -110 + -111i 
    -94 + 111i 68 + 45i 64 + -47i 19 + -84i 65 + 17i 126 + 124i 
    43 + -69i 9 + 7i 38 + 36i 114 + -19i -79 + -19i 85 + -44i 
    37 + 24i 49 + -122i 32 + 84i 126 + 112i -54 + -36i -32 + 42i 

var88(:,:,1) = 
    10 + 105i -120 + -94i -79 + -87i 55 + -21i 19 + 106i 47 + -65i 
    -88 + -104i 69 + 16i -50 + 8i -78 + 49i 18 + 47i -103 + -35i 
    82 + 96i 5 + 114i -13 + -48i -61 + 22i -39 + -73i 127 + 30i 
    98 + -85i 80 + 42i 51 + -21i 74 + -73i -47 + -60i 28 + 16i 
    -66 + -27i -7 + 4i -95 + 3i -26 + 71i -102 + -120i -72 + -13i 
    83 + -12i 74 + 84i -115 + -5i 81 + 0i -17 + -102i -76 + -67i 
    -18 + -32i 83 + 76i 117 + 120i -45 + -123i 18 + 66i -46 + 33i 
    58 + -92i -74 + 93i 66 + 29i -8 + 58i -12 + -59i 40 + 109i 
    -59 + -89i -124 + 7i 64 + 10i 63 + -124i -41 + 34i -117 + 25i 
    -45 + 16i -61 + 54i 54 + -101i -83 + -112i 46 + 51i 103 + 12i 
    -36 + -68i 3 + -83i 51 + 74i 97 + 123i -61 + -40i 89 + -9i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:625"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_660
#AT_START_661
at_fn_group_banner 661 'mat73_readslab_be.at:628' \
  "Read slab of 8-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "661. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:630: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:630"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:630"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:658: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var89\\(2:3:end,4:5:end,8:16:end\\)" "mat73_readslab_be.at:658"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var89\(2:3:end,4:5:end,8:16:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "var89(:,:,0) = 
    233 + 19i 98 + 36i 145 + 191i 87 + 191i 30 + 24i 142 + 157i 
    99 + 152i 129 + 239i 23 + 137i 187 + 27i 149 + 230i 186 + 204i 
    194 + 176i 246 + 207i 229 + 96i 224 + 67i 56 + 158i 139 + 252i 
    219 + 39i 42 + 97i 17 + 104i 96 + 230i 114 + 96i 130 + 202i 
    182 + 250i 209 + 14i 158 + 68i 66 + 32i 242 + 79i 197 + 221i 
    198 + 121i 114 + 150i 85 + 154i 196 + 72i 82 + 206i 169 + 34i 
    70 + 99i 245 + 204i 207 + 145i 239 + 53i 106 + 114i 160 + 148i 
    250 + 205i 62 + 143i 112 + 116i 15 + 197i 8 + 202i 131 + 129i 
    154 + 19i 192 + 87i 135 + 182i 111 + 188i 87 + 217i 255 + 157i 
    20 + 127i 88 + 125i 138 + 79i 225 + 144i 138 + 126i 93 + 4i 
    55 + 248i 254 + 59i 118 + 171i 190 + 181i 26 + 138i 140 + 149i 

var89(:,:,1) = 
    182 + 191i 212 + 183i 51 + 193i 46 + 45i 16 + 249i 110 + 132i 
    45 + 138i 121 + 33i 81 + 133i 90 + 128i 137 + 65i 234 + 197i 
    41 + 32i 193 + 87i 42 + 147i 171 + 187i 149 + 145i 22 + 223i 
    74 + 142i 95 + 150i 219 + 48i 105 + 53i 87 + 154i 229 + 72i 
    173 + 106i 75 + 167i 185 + 124i 23 + 168i 111 + 32i 169 + 26i 
    14 + 5i 139 + 111i 65 + 8i 111 + 218i 179 + 46i 128 + 186i 
    56 + 15i 241 + 161i 120 + 240i 91 + 101i 164 + 95i 87 + 139i 
    159 + 205i 62 + 17i 24 + 19i 90 + 72i 121 + 106i 152 + 77i 
    218 + 172i 165 + 198i 104 + 3i 178 + 168i 125 + 144i 17 + 58i 
    235 + 235i 249 + 244i 23 + 34i 172 + 79i 215 + 171i 215 + 242i 
    253 + 46i 207 + 210i 88 + 216i 176 + 42i 48 + 141i 62 + 229i 

" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_661
#AT_START_662
at_fn_group_banner 662 'mat73_readslab_be.at:661' \
  "Read linear slab of double-precision array" "     " 8
at_xfail=no
(
  $as_echo "662. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:663: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:663"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:663"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:692: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var70\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var70\\(3257:1111:end\\)" "mat73_readslab_be.at:692"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var70\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:692"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_662
#AT_START_663
at_fn_group_banner 663 'mat73_readslab_be.at:695' \
  "Read linear slab of single-precision array" "     " 8
at_xfail=no
(
  $as_echo "663. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:697: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:697"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:697"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:726: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var71\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var71\\(3257:1111:end\\)" "mat73_readslab_be.at:726"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var71\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:726"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_663
#AT_START_664
at_fn_group_banner 664 'mat73_readslab_be.at:729' \
  "Read linear slab of 64-bit integer array" "       " 8
at_xfail=no
(
  $as_echo "664. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:731: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:731"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:731"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:760: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var72\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var72\\(3257:1111:end\\)" "mat73_readslab_be.at:760"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var72\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:760"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_664
#AT_START_665
at_fn_group_banner 665 'mat73_readslab_be.at:763' \
  "Read linear slab of 64-bit unsigned integer array" "" 8
at_xfail=no
(
  $as_echo "665. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:765: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:765"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:765"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:794: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var73\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var73\\(3257:1111:end\\)" "mat73_readslab_be.at:794"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var73\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:794"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_665
#AT_START_666
at_fn_group_banner 666 'mat73_readslab_be.at:797' \
  "Read linear slab of 32-bit integer array" "       " 8
at_xfail=no
(
  $as_echo "666. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:799: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:799"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:799"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:828: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var74\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var74\\(3257:1111:end\\)" "mat73_readslab_be.at:828"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var74\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:828"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_666
#AT_START_667
at_fn_group_banner 667 'mat73_readslab_be.at:831' \
  "Read linear slab of 32-bit unsigned integer array" "" 8
at_xfail=no
(
  $as_echo "667. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:833: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:833"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:833"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:862: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var75\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var75\\(3257:1111:end\\)" "mat73_readslab_be.at:862"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var75\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:862"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_667
#AT_START_668
at_fn_group_banner 668 'mat73_readslab_be.at:865' \
  "Read linear slab of 16-bit integer array" "       " 8
at_xfail=no
(
  $as_echo "668. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:867: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:867"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:896: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var76\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var76\\(3257:1111:end\\)" "mat73_readslab_be.at:896"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var76\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:896"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_668
#AT_START_669
at_fn_group_banner 669 'mat73_readslab_be.at:899' \
  "Read linear slab of 16-bit unsigned integer array" "" 8
at_xfail=no
(
  $as_echo "669. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:901: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:901"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:901"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:930: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var77\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var77\\(3257:1111:end\\)" "mat73_readslab_be.at:930"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var77\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "3257 
4368 
5479 
6590 
7701 
8812 
9923 
11034 
12145 
13256 
14367 
15478 
16589 
17700 
18811 
19922 
21033 
22144 
23255 
24366 
25477 
26588 
27699 
28810 
29921 
31032 
32143 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:930"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_669
#AT_START_670
at_fn_group_banner 670 'mat73_readslab_be.at:933' \
  "Read linear slab of 8-bit integer array" "        " 8
at_xfail=no
(
  $as_echo "670. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:935: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:935"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:935"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:964: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var78\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var78\\(3257:1111:end\\)" "mat73_readslab_be.at:964"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var78\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "61 
29 
-104 
-19 
-26 
-22 
23 
-54 
-13 
110 
110 
-5 
-67 
74 
-78 
-13 
72 
-110 
23 
12 
-41 
93 
-108 
25 
-55 
40 
88 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:964"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_670
#AT_START_671
at_fn_group_banner 671 'mat73_readslab_be.at:967' \
  "Read linear slab of 8-bit unsigned integer array" "" 8
at_xfail=no
(
  $as_echo "671. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:969: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:969"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:969"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:998: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var79\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var79\\(3257:1111:end\\)" "mat73_readslab_be.at:998"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var79\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "79 
206 
247 
239 
120 
165 
40 
62 
183 
125 
83 
50 
224 
148 
66 
204 
96 
139 
135 
27 
204 
10 
120 
93 
164 
179 
130 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:998"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_671
#AT_START_672
at_fn_group_banner 672 'mat73_readslab_be.at:1001' \
  "Read linear slab of double-precision complex array" "" 8
at_xfail=no
(
  $as_echo "672. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1003: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1003"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1003"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1032: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var80\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var80\\(3257:1111:end\\)" "mat73_readslab_be.at:1032"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var80\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1032"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_672
#AT_START_673
at_fn_group_banner 673 'mat73_readslab_be.at:1035' \
  "Read linear slab of single-precision complex array" "" 8
at_xfail=no
(
  $as_echo "673. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1037: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1037"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1037"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1066: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var81\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var81\\(3257:1111:end\\)" "mat73_readslab_be.at:1066"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var81\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1066"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_673
#AT_START_674
at_fn_group_banner 674 'mat73_readslab_be.at:1069' \
  "Read linear slab of 64-bit integer complex array" "" 8
at_xfail=no
(
  $as_echo "674. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1071: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1071"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1071"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1100: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var82\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var82\\(3257:1111:end\\)" "mat73_readslab_be.at:1100"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var82\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1100"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_674
#AT_START_675
at_fn_group_banner 675 'mat73_readslab_be.at:1103' \
  "Read linear slab of 64-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "675. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1105: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1105"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1105"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1134: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var83\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var83\\(3257:1111:end\\)" "mat73_readslab_be.at:1134"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var83\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1134"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_675
#AT_START_676
at_fn_group_banner 676 'mat73_readslab_be.at:1137' \
  "Read linear slab of 32-bit integer complex array" "" 8
at_xfail=no
(
  $as_echo "676. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1139: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1139"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1139"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1168: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var84\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var84\\(3257:1111:end\\)" "mat73_readslab_be.at:1168"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var84\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_676
#AT_START_677
at_fn_group_banner 677 'mat73_readslab_be.at:1171' \
  "Read linear slab of 32-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "677. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1173: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1173"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1173"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1202: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var85\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var85\\(3257:1111:end\\)" "mat73_readslab_be.at:1202"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var85\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "6513 + 6514i 
8735 + 8736i 
10957 + 10958i 
13179 + 13180i 
15401 + 15402i 
17623 + 17624i 
19845 + 19846i 
22067 + 22068i 
24289 + 24290i 
26511 + 26512i 
28733 + 28734i 
30955 + 30956i 
33177 + 33178i 
35399 + 35400i 
37621 + 37622i 
39843 + 39844i 
42065 + 42066i 
44287 + 44288i 
46509 + 46510i 
48731 + 48732i 
50953 + 50954i 
53175 + 53176i 
55397 + 55398i 
57619 + 57620i 
59841 + 59842i 
62063 + 62064i 
64285 + 64286i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1202"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_677
#AT_START_678
at_fn_group_banner 678 'mat73_readslab_be.at:1205' \
  "Read linear slab of 16-bit integer complex array" "" 8
at_xfail=no
(
  $as_echo "678. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1207: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1207"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1207"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1236: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var86\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var86\\(3257:1111:end\\)" "mat73_readslab_be.at:1236"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var86\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-10654 + 2041i 
-5682 + -8946i 
23505 + -19284i 
-29808 + -793i 
14361 + 14250i 
24577 + 10449i 
10061 + -10980i 
2278 + 30610i 
30584 + -16154i 
-10092 + -15599i 
-28226 + 856i 
18653 + 19236i 
9803 + 32660i 
10182 + -32150i 
30378 + 32495i 
19696 + -11216i 
-30489 + -3723i 
31624 + -2321i 
6915 + -18372i 
8442 + -9731i 
-16034 + -3060i 
-30068 + -24676i 
7227 + -17710i 
-22074 + 4538i 
5373 + 10851i 
-12908 + 17807i 
10850 + 7874i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1236"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_678
#AT_START_679
at_fn_group_banner 679 'mat73_readslab_be.at:1239' \
  "Read linear slab of 16-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "679. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1241: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1241"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1241"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1270: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var87\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var87\\(3257:1111:end\\)" "mat73_readslab_be.at:1270"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var87\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "18653 + 18059i 
30454 + 36469i 
11090 + 49102i 
51945 + 25659i 
59160 + 51510i 
39866 + 61119i 
53268 + 43019i 
43356 + 9321i 
32869 + 31981i 
38858 + 37281i 
62411 + 63389i 
58886 + 55340i 
36223 + 10839i 
62276 + 52727i 
9244 + 37001i 
36878 + 2671i 
15788 + 12333i 
4031 + 15964i 
29959 + 25528i 
42025 + 16986i 
22838 + 65016i 
22738 + 31838i 
47727 + 42512i 
53210 + 45773i 
39345 + 36843i 
39409 + 52620i 
9100 + 59236i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1270"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_679
#AT_START_680
at_fn_group_banner 680 'mat73_readslab_be.at:1273' \
  "Read linear slab of 8-bit integer complex array" "" 8
at_xfail=no
(
  $as_echo "680. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1275: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1275"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1275"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1304: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var88\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var88\\(3257:1111:end\\)" "mat73_readslab_be.at:1304"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var88\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "-58 + 9i 
37 + -39i 
28 + 59i 
55 + -63i 
-67 + -87i 
82 + -113i 
38 + 85i 
89 + 115i 
84 + 100i 
1 + -29i 
-106 + -92i 
95 + 57i 
-104 + -80i 
-95 + -84i 
-14 + -123i 
-31 + -60i 
-27 + 2i 
-104 + -30i 
117 + 121i 
36 + 104i 
-49 + -121i 
-117 + 114i 
-98 + 73i 
40 + -4i 
123 + 33i 
-1 + 64i 
112 + -45i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1304"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_680
#AT_START_681
at_fn_group_banner 681 'mat73_readslab_be.at:1307' \
  "Read linear slab of 8-bit unsigned integer complex array" "" 8
at_xfail=no
(
  $as_echo "681. $at_setup_line: testing $at_desc ..."
  $at_traceon


{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1309: if test \$MAT73 -ne 1;then exit 77;fi"
at_fn_check_prepare_dynamic "if test $MAT73 -ne 1;then exit 77;fi" "mat73_readslab_be.at:1309"
( $at_check_trace; if test $MAT73 -ne 1;then exit 77;fi
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
at_fn_diff_devnull "$at_stderr" || at_failed=:
at_fn_diff_devnull "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1309"
$at_failed && at_fn_log_failure
$at_traceon; }

{ set +x
$as_echo "$at_srcdir/mat73_readslab_be.at:1338: \$builddir/../tools/matdump -d \$srcdir/datasets/matio_test_cases_hdf_be.mat var89\\(3257:1111:end\\)"
at_fn_check_prepare_dynamic "$builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var89\\(3257:1111:end\\)" "mat73_readslab_be.at:1338"
( $at_check_trace; $builddir/../tools/matdump -d $srcdir/datasets/matio_test_cases_hdf_be.mat var89\(3257:1111:end\)
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "20 + 13i 
181 + 222i 
139 + 184i 
151 + 35i 
120 + 204i 
222 + 111i 
138 + 19i 
36 + 68i 
111 + 184i 
9 + 93i 
199 + 135i 
166 + 215i 
216 + 131i 
79 + 233i 
120 + 64i 
133 + 175i 
46 + 199i 
233 + 68i 
182 + 186i 
170 + 48i 
222 + 94i 
160 + 144i 
53 + 199i 
43 + 251i 
224 + 206i 
162 + 102i 
179 + 205i 
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_readslab_be.at:1338"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_681
#AT_START_682
at_fn_group_banner 682 'mat5_uncompressed_write.at:27' \
  "Write 2D double-precision array" "                " 9
at_xfail=no
(
  $as_echo "682. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:29: \$builddir/test_mat -v 5 -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_2d_numeric" "mat5_uncompressed_write.at:29"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:29"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:45: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:45"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:45"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:46" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:46"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:66: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:66"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:66"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_682
#AT_START_683
at_fn_group_banner 683 'mat5_uncompressed_write.at:69' \
  "Write 2D single-precision array" "                " 9
at_xfail=no
(
  $as_echo "683. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:71: \$builddir/test_mat -v 5 -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_2d_numeric" "mat5_uncompressed_write.at:71"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:71"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:87: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:87"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:87"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:88" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:88"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:108: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:108"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:108"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_683
#AT_START_684
at_fn_group_banner 684 'mat5_uncompressed_write.at:111' \
  "Write 2D 64-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "684. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:112" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:112"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:114: \$builddir/test_mat -v 5 -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_2d_numeric" "mat5_uncompressed_write.at:114"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:114"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:130: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:130"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:130"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:131" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:131"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:151: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:151"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:151"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_684
#AT_START_685
at_fn_group_banner 685 'mat5_uncompressed_write.at:154' \
  "Write 2D 64-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "685. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:155" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:155"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:157: \$builddir/test_mat -v 5 -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_2d_numeric" "mat5_uncompressed_write.at:157"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:157"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:173: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:173"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:173"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:174" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:174"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:194: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:194"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:194"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_685
#AT_START_686
at_fn_group_banner 686 'mat5_uncompressed_write.at:197' \
  "Write 2D 32-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "686. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:199: \$builddir/test_mat -v 5 -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_2d_numeric" "mat5_uncompressed_write.at:199"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:199"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:215: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:215"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:215"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:216" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:216"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:236: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:236"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:236"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_686
#AT_START_687
at_fn_group_banner 687 'mat5_uncompressed_write.at:239' \
  "Write 2D 32-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "687. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:241: \$builddir/test_mat -v 5 -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_2d_numeric" "mat5_uncompressed_write.at:241"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:241"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:257: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:257"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:257"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:258" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:258"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:278: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:278"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:278"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_687
#AT_START_688
at_fn_group_banner 688 'mat5_uncompressed_write.at:281' \
  "Write 2D 16-bit integer array" "                  " 9
at_xfail=no
(
  $as_echo "688. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:283: \$builddir/test_mat -v 5 -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_2d_numeric" "mat5_uncompressed_write.at:283"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:283"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:299: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:299"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:299"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:300" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:300"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:320: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:320"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:320"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_688
#AT_START_689
at_fn_group_banner 689 'mat5_uncompressed_write.at:323' \
  "Write 2D 16-bit unsigned integer array" "         " 9
at_xfail=no
(
  $as_echo "689. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:325: \$builddir/test_mat -v 5 -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_2d_numeric" "mat5_uncompressed_write.at:325"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:325"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:341: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:341"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:341"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:342" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:342"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:362: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:362"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:362"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_689
#AT_START_690
at_fn_group_banner 690 'mat5_uncompressed_write.at:365' \
  "Write 2D 8-bit integer array" "                   " 9
at_xfail=no
(
  $as_echo "690. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:367: \$builddir/test_mat -v 5 -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_2d_numeric" "mat5_uncompressed_write.at:367"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:367"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:383: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:383"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:383"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:384" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:384"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:404: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:404"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:404"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_690
#AT_START_691
at_fn_group_banner 691 'mat5_uncompressed_write.at:407' \
  "Write 2D 8-bit unsigned integer array" "          " 9
at_xfail=no
(
  $as_echo "691. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:409: \$builddir/test_mat -v 5 -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_2d_numeric" "mat5_uncompressed_write.at:409"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:409"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:425: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_uncompressed_write.at:425"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:425"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:426" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:426"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:446: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:446"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:446"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_691
#AT_START_692
at_fn_group_banner 692 'mat5_uncompressed_write.at:449' \
  "Write 2D double-precision complex array" "        " 9
at_xfail=no
(
  $as_echo "692. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:451: \$builddir/test_mat -v 5 -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_complex_2d_numeric" "mat5_uncompressed_write.at:451"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:451"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:467: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:467"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:467"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:468" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:468"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:488: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:488"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:488"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_692
#AT_START_693
at_fn_group_banner 693 'mat5_uncompressed_write.at:491' \
  "Write 2D single-precision complex array" "        " 9
at_xfail=no
(
  $as_echo "693. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:493: \$builddir/test_mat -v 5 -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_complex_2d_numeric" "mat5_uncompressed_write.at:493"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:493"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:509: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:509"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:509"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:510" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:510"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:530: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_693
#AT_START_694
at_fn_group_banner 694 'mat5_uncompressed_write.at:533' \
  "Write 2D 64-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "694. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:534" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:534"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:536: \$builddir/test_mat -v 5 -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_complex_2d_numeric" "mat5_uncompressed_write.at:536"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:536"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:552: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:552"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:552"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:553" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:553"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:573: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:573"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:573"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_694
#AT_START_695
at_fn_group_banner 695 'mat5_uncompressed_write.at:576' \
  "Write 2D 64-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "695. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:577" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:577"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:579: \$builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric" "mat5_uncompressed_write.at:579"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:579"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:595: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:595"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:595"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:596" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:596"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:616: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:616"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:616"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_695
#AT_START_696
at_fn_group_banner 696 'mat5_uncompressed_write.at:619' \
  "Write 2D 32-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "696. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:621: \$builddir/test_mat -v 5 -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_complex_2d_numeric" "mat5_uncompressed_write.at:621"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:621"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:637: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:637"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:637"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:638" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:638"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:658: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:658"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:658"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_696
#AT_START_697
at_fn_group_banner 697 'mat5_uncompressed_write.at:661' \
  "Write 2D 32-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "697. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:663: \$builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric" "mat5_uncompressed_write.at:663"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:663"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:679: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:679"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:679"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:680" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:680"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:700: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:700"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:700"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_697
#AT_START_698
at_fn_group_banner 698 'mat5_uncompressed_write.at:703' \
  "Write 2D 16-bit integer complex array" "          " 9
at_xfail=no
(
  $as_echo "698. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:705: \$builddir/test_mat -v 5 -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_complex_2d_numeric" "mat5_uncompressed_write.at:705"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:705"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:721: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:721"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:721"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:722" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:722"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:742: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:742"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:742"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_698
#AT_START_699
at_fn_group_banner 699 'mat5_uncompressed_write.at:745' \
  "Write 2D 16-bit unsigned integer complex array" " " 9
at_xfail=no
(
  $as_echo "699. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:747: \$builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric" "mat5_uncompressed_write.at:747"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:747"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:763: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:763"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:763"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:764" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:764"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:784: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:784"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:784"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_699
#AT_START_700
at_fn_group_banner 700 'mat5_uncompressed_write.at:787' \
  "Write 2D 8-bit integer complex array" "           " 9
at_xfail=no
(
  $as_echo "700. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:789: \$builddir/test_mat -v 5 -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_complex_2d_numeric" "mat5_uncompressed_write.at:789"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:789"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:805: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:805"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:805"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:806" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:806"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:826: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:826"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:826"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_700
#AT_START_701
at_fn_group_banner 701 'mat5_uncompressed_write.at:829' \
  "Write 2D 8-bit unsigned integer complex array" "  " 9
at_xfail=no
(
  $as_echo "701. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:831: \$builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric" "mat5_uncompressed_write.at:831"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:831"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:847: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:847"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:847"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:848" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:848"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:868: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:868"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:868"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_701
#AT_START_702
at_fn_group_banner 702 'mat5_uncompressed_write.at:871' \
  "Write 2D logical array" "                         " 9
at_xfail=no
(
  $as_echo "702. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:873: \$builddir/test_mat -v 5 write_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_2d_logical" "mat5_uncompressed_write.at:873"
( $at_check_trace; $builddir/test_mat -v 5 write_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:873"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:889: \$builddir/test_mat readvar test_write_2d_logical.mat l1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l1" "mat5_uncompressed_write.at:889"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:889"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:905: \$builddir/test_mat readvar test_write_2d_logical.mat l2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l2" "mat5_uncompressed_write.at:905"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:905"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l4
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:921: \$builddir/test_mat readvar test_write_2d_logical.mat l4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l4" "mat5_uncompressed_write.at:921"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:921"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:922" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:922"
cat >test_write_2d_logical.m <<'_ATEOF'

try
    load test_write_2d_logical.mat
    expdata.l0 = false(0,10);
    expdata.l1 = logical(mod(reshape(0:49,5,10),2));
    pass = true;
    pass = pass && isa(l0,class(expdata.l0));
    pass = pass && all(size(l0)==size(expdata.l0));
    pass = pass && all(l0(:)==expdata.l0(:));
    pass = pass && isa(l1,class(expdata.l1));
    pass = pass && all(size(l1)==size(expdata.l1));
    pass = pass && all(l1(:)==expdata.l1(:));
    pass = pass && isa(l2,class(expdata.l1));
    pass = pass && all(size(l2)==size(expdata.l1));
    pass = pass && all(l2(:)==expdata.l1(:));
    pass = pass && isa(l4,class(expdata.l1));
    pass = pass && all(size(l4)==size(expdata.l1));
    pass = pass && all(l4(:)==expdata.l1(:));
    if exist('l8','var')
        pass = pass && isa(l8,class(expdata.l1));
        pass = pass && all(size(l8)==size(expdata.l1));
        pass = pass && all(l8(:)==expdata.l1(:));
    end
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:957: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:957"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:957"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_702
#AT_START_703
at_fn_group_banner 703 'mat5_uncompressed_write.at:960' \
  "Write 2D sparse double-precision array" "         " 9
at_xfail=no
(
  $as_echo "703. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:962: \$builddir/test_mat -v 5 -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_sparse" "mat5_uncompressed_write.at:962"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:962"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:998: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_write.at:998"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:998"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:999" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:999"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1023: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1023"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1023"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_703
#AT_START_704
at_fn_group_banner 704 'mat5_uncompressed_write.at:1026' \
  "Write 2D sparse complex double-precision array" " " 9
at_xfail=no
(
  $as_echo "704. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1028: \$builddir/test_mat -v 5 -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_complex_sparse" "mat5_uncompressed_write.at:1028"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1028"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1064: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_write.at:1064"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1064"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1065" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1065"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1089: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1089"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1089"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_704
#AT_START_705
at_fn_group_banner 705 'mat5_uncompressed_write.at:1092' \
  "Write 2D empty array" "                           " 9
at_xfail=no
(
  $as_echo "705. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1094: \$builddir/test_mat -v 5 -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c double write_empty_2d_numeric" "mat5_uncompressed_write.at:1094"
( $at_check_trace; $builddir/test_mat -v 5 -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1094"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: empty
      Rank: 2
Dimensions: 0 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1105: \$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty" "mat5_uncompressed_write.at:1105"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_2d_numeric.mat empty
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1105"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1106" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1106"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1127: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1127"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1127"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_705
#AT_START_706
at_fn_group_banner 706 'mat5_uncompressed_write.at:1130' \
  "Write character array" "                          " 9
at_xfail=no
(
  $as_echo "706. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1131: \$builddir/test_mat -v 5 write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_char" "mat5_uncompressed_write.at:1131"
( $at_check_trace; $builddir/test_mat -v 5 write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1131"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
[{]}\|;:'",<.>/?          
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1146: \$builddir/test_mat readvar test_write_char.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_char.mat a" "mat5_uncompressed_write.at:1146"
( $at_check_trace; $builddir/test_mat readvar test_write_char.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1146"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1147" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1147"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1168: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1168"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_706
#AT_START_707
at_fn_group_banner 707 'mat5_uncompressed_write.at:1171' \
  "Write empty structure array" "                    " 9
at_xfail=no
(
  $as_echo "707. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1173: \$builddir/test_mat -v 5 write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_empty_struct" "mat5_uncompressed_write.at:1173"
( $at_check_trace; $builddir/test_mat -v 5 write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1173"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1184: \$builddir/test_mat readvar test_write_empty_struct.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var1" "mat5_uncompressed_write.at:1184"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1184"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1199: \$builddir/test_mat readvar test_write_empty_struct.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var2" "mat5_uncompressed_write.at:1199"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1199"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var3
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1224: \$builddir/test_mat readvar test_write_empty_struct.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var3" "mat5_uncompressed_write.at:1224"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1224"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var4
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1260: \$builddir/test_mat readvar test_write_empty_struct.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var4" "mat5_uncompressed_write.at:1260"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1260"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1261" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1261"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1288: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1288"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1288"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_707
#AT_START_708
at_fn_group_banner 708 'mat5_uncompressed_write.at:1291' \
  "Write structure array with 2D double-precision fields" "" 9
at_xfail=no
(
  $as_echo "708. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1293: \$builddir/test_mat -v 5 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_struct_2d_numeric" "mat5_uncompressed_write.at:1293"
( $at_check_trace; $builddir/test_mat -v 5 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1293"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1344: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1344"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1344"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1345" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1345"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1370: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1370"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1370"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_708
#AT_START_709
at_fn_group_banner 709 'mat5_uncompressed_write.at:1373' \
  "Write structure array with 2D single-precision fields" "" 9
at_xfail=no
(
  $as_echo "709. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1375: \$builddir/test_mat -v 5 -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_struct_2d_numeric" "mat5_uncompressed_write.at:1375"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1375"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1426: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1426"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1426"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1427" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1427"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1452: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1452"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1452"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_709
#AT_START_710
at_fn_group_banner 710 'mat5_uncompressed_write.at:1455' \
  "Write structure array with 2D 64-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "710. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1456" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1456"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1458: \$builddir/test_mat -v 5 -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_struct_2d_numeric" "mat5_uncompressed_write.at:1458"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1458"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1509: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1509"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1509"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1510" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1510"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1535: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1535"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1535"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_710
#AT_START_711
at_fn_group_banner 711 'mat5_uncompressed_write.at:1538' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "711. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:1539" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1539"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1541: \$builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric" "mat5_uncompressed_write.at:1541"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1541"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1592: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1592"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1592"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1593" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1593"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1618: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1618"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1618"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_711
#AT_START_712
at_fn_group_banner 712 'mat5_uncompressed_write.at:1621' \
  "Write structure array with 2D 32-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "712. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1623: \$builddir/test_mat -v 5 -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_struct_2d_numeric" "mat5_uncompressed_write.at:1623"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1623"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1674: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1674"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1674"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1675" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1675"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1700: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1700"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1700"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_712
#AT_START_713
at_fn_group_banner 713 'mat5_uncompressed_write.at:1703' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "713. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1705: \$builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric" "mat5_uncompressed_write.at:1705"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1705"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1756: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1756"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1756"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1757" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1757"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1782: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1782"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1782"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_713
#AT_START_714
at_fn_group_banner 714 'mat5_uncompressed_write.at:1785' \
  "Write structure array with 2D 16-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "714. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1787: \$builddir/test_mat -v 5 -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_struct_2d_numeric" "mat5_uncompressed_write.at:1787"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1787"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1838: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1838"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1838"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1839" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1839"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1864: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1864"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1864"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_714
#AT_START_715
at_fn_group_banner 715 'mat5_uncompressed_write.at:1867' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "715. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1869: \$builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric" "mat5_uncompressed_write.at:1869"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1869"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1920: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:1920"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1920"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:1921" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:1921"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1946: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:1946"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1946"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_715
#AT_START_716
at_fn_group_banner 716 'mat5_uncompressed_write.at:1949' \
  "Write structure array with 2D 8-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "716. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:1951: \$builddir/test_mat -v 5 -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_struct_2d_numeric" "mat5_uncompressed_write.at:1951"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:1951"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2002: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:2002"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2002"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2003" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2003"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2028: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2028"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2028"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_716
#AT_START_717
at_fn_group_banner 717 'mat5_uncompressed_write.at:2031' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "717. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2033: \$builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric" "mat5_uncompressed_write.at:2033"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2033"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2084: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_uncompressed_write.at:2084"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2084"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2085" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2085"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2110: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2110"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2110"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_717
#AT_START_718
at_fn_group_banner 718 'mat5_uncompressed_write.at:2113' \
  "Write structure array with 2D double-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "718. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2115: \$builddir/test_mat -v 5 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2115"
( $at_check_trace; $builddir/test_mat -v 5 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2115"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2166: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2166"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2166"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2167" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2167"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2192: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2192"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2192"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_718
#AT_START_719
at_fn_group_banner 719 'mat5_uncompressed_write.at:2195' \
  "Write structure array with 2D single-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "719. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2197: \$builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2197"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2197"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2248: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2248"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2248"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2249" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2249"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2274: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2274"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2274"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_719
#AT_START_720
at_fn_group_banner 720 'mat5_uncompressed_write.at:2277' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "720. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:2278" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2278"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2280: \$builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2280"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2280"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2331: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2331"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2331"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2332" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2332"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2357: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2357"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2357"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_720
#AT_START_721
at_fn_group_banner 721 'mat5_uncompressed_write.at:2360' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "721. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:2361" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2361"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2363: \$builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2363"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2363"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2414: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2414"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2414"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2415" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2415"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2440: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2440"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2440"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_721
#AT_START_722
at_fn_group_banner 722 'mat5_uncompressed_write.at:2443' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "722. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2445: \$builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2445"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2445"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2496: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2496"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2496"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2497" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2497"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2522: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2522"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2522"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_722
#AT_START_723
at_fn_group_banner 723 'mat5_uncompressed_write.at:2525' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "723. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2527: \$builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2527"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2527"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2578: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2578"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2578"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2579" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2579"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2604: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2604"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2604"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_723
#AT_START_724
at_fn_group_banner 724 'mat5_uncompressed_write.at:2607' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "724. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2609: \$builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2609"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2609"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2660: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2660"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2660"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2661" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2661"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2686: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2686"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2686"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_724
#AT_START_725
at_fn_group_banner 725 'mat5_uncompressed_write.at:2689' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "725. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2691: \$builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2691"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2691"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2742: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2742"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2742"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2743" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2743"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2768: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2768"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2768"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_725
#AT_START_726
at_fn_group_banner 726 'mat5_uncompressed_write.at:2771' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "726. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2773: \$builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2773"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2773"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2824: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2824"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2824"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2825" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2825"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2850: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2850"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2850"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_726
#AT_START_727
at_fn_group_banner 727 'mat5_uncompressed_write.at:2853' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "727. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2855: \$builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric" "mat5_uncompressed_write.at:2855"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2855"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2906: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:2906"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2906"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2907" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2907"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2932: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:2932"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2932"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_727
#AT_START_728
at_fn_group_banner 728 'mat5_uncompressed_write.at:2935' \
  "Write structure array with 2D logical fields" "   " 9
at_xfail=no
(
  $as_echo "728. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2937: \$builddir/test_mat -v 5 write_struct_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_struct_2d_logical" "mat5_uncompressed_write.at:2937"
( $at_check_trace; $builddir/test_mat -v 5 write_struct_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2937"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
}
      Name: field1
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:2991: \$builddir/test_mat readvar test_write_struct_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_logical.mat a" "mat5_uncompressed_write.at:2991"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:2991"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:2992" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:2992"
cat >test_write_struct_2d_logical.m <<'_ATEOF'

try
    load test_write_struct_2d_logical.mat
    expdata(1).field1 = logical(mod(reshape(0:49,5,10),2));
    expdata(1).field2 = ~expdata(1).field1;
    expdata(2).field1 = false(0,5);
    expdata(2).field2 = tril(true(5));
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3017: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3017"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3017"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_728
#AT_START_729
at_fn_group_banner 729 'mat5_uncompressed_write.at:3020' \
  "Write empty cell array" "                         " 9
at_xfail=no
(
  $as_echo "729. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3021: \$builddir/test_mat -v 5 write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_empty_cell" "mat5_uncompressed_write.at:3021"
( $at_check_trace; $builddir/test_mat -v 5 write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3021"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3032: \$builddir/test_mat readvar test_write_empty_cell.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var1" "mat5_uncompressed_write.at:3032"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3032"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3055: \$builddir/test_mat readvar test_write_empty_cell.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var2" "mat5_uncompressed_write.at:3055"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3055"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3056" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3056"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3076: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3076"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3076"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_729
#AT_START_730
at_fn_group_banner 730 'mat5_uncompressed_write.at:3079' \
  "Write cell array with 2D double-precision fields" "" 9
at_xfail=no
(
  $as_echo "730. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3081: \$builddir/test_mat -v 5 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_cell_2d_numeric" "mat5_uncompressed_write.at:3081"
( $at_check_trace; $builddir/test_mat -v 5 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3081"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3128: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3128"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3128"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3129" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3129"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3152: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3152"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3152"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_730
#AT_START_731
at_fn_group_banner 731 'mat5_uncompressed_write.at:3155' \
  "Write cell array with 2D single-precision fields" "" 9
at_xfail=no
(
  $as_echo "731. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3157: \$builddir/test_mat -v 5 -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_cell_2d_numeric" "mat5_uncompressed_write.at:3157"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3157"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3204: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3204"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3204"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3205" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3205"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3228: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3228"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3228"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_731
#AT_START_732
at_fn_group_banner 732 'mat5_uncompressed_write.at:3231' \
  "Write cell array with 2D 64-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "732. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:3232" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3232"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3234: \$builddir/test_mat -v 5 -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_cell_2d_numeric" "mat5_uncompressed_write.at:3234"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3234"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3281: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3281"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3281"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3282" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3282"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3305: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3305"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3305"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_732
#AT_START_733
at_fn_group_banner 733 'mat5_uncompressed_write.at:3308' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "733. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:3309" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3309"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3311: \$builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric" "mat5_uncompressed_write.at:3311"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3311"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3358: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3358"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3358"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3359" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3359"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3382: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3382"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3382"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_733
#AT_START_734
at_fn_group_banner 734 'mat5_uncompressed_write.at:3385' \
  "Write cell array with 2D 32-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "734. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3387: \$builddir/test_mat -v 5 -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_cell_2d_numeric" "mat5_uncompressed_write.at:3387"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3387"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3434: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3434"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3434"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3435" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3435"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3458: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3458"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3458"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_734
#AT_START_735
at_fn_group_banner 735 'mat5_uncompressed_write.at:3461' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "735. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3463: \$builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric" "mat5_uncompressed_write.at:3463"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3463"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3510: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3510"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3510"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3511" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3511"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3534: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3534"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3534"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_735
#AT_START_736
at_fn_group_banner 736 'mat5_uncompressed_write.at:3537' \
  "Write cell array with 2D 16-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "736. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3539: \$builddir/test_mat -v 5 -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_cell_2d_numeric" "mat5_uncompressed_write.at:3539"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3539"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3586: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3586"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3586"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3587" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3587"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3610: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3610"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3610"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_736
#AT_START_737
at_fn_group_banner 737 'mat5_uncompressed_write.at:3613' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "737. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3615: \$builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric" "mat5_uncompressed_write.at:3615"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3615"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3662: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3662"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3662"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3663" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3663"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3686: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3686"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3686"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_737
#AT_START_738
at_fn_group_banner 738 'mat5_uncompressed_write.at:3689' \
  "Write cell array with 2D 8-bit signed integer fields" "" 9
at_xfail=no
(
  $as_echo "738. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3691: \$builddir/test_mat -v 5 -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_cell_2d_numeric" "mat5_uncompressed_write.at:3691"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3691"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3738: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3738"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3738"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3739" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3739"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3762: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3762"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3762"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_738
#AT_START_739
at_fn_group_banner 739 'mat5_uncompressed_write.at:3765' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 9
at_xfail=no
(
  $as_echo "739. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3767: \$builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric" "mat5_uncompressed_write.at:3767"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3767"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3814: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_uncompressed_write.at:3814"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3814"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3815" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3815"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3838: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3838"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3838"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_739
#AT_START_740
at_fn_group_banner 740 'mat5_uncompressed_write.at:3841' \
  "Write cell array with 2D double-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "740. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3843: \$builddir/test_mat -v 5 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:3843"
( $at_check_trace; $builddir/test_mat -v 5 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3843"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3890: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:3890"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3890"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3891" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3891"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3916: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3916"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3916"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_740
#AT_START_741
at_fn_group_banner 741 'mat5_uncompressed_write.at:3919' \
  "Write cell array with 2D single-precision complex fields" "" 9
at_xfail=no
(
  $as_echo "741. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3921: \$builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:3921"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3921"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3968: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:3968"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3968"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:3969" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3969"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:3994: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:3994"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:3994"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_741
#AT_START_742
at_fn_group_banner 742 'mat5_uncompressed_write.at:3997' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "742. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:3998" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:3998"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4000: \$builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4000"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4000"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4047: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4047"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4047"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4048" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4048"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4073: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4073"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4073"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_742
#AT_START_743
at_fn_group_banner 743 'mat5_uncompressed_write.at:4076' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "743. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_write.at:4077" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4077"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4079: \$builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4079"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4079"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4126: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4126"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4126"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4127" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4127"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4152: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4152"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4152"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_743
#AT_START_744
at_fn_group_banner 744 'mat5_uncompressed_write.at:4155' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "744. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4157: \$builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4157"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4157"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4204: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4204"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4204"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4205" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4205"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4230: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4230"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4230"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_744
#AT_START_745
at_fn_group_banner 745 'mat5_uncompressed_write.at:4233' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "745. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4235: \$builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4235"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4235"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4282: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4282"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4282"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4283" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4283"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4308: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4308"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4308"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_745
#AT_START_746
at_fn_group_banner 746 'mat5_uncompressed_write.at:4311' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "746. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4313: \$builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4313"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4313"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4360: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4360"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4360"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4361" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4361"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4386: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4386"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4386"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_746
#AT_START_747
at_fn_group_banner 747 'mat5_uncompressed_write.at:4389' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "747. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4391: \$builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4391"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4391"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4438: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4438"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4438"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4439" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4439"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4464: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4464"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4464"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_747
#AT_START_748
at_fn_group_banner 748 'mat5_uncompressed_write.at:4467' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 9
at_xfail=no
(
  $as_echo "748. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4469: \$builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4469"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4469"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4516: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4516"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4516"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4517" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4517"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4542: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4542"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_748
#AT_START_749
at_fn_group_banner 749 'mat5_uncompressed_write.at:4545' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 9
at_xfail=no
(
  $as_echo "749. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4547: \$builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric" "mat5_uncompressed_write.at:4547"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4547"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4594: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_uncompressed_write.at:4594"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4594"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4595" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4595"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4620: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4620"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4620"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_749
#AT_START_750
at_fn_group_banner 750 'mat5_uncompressed_write.at:4623' \
  "Write cell array with 2D logical fields" "        " 9
at_xfail=no
(
  $as_echo "750. $at_setup_line: testing $at_desc ..."
  $at_traceon

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4625: \$builddir/test_mat -v 5 write_cell_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 write_cell_2d_logical" "mat5_uncompressed_write.at:4625"
( $at_check_trace; $builddir/test_mat -v 5 write_cell_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4625"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 5 x 5
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4675: \$builddir/test_mat readvar test_write_cell_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_logical.mat a" "mat5_uncompressed_write.at:4675"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4675"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_uncompressed_write.at:4676" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_write.at:4676"
cat >test_write_cell_2d_logical.m <<'_ATEOF'

try
    load test_write_cell_2d_logical.mat
    expdata = {triu(true(5));tril(true(5));logical(eye(5));false(0,5)};
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_write.at:4698: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_uncompressed_write.at:4698"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_write.at:4698"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_750
#AT_START_751
at_fn_group_banner 751 'mat5_compressed_write.at:27' \
  "Write 2D double-precision array" "                " 10
at_xfail=no
(
  $as_echo "751. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:28" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:28"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:30: \$builddir/test_mat -v 5 -z -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_2d_numeric" "mat5_compressed_write.at:30"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:30"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:46: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:46"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:47" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:47"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:67: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:67"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_751
#AT_START_752
at_fn_group_banner 752 'mat5_compressed_write.at:70' \
  "Write 2D single-precision array" "                " 10
at_xfail=no
(
  $as_echo "752. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:71" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:71"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:73: \$builddir/test_mat -v 5 -z -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_2d_numeric" "mat5_compressed_write.at:73"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:89: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:89"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:89"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:90" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:90"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:110: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:110"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:110"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_752
#AT_START_753
at_fn_group_banner 753 'mat5_compressed_write.at:113' \
  "Write 2D 64-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "753. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:114" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:114"
$as_echo "mat5_compressed_write.at:115" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:115"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:117: \$builddir/test_mat -v 5 -z -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_2d_numeric" "mat5_compressed_write.at:117"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:117"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:133: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:133"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:133"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:134" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:134"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:154: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:154"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_753
#AT_START_754
at_fn_group_banner 754 'mat5_compressed_write.at:157' \
  "Write 2D 64-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "754. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:158" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:158"
$as_echo "mat5_compressed_write.at:159" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:159"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:161: \$builddir/test_mat -v 5 -z -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_2d_numeric" "mat5_compressed_write.at:161"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:161"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:177: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:177"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:178" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:178"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:198: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:198"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:198"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_754
#AT_START_755
at_fn_group_banner 755 'mat5_compressed_write.at:201' \
  "Write 2D 32-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "755. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:202" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:202"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:204: \$builddir/test_mat -v 5 -z -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_2d_numeric" "mat5_compressed_write.at:204"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:220: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:220"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:220"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:221" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:221"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:241: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:241"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:241"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_755
#AT_START_756
at_fn_group_banner 756 'mat5_compressed_write.at:244' \
  "Write 2D 32-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "756. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:245" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:245"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:247: \$builddir/test_mat -v 5 -z -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_2d_numeric" "mat5_compressed_write.at:247"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:247"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:263: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:263"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:263"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:264" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:264"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:284: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:284"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:284"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_756
#AT_START_757
at_fn_group_banner 757 'mat5_compressed_write.at:287' \
  "Write 2D 16-bit integer array" "                  " 10
at_xfail=no
(
  $as_echo "757. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:288" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:288"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:290: \$builddir/test_mat -v 5 -z -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_2d_numeric" "mat5_compressed_write.at:290"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:290"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:306: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:306"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:306"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:307" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:307"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:327: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:327"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:327"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_757
#AT_START_758
at_fn_group_banner 758 'mat5_compressed_write.at:330' \
  "Write 2D 16-bit unsigned integer array" "         " 10
at_xfail=no
(
  $as_echo "758. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:331" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:331"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:333: \$builddir/test_mat -v 5 -z -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_2d_numeric" "mat5_compressed_write.at:333"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:333"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:349: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:349"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:349"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:350" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:350"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:370: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:370"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:370"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_758
#AT_START_759
at_fn_group_banner 759 'mat5_compressed_write.at:373' \
  "Write 2D 8-bit integer array" "                   " 10
at_xfail=no
(
  $as_echo "759. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:374" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:374"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:376: \$builddir/test_mat -v 5 -z -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_2d_numeric" "mat5_compressed_write.at:376"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:376"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:392: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:392"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:392"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:393" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:393"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:413: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:413"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:413"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_759
#AT_START_760
at_fn_group_banner 760 'mat5_compressed_write.at:416' \
  "Write 2D 8-bit unsigned integer array" "          " 10
at_xfail=no
(
  $as_echo "760. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:417" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:417"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:419: \$builddir/test_mat -v 5 -z -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_2d_numeric" "mat5_compressed_write.at:419"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:419"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:435: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat5_compressed_write.at:435"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:435"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:436" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:436"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:456: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:456"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:456"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_760
#AT_START_761
at_fn_group_banner 761 'mat5_compressed_write.at:459' \
  "Write 2D double-precision complex array" "        " 10
at_xfail=no
(
  $as_echo "761. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:460" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:460"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:462: \$builddir/test_mat -v 5 -z -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_complex_2d_numeric" "mat5_compressed_write.at:462"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:462"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:478: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:478"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:479" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:479"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:499: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:499"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:499"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_761
#AT_START_762
at_fn_group_banner 762 'mat5_compressed_write.at:502' \
  "Write 2D single-precision complex array" "        " 10
at_xfail=no
(
  $as_echo "762. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:503" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:503"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:505: \$builddir/test_mat -v 5 -z -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_complex_2d_numeric" "mat5_compressed_write.at:505"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:505"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:521: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:521"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:521"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:522" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:522"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:542: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:542"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_762
#AT_START_763
at_fn_group_banner 763 'mat5_compressed_write.at:545' \
  "Write 2D 64-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "763. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:546" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:546"
$as_echo "mat5_compressed_write.at:547" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:547"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:549: \$builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric" "mat5_compressed_write.at:549"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:549"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:565: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:565"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:565"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:566" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:566"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:586: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:586"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:586"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_763
#AT_START_764
at_fn_group_banner 764 'mat5_compressed_write.at:589' \
  "Write 2D 64-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "764. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:590" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:590"
$as_echo "mat5_compressed_write.at:591" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:591"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:593: \$builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric" "mat5_compressed_write.at:593"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:593"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:609: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:609"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:609"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:610" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:610"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:630: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:630"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:630"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_764
#AT_START_765
at_fn_group_banner 765 'mat5_compressed_write.at:633' \
  "Write 2D 32-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "765. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:634" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:634"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:636: \$builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric" "mat5_compressed_write.at:636"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:636"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:652: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:652"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:652"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:653" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:653"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:673: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:673"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:673"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_765
#AT_START_766
at_fn_group_banner 766 'mat5_compressed_write.at:676' \
  "Write 2D 32-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "766. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:677" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:677"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:679: \$builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric" "mat5_compressed_write.at:679"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:679"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:695: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:695"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:695"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:696" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:696"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:716: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:716"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:716"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_766
#AT_START_767
at_fn_group_banner 767 'mat5_compressed_write.at:719' \
  "Write 2D 16-bit integer complex array" "          " 10
at_xfail=no
(
  $as_echo "767. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:720" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:720"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:722: \$builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric" "mat5_compressed_write.at:722"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:722"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:738: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:738"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:738"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:739" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:739"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:759: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:759"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:759"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_767
#AT_START_768
at_fn_group_banner 768 'mat5_compressed_write.at:762' \
  "Write 2D 16-bit unsigned integer complex array" " " 10
at_xfail=no
(
  $as_echo "768. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:763" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:763"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:765: \$builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric" "mat5_compressed_write.at:765"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:765"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:781: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:781"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:781"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:782" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:782"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:802: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:802"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:802"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_768
#AT_START_769
at_fn_group_banner 769 'mat5_compressed_write.at:805' \
  "Write 2D 8-bit integer complex array" "           " 10
at_xfail=no
(
  $as_echo "769. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:806" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:806"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:808: \$builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric" "mat5_compressed_write.at:808"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:808"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:824: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:824"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:824"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:825" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:825"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:845: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:845"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:845"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_769
#AT_START_770
at_fn_group_banner 770 'mat5_compressed_write.at:848' \
  "Write 2D 8-bit unsigned integer complex array" "  " 10
at_xfail=no
(
  $as_echo "770. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:849" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:849"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:851: \$builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric" "mat5_compressed_write.at:851"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:851"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:867: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat5_compressed_write.at:867"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:868" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:868"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:888: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:888"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:888"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_770
#AT_START_771
at_fn_group_banner 771 'mat5_compressed_write.at:891' \
  "Write 2D logical array" "                         " 10
at_xfail=no
(
  $as_echo "771. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:892" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:892"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:894: \$builddir/test_mat -v 5 -z write_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_2d_logical" "mat5_compressed_write.at:894"
( $at_check_trace; $builddir/test_mat -v 5 -z write_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:894"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:910: \$builddir/test_mat readvar test_write_2d_logical.mat l1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l1" "mat5_compressed_write.at:910"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:910"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:926: \$builddir/test_mat readvar test_write_2d_logical.mat l2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l2" "mat5_compressed_write.at:926"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:926"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l4
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:942: \$builddir/test_mat readvar test_write_2d_logical.mat l4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l4" "mat5_compressed_write.at:942"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:942"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:943" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:943"
cat >test_write_2d_logical.m <<'_ATEOF'

try
    load test_write_2d_logical.mat
    expdata.l0 = false(0,10);
    expdata.l1 = logical(mod(reshape(0:49,5,10),2));
    pass = true;
    pass = pass && isa(l0,class(expdata.l0));
    pass = pass && all(size(l0)==size(expdata.l0));
    pass = pass && all(l0(:)==expdata.l0(:));
    pass = pass && isa(l1,class(expdata.l1));
    pass = pass && all(size(l1)==size(expdata.l1));
    pass = pass && all(l1(:)==expdata.l1(:));
    pass = pass && isa(l2,class(expdata.l1));
    pass = pass && all(size(l2)==size(expdata.l1));
    pass = pass && all(l2(:)==expdata.l1(:));
    pass = pass && isa(l4,class(expdata.l1));
    pass = pass && all(size(l4)==size(expdata.l1));
    pass = pass && all(l4(:)==expdata.l1(:));
    if exist('l8','var')
        pass = pass && isa(l8,class(expdata.l1));
        pass = pass && all(size(l8)==size(expdata.l1));
        pass = pass && all(l8(:)==expdata.l1(:));
    end
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:978: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:978"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:978"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_771
#AT_START_772
at_fn_group_banner 772 'mat5_compressed_write.at:981' \
  "Write 2D sparse double-precision array" "         " 10
at_xfail=no
(
  $as_echo "772. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:982" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:982"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:984: \$builddir/test_mat -v 5 -z -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_sparse" "mat5_compressed_write.at:984"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:984"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1020: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_write.at:1020"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1020"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1021" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1021"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1045: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1045"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1045"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_772
#AT_START_773
at_fn_group_banner 773 'mat5_compressed_write.at:1048' \
  "Write 2D sparse complex double-precision array" " " 10
at_xfail=no
(
  $as_echo "773. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1049" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1049"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1051: \$builddir/test_mat -v 5 -z -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_complex_sparse" "mat5_compressed_write.at:1051"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1051"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1087: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_write.at:1087"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1087"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1088" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1088"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1112: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1112"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1112"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_773
#AT_START_774
at_fn_group_banner 774 'mat5_compressed_write.at:1115' \
  "Write 2D empty array" "                           " 10
at_xfail=no
(
  $as_echo "774. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1116" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1116"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1118: \$builddir/test_mat -v 5 -z -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c double write_empty_2d_numeric" "mat5_compressed_write.at:1118"
( $at_check_trace; $builddir/test_mat -v 5 -z -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1118"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: empty
      Rank: 2
Dimensions: 0 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1129: \$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty" "mat5_compressed_write.at:1129"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_2d_numeric.mat empty
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1129"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1130" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1130"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1151: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1151"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1151"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_774
#AT_START_775
at_fn_group_banner 775 'mat5_compressed_write.at:1154' \
  "Write character array" "                          " 10
at_xfail=no
(
  $as_echo "775. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1155" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1155"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1156: \$builddir/test_mat -v 5 -z write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_char" "mat5_compressed_write.at:1156"
( $at_check_trace; $builddir/test_mat -v 5 -z write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1156"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
[{]}\|;:'",<.>/?          
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1171: \$builddir/test_mat readvar test_write_char.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_char.mat a" "mat5_compressed_write.at:1171"
( $at_check_trace; $builddir/test_mat readvar test_write_char.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1171"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1172" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1172"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1193: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1193"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1193"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_775
#AT_START_776
at_fn_group_banner 776 'mat5_compressed_write.at:1196' \
  "Write empty structure array" "                    " 10
at_xfail=no
(
  $as_echo "776. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1197" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1197"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1199: \$builddir/test_mat -v 5 -z write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_empty_struct" "mat5_compressed_write.at:1199"
( $at_check_trace; $builddir/test_mat -v 5 -z write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1199"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1210: \$builddir/test_mat readvar test_write_empty_struct.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var1" "mat5_compressed_write.at:1210"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1210"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1225: \$builddir/test_mat readvar test_write_empty_struct.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var2" "mat5_compressed_write.at:1225"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1225"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var3
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1250: \$builddir/test_mat readvar test_write_empty_struct.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var3" "mat5_compressed_write.at:1250"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1250"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var4
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1286: \$builddir/test_mat readvar test_write_empty_struct.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var4" "mat5_compressed_write.at:1286"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1286"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1287" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1287"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1314: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1314"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1314"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_776
#AT_START_777
at_fn_group_banner 777 'mat5_compressed_write.at:1317' \
  "Write structure array with 2D double-precision fields" "" 10
at_xfail=no
(
  $as_echo "777. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1318" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1318"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1320: \$builddir/test_mat -v 5 -z write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_struct_2d_numeric" "mat5_compressed_write.at:1320"
( $at_check_trace; $builddir/test_mat -v 5 -z write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1320"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1371: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1371"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1371"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1372" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1372"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1397: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1397"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1397"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_777
#AT_START_778
at_fn_group_banner 778 'mat5_compressed_write.at:1400' \
  "Write structure array with 2D single-precision fields" "" 10
at_xfail=no
(
  $as_echo "778. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1401" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1401"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1403: \$builddir/test_mat -v 5 -z -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_struct_2d_numeric" "mat5_compressed_write.at:1403"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1403"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1454: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1454"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1454"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1455" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1455"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1480: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1480"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1480"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_778
#AT_START_779
at_fn_group_banner 779 'mat5_compressed_write.at:1483' \
  "Write structure array with 2D 64-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "779. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1484" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1484"
$as_echo "mat5_compressed_write.at:1485" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1485"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1487: \$builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric" "mat5_compressed_write.at:1487"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1487"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1538: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1538"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1538"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1539" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1539"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1564: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1564"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1564"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_779
#AT_START_780
at_fn_group_banner 780 'mat5_compressed_write.at:1567' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "780. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1568" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1568"
$as_echo "mat5_compressed_write.at:1569" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1569"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1571: \$builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric" "mat5_compressed_write.at:1571"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1571"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1622: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1622"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1622"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1623" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1623"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1648: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1648"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1648"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_780
#AT_START_781
at_fn_group_banner 781 'mat5_compressed_write.at:1651' \
  "Write structure array with 2D 32-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "781. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1652" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1652"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1654: \$builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric" "mat5_compressed_write.at:1654"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1654"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1705: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1705"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1705"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1706" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1706"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1731: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1731"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1731"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_781
#AT_START_782
at_fn_group_banner 782 'mat5_compressed_write.at:1734' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "782. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1735" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1735"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1737: \$builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric" "mat5_compressed_write.at:1737"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1737"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1788: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1788"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1788"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1789" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1789"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1814: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1814"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1814"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_782
#AT_START_783
at_fn_group_banner 783 'mat5_compressed_write.at:1817' \
  "Write structure array with 2D 16-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "783. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1818" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1818"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1820: \$builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric" "mat5_compressed_write.at:1820"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1820"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1871: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1871"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1871"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1872" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1872"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1897: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1897"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1897"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_783
#AT_START_784
at_fn_group_banner 784 'mat5_compressed_write.at:1900' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "784. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1901" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1901"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1903: \$builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric" "mat5_compressed_write.at:1903"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1903"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1954: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:1954"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1954"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:1955" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1955"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1980: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:1980"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1980"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_784
#AT_START_785
at_fn_group_banner 785 'mat5_compressed_write.at:1983' \
  "Write structure array with 2D 8-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "785. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:1984" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:1984"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:1986: \$builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric" "mat5_compressed_write.at:1986"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:1986"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2037: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:2037"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2037"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2038" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2038"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2063: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2063"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2063"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_785
#AT_START_786
at_fn_group_banner 786 'mat5_compressed_write.at:2066' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "786. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2067" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2067"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2069: \$builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric" "mat5_compressed_write.at:2069"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2069"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2120: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat5_compressed_write.at:2120"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2120"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2121" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2121"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2146: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2146"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2146"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_786
#AT_START_787
at_fn_group_banner 787 'mat5_compressed_write.at:2149' \
  "Write structure array with 2D double-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "787. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2150" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2150"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2152: \$builddir/test_mat -v 5 -z write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_struct_complex_2d_numeric" "mat5_compressed_write.at:2152"
( $at_check_trace; $builddir/test_mat -v 5 -z write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2152"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2203: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2203"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2203"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2204" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2204"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2229: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2229"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2229"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_787
#AT_START_788
at_fn_group_banner 788 'mat5_compressed_write.at:2232' \
  "Write structure array with 2D single-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "788. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2233" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2233"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2235: \$builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric" "mat5_compressed_write.at:2235"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2235"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2286: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2286"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2286"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2287" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2287"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2312: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2312"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2312"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_788
#AT_START_789
at_fn_group_banner 789 'mat5_compressed_write.at:2315' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "789. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2316" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2316"
$as_echo "mat5_compressed_write.at:2317" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2317"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2319: \$builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2319"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2319"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2370: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2370"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2370"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2371" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2371"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2396: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2396"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2396"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_789
#AT_START_790
at_fn_group_banner 790 'mat5_compressed_write.at:2399' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "790. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2400" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2400"
$as_echo "mat5_compressed_write.at:2401" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2401"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2403: \$builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2403"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2403"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2454: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2454"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2454"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2455" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2455"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2480: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2480"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2480"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_790
#AT_START_791
at_fn_group_banner 791 'mat5_compressed_write.at:2483' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "791. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2484" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2484"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2486: \$builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2486"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2486"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2537: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2537"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2537"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2538" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2538"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2563: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2563"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2563"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_791
#AT_START_792
at_fn_group_banner 792 'mat5_compressed_write.at:2566' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "792. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2567" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2567"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2569: \$builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2569"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2569"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2620: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2620"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2620"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2621" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2621"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2646: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2646"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2646"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_792
#AT_START_793
at_fn_group_banner 793 'mat5_compressed_write.at:2649' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "793. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2650" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2650"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2652: \$builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2652"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2652"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2703: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2703"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2703"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2704" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2704"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2729: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2729"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2729"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_793
#AT_START_794
at_fn_group_banner 794 'mat5_compressed_write.at:2732' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "794. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2733" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2733"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2735: \$builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2735"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2735"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2786: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2786"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2786"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2787" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2787"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2812: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2812"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2812"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_794
#AT_START_795
at_fn_group_banner 795 'mat5_compressed_write.at:2815' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "795. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2816" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2816"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2818: \$builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2818"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2818"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2869: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2869"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2869"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2870" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2870"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2895: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2895"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2895"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_795
#AT_START_796
at_fn_group_banner 796 'mat5_compressed_write.at:2898' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "796. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2899" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2899"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2901: \$builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric" "mat5_compressed_write.at:2901"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2901"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2952: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat5_compressed_write.at:2952"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2952"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:2953" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2953"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2978: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:2978"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2978"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_796
#AT_START_797
at_fn_group_banner 797 'mat5_compressed_write.at:2981' \
  "Write structure array with 2D logical fields" "   " 10
at_xfail=no
(
  $as_echo "797. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:2982" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:2982"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:2984: \$builddir/test_mat -v 5 -z write_struct_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_struct_2d_logical" "mat5_compressed_write.at:2984"
( $at_check_trace; $builddir/test_mat -v 5 -z write_struct_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:2984"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
}
      Name: field1
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3038: \$builddir/test_mat readvar test_write_struct_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_logical.mat a" "mat5_compressed_write.at:3038"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3038"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3039" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3039"
cat >test_write_struct_2d_logical.m <<'_ATEOF'

try
    load test_write_struct_2d_logical.mat
    expdata(1).field1 = logical(mod(reshape(0:49,5,10),2));
    expdata(1).field2 = ~expdata(1).field1;
    expdata(2).field1 = false(0,5);
    expdata(2).field2 = tril(true(5));
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3064: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3064"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3064"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_797
#AT_START_798
at_fn_group_banner 798 'mat5_compressed_write.at:3067' \
  "Write empty cell array" "                         " 10
at_xfail=no
(
  $as_echo "798. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3068" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3068"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3069: \$builddir/test_mat -v 5 -z write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_empty_cell" "mat5_compressed_write.at:3069"
( $at_check_trace; $builddir/test_mat -v 5 -z write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3069"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3080: \$builddir/test_mat readvar test_write_empty_cell.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var1" "mat5_compressed_write.at:3080"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3080"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3103: \$builddir/test_mat readvar test_write_empty_cell.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var2" "mat5_compressed_write.at:3103"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3103"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3104" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3104"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3124: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3124"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3124"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_798
#AT_START_799
at_fn_group_banner 799 'mat5_compressed_write.at:3127' \
  "Write cell array with 2D double-precision fields" "" 10
at_xfail=no
(
  $as_echo "799. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3128" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3128"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3130: \$builddir/test_mat -v 5 -z write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_cell_2d_numeric" "mat5_compressed_write.at:3130"
( $at_check_trace; $builddir/test_mat -v 5 -z write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3130"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3177: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3177"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3177"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3178" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3178"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3201: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3201"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3201"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_799
#AT_START_800
at_fn_group_banner 800 'mat5_compressed_write.at:3204' \
  "Write cell array with 2D single-precision fields" "" 10
at_xfail=no
(
  $as_echo "800. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3205" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3205"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3207: \$builddir/test_mat -v 5 -z -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_cell_2d_numeric" "mat5_compressed_write.at:3207"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3207"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3254: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3254"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3254"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3255" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3255"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3278: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3278"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3278"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_800
#AT_START_801
at_fn_group_banner 801 'mat5_compressed_write.at:3281' \
  "Write cell array with 2D 64-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "801. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3282" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3282"
$as_echo "mat5_compressed_write.at:3283" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3283"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3285: \$builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric" "mat5_compressed_write.at:3285"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3285"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3332: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3332"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3332"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3333" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3333"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3356: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3356"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3356"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_801
#AT_START_802
at_fn_group_banner 802 'mat5_compressed_write.at:3359' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "802. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3360" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3360"
$as_echo "mat5_compressed_write.at:3361" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3361"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3363: \$builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric" "mat5_compressed_write.at:3363"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3363"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3410: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3410"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3410"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3411" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3411"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3434: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3434"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3434"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_802
#AT_START_803
at_fn_group_banner 803 'mat5_compressed_write.at:3437' \
  "Write cell array with 2D 32-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "803. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3438" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3438"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3440: \$builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric" "mat5_compressed_write.at:3440"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3440"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3487: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3487"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3487"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3488" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3488"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3511: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3511"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3511"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_803
#AT_START_804
at_fn_group_banner 804 'mat5_compressed_write.at:3514' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "804. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3515" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3515"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3517: \$builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric" "mat5_compressed_write.at:3517"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3517"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3564: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3564"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3564"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3565" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3565"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3588: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3588"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3588"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_804
#AT_START_805
at_fn_group_banner 805 'mat5_compressed_write.at:3591' \
  "Write cell array with 2D 16-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "805. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3592" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3592"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3594: \$builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric" "mat5_compressed_write.at:3594"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3594"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3641: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3641"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3641"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3642" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3642"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3665: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3665"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3665"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_805
#AT_START_806
at_fn_group_banner 806 'mat5_compressed_write.at:3668' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "806. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3669" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3669"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3671: \$builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric" "mat5_compressed_write.at:3671"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3671"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3718: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3718"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3718"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3719" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3719"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3742: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3742"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3742"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_806
#AT_START_807
at_fn_group_banner 807 'mat5_compressed_write.at:3745' \
  "Write cell array with 2D 8-bit signed integer fields" "" 10
at_xfail=no
(
  $as_echo "807. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3746" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3746"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3748: \$builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric" "mat5_compressed_write.at:3748"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3748"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3795: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3795"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3795"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3796" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3796"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3819: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3819"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3819"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_807
#AT_START_808
at_fn_group_banner 808 'mat5_compressed_write.at:3822' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 10
at_xfail=no
(
  $as_echo "808. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3823" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3823"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3825: \$builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric" "mat5_compressed_write.at:3825"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3825"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3872: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat5_compressed_write.at:3872"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3872"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3873" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3873"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3896: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3896"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3896"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_808
#AT_START_809
at_fn_group_banner 809 'mat5_compressed_write.at:3899' \
  "Write cell array with 2D double-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "809. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3900" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3900"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3902: \$builddir/test_mat -v 5 -z write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_cell_complex_2d_numeric" "mat5_compressed_write.at:3902"
( $at_check_trace; $builddir/test_mat -v 5 -z write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3902"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3949: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:3949"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3949"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:3950" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3950"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3975: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:3975"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3975"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_809
#AT_START_810
at_fn_group_banner 810 'mat5_compressed_write.at:3978' \
  "Write cell array with 2D single-precision complex fields" "" 10
at_xfail=no
(
  $as_echo "810. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:3979" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:3979"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:3981: \$builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric" "mat5_compressed_write.at:3981"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:3981"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4028: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4028"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4028"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4029" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4029"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4054: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4054"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4054"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_810
#AT_START_811
at_fn_group_banner 811 'mat5_compressed_write.at:4057' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "811. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4058" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4058"
$as_echo "mat5_compressed_write.at:4059" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4059"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4061: \$builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4061"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4061"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4108: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4108"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4108"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4109" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4109"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4134: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4134"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4134"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_811
#AT_START_812
at_fn_group_banner 812 'mat5_compressed_write.at:4137' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "812. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4138" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4138"
$as_echo "mat5_compressed_write.at:4139" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4139"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4141: \$builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4141"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4141"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4188: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4188"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4188"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4189" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4189"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4214: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4214"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4214"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_812
#AT_START_813
at_fn_group_banner 813 'mat5_compressed_write.at:4217' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "813. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4218" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4218"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4220: \$builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4220"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4220"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4267: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4267"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4267"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4268" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4268"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4293: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4293"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4293"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_813
#AT_START_814
at_fn_group_banner 814 'mat5_compressed_write.at:4296' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "814. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4297" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4297"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4299: \$builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4299"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4299"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4346: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4346"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4346"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4347" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4347"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4372: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4372"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4372"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_814
#AT_START_815
at_fn_group_banner 815 'mat5_compressed_write.at:4375' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "815. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4376" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4376"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4378: \$builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4378"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4378"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4425: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4425"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4425"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4426" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4426"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4451: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4451"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4451"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_815
#AT_START_816
at_fn_group_banner 816 'mat5_compressed_write.at:4454' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "816. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4455" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4455"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4457: \$builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4457"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4457"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4504: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4504"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4504"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4505" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4505"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4530: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4530"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_816
#AT_START_817
at_fn_group_banner 817 'mat5_compressed_write.at:4533' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 10
at_xfail=no
(
  $as_echo "817. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4534" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4534"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4536: \$builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4536"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4536"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4583: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4583"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4583"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4584" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4584"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4609: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4609"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4609"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_817
#AT_START_818
at_fn_group_banner 818 'mat5_compressed_write.at:4612' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 10
at_xfail=no
(
  $as_echo "818. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4613" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4613"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4615: \$builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric" "mat5_compressed_write.at:4615"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4615"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4662: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat5_compressed_write.at:4662"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4662"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4663" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4663"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4688: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4688"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4688"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_818
#AT_START_819
at_fn_group_banner 819 'mat5_compressed_write.at:4691' \
  "Write cell array with 2D logical fields" "        " 10
at_xfail=no
(
  $as_echo "819. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_write.at:4692" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4692"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4694: \$builddir/test_mat -v 5 -z write_cell_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z write_cell_2d_logical" "mat5_compressed_write.at:4694"
( $at_check_trace; $builddir/test_mat -v 5 -z write_cell_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4694"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 5 x 5
Class Type: 32-bit, unsigned integer array (logical)
 Data Type: 32-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 16-bit, unsigned integer array (logical)
 Data Type: 16-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4744: \$builddir/test_mat readvar test_write_cell_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_logical.mat a" "mat5_compressed_write.at:4744"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4744"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat5_compressed_write.at:4745" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_write.at:4745"
cat >test_write_cell_2d_logical.m <<'_ATEOF'

try
    load test_write_cell_2d_logical.mat
    expdata = {triu(true(5));tril(true(5));logical(eye(5));false(0,5)};
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat5_compressed_write.at:4767: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat5_compressed_write.at:4767"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_write.at:4767"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_819
#AT_START_820
at_fn_group_banner 820 'mat73_write.at:27' \
  "Write 2D double-precision array" "                " 11
at_xfail=no
(
  $as_echo "820. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:28" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:28"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:30: \$builddir/test_mat -v 7.3 -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_2d_numeric" "mat73_write.at:30"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:30"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:46: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:46"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:46"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:47" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:47"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:67: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:67"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:67"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_820
#AT_START_821
at_fn_group_banner 821 'mat73_write.at:70' \
  "Write 2D single-precision array" "                " 11
at_xfail=no
(
  $as_echo "821. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:71" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:71"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:73: \$builddir/test_mat -v 7.3 -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_2d_numeric" "mat73_write.at:73"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:73"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:89: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:89"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:89"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:90" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:90"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:110: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:110"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:110"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_821
#AT_START_822
at_fn_group_banner 822 'mat73_write.at:113' \
  "Write 2D 64-bit integer array" "                  " 11
at_xfail=no
(
  $as_echo "822. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:114" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:114"
$as_echo "mat73_write.at:115" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:115"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:117: \$builddir/test_mat -v 7.3 -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_2d_numeric" "mat73_write.at:117"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:117"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:133: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:133"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:133"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:134" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:134"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:154: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:154"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:154"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_822
#AT_START_823
at_fn_group_banner 823 'mat73_write.at:157' \
  "Write 2D 64-bit unsigned integer array" "         " 11
at_xfail=no
(
  $as_echo "823. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:158" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:158"
$as_echo "mat73_write.at:159" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:159"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:161: \$builddir/test_mat -v 7.3 -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_2d_numeric" "mat73_write.at:161"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:161"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:177: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:177"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:177"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:178" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:178"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:198: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:198"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:198"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_823
#AT_START_824
at_fn_group_banner 824 'mat73_write.at:201' \
  "Write 2D 32-bit integer array" "                  " 11
at_xfail=no
(
  $as_echo "824. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:202" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:202"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:204: \$builddir/test_mat -v 7.3 -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_2d_numeric" "mat73_write.at:204"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:204"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:220: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:220"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:220"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:221" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:221"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:241: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:241"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:241"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_824
#AT_START_825
at_fn_group_banner 825 'mat73_write.at:244' \
  "Write 2D 32-bit unsigned integer array" "         " 11
at_xfail=no
(
  $as_echo "825. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:245" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:245"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:247: \$builddir/test_mat -v 7.3 -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_2d_numeric" "mat73_write.at:247"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:247"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:263: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:263"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:263"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:264" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:264"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:284: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:284"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:284"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_825
#AT_START_826
at_fn_group_banner 826 'mat73_write.at:287' \
  "Write 2D 16-bit integer array" "                  " 11
at_xfail=no
(
  $as_echo "826. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:288" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:288"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:290: \$builddir/test_mat -v 7.3 -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_2d_numeric" "mat73_write.at:290"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:290"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:306: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:306"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:306"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:307" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:307"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:327: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:327"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:327"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_826
#AT_START_827
at_fn_group_banner 827 'mat73_write.at:330' \
  "Write 2D 16-bit unsigned integer array" "         " 11
at_xfail=no
(
  $as_echo "827. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:331" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:331"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:333: \$builddir/test_mat -v 7.3 -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_2d_numeric" "mat73_write.at:333"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:333"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:349: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:349"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:349"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:350" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:350"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:370: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:370"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:370"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_827
#AT_START_828
at_fn_group_banner 828 'mat73_write.at:373' \
  "Write 2D 8-bit integer array" "                   " 11
at_xfail=no
(
  $as_echo "828. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:374" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:374"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:376: \$builddir/test_mat -v 7.3 -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_2d_numeric" "mat73_write.at:376"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:376"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:392: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:392"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:392"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:393" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:393"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:413: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:413"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:413"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_828
#AT_START_829
at_fn_group_banner 829 'mat73_write.at:416' \
  "Write 2D 8-bit unsigned integer array" "          " 11
at_xfail=no
(
  $as_echo "829. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:417" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:417"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:419: \$builddir/test_mat -v 7.3 -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_2d_numeric" "mat73_write.at:419"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:419"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:435: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_write.at:435"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:435"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:436" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:436"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:456: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:456"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:456"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_829
#AT_START_830
at_fn_group_banner 830 'mat73_write.at:459' \
  "Write 2D double-precision complex array" "        " 11
at_xfail=no
(
  $as_echo "830. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:460" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:460"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:462: \$builddir/test_mat -v 7.3 -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_complex_2d_numeric" "mat73_write.at:462"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:462"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:478: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:478"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:478"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:479" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:479"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:499: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:499"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:499"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_830
#AT_START_831
at_fn_group_banner 831 'mat73_write.at:502' \
  "Write 2D single-precision complex array" "        " 11
at_xfail=no
(
  $as_echo "831. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:503" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:503"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:505: \$builddir/test_mat -v 7.3 -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_complex_2d_numeric" "mat73_write.at:505"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:505"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:521: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:521"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:521"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:522" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:522"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:542: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:542"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:542"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_831
#AT_START_832
at_fn_group_banner 832 'mat73_write.at:545' \
  "Write 2D 64-bit integer complex array" "          " 11
at_xfail=no
(
  $as_echo "832. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:546" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:546"
$as_echo "mat73_write.at:547" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:547"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:549: \$builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric" "mat73_write.at:549"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:549"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:565: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:565"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:565"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:566" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:566"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:586: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:586"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:586"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_832
#AT_START_833
at_fn_group_banner 833 'mat73_write.at:589' \
  "Write 2D 64-bit unsigned integer complex array" " " 11
at_xfail=no
(
  $as_echo "833. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:590" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:590"
$as_echo "mat73_write.at:591" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:591"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:593: \$builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric" "mat73_write.at:593"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:593"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:609: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:609"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:609"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:610" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:610"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:630: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:630"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:630"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_833
#AT_START_834
at_fn_group_banner 834 'mat73_write.at:633' \
  "Write 2D 32-bit integer complex array" "          " 11
at_xfail=no
(
  $as_echo "834. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:634" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:634"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:636: \$builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric" "mat73_write.at:636"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:636"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:652: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:652"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:652"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:653" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:653"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:673: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:673"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:673"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_834
#AT_START_835
at_fn_group_banner 835 'mat73_write.at:676' \
  "Write 2D 32-bit unsigned integer complex array" " " 11
at_xfail=no
(
  $as_echo "835. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:677" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:677"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:679: \$builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric" "mat73_write.at:679"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:679"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:695: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:695"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:695"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:696" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:696"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:716: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:716"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:716"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_835
#AT_START_836
at_fn_group_banner 836 'mat73_write.at:719' \
  "Write 2D 16-bit integer complex array" "          " 11
at_xfail=no
(
  $as_echo "836. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:720" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:720"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:722: \$builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric" "mat73_write.at:722"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:722"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:738: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:738"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:738"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:739" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:739"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:759: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:759"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:759"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_836
#AT_START_837
at_fn_group_banner 837 'mat73_write.at:762' \
  "Write 2D 16-bit unsigned integer complex array" " " 11
at_xfail=no
(
  $as_echo "837. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:763" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:763"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:765: \$builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric" "mat73_write.at:765"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:765"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:781: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:781"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:781"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:782" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:782"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:802: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:802"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:802"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_837
#AT_START_838
at_fn_group_banner 838 'mat73_write.at:805' \
  "Write 2D 8-bit integer complex array" "           " 11
at_xfail=no
(
  $as_echo "838. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:806" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:806"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:808: \$builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric" "mat73_write.at:808"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:808"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:824: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:824"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:824"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:825" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:825"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:845: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:845"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:845"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_838
#AT_START_839
at_fn_group_banner 839 'mat73_write.at:848' \
  "Write 2D 8-bit unsigned integer complex array" "  " 11
at_xfail=no
(
  $as_echo "839. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:849" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:849"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:851: \$builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric" "mat73_write.at:851"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:851"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:867: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_write.at:867"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:867"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:868" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:868"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:888: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:888"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:888"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_839
#AT_START_840
at_fn_group_banner 840 'mat73_write.at:891' \
  "Write 2D logical array" "                         " 11
at_xfail=no
(
  $as_echo "840. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:892" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:892"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:894: \$builddir/test_mat -v 7.3 write_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_2d_logical" "mat73_write.at:894"
( $at_check_trace; $builddir/test_mat -v 7.3 write_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:894"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:910: \$builddir/test_mat readvar test_write_2d_logical.mat l1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l1" "mat73_write.at:910"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:910"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l2
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:926: \$builddir/test_mat readvar test_write_2d_logical.mat l2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l2" "mat73_write.at:926"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:926"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l4
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:942: \$builddir/test_mat readvar test_write_2d_logical.mat l4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l4" "mat73_write.at:942"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:942"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:943" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:943"
cat >test_write_2d_logical.m <<'_ATEOF'

try
    load test_write_2d_logical.mat
    expdata.l0 = false(0,10);
    expdata.l1 = logical(mod(reshape(0:49,5,10),2));
    pass = true;
    pass = pass && isa(l0,class(expdata.l0));
    pass = pass && all(size(l0)==size(expdata.l0));
    pass = pass && all(l0(:)==expdata.l0(:));
    pass = pass && isa(l1,class(expdata.l1));
    pass = pass && all(size(l1)==size(expdata.l1));
    pass = pass && all(l1(:)==expdata.l1(:));
    pass = pass && isa(l2,class(expdata.l1));
    pass = pass && all(size(l2)==size(expdata.l1));
    pass = pass && all(l2(:)==expdata.l1(:));
    pass = pass && isa(l4,class(expdata.l1));
    pass = pass && all(size(l4)==size(expdata.l1));
    pass = pass && all(l4(:)==expdata.l1(:));
    if exist('l8','var')
        pass = pass && isa(l8,class(expdata.l1));
        pass = pass && all(size(l8)==size(expdata.l1));
        pass = pass && all(l8(:)==expdata.l1(:));
    end
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:978: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:978"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:978"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_840
#AT_START_841
at_fn_group_banner 841 'mat73_write.at:981' \
  "Write 2D sparse double-precision array" "         " 11
at_xfail=no
(
  $as_echo "841. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:982" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:982"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:984: \$builddir/test_mat -v 7.3 -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_sparse" "mat73_write.at:984"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:984"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1020: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_write.at:1020"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1020"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1021" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1021"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1045: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1045"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1045"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_841
#AT_START_842
at_fn_group_banner 842 'mat73_write.at:1048' \
  "Write 2D sparse complex double-precision array" " " 11
at_xfail=no
(
  $as_echo "842. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1049" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1049"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1051: \$builddir/test_mat -v 7.3 -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_complex_sparse" "mat73_write.at:1051"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1051"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1087: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_write.at:1087"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1087"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1088" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1088"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1112: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1112"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1112"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_842
#AT_START_843
at_fn_group_banner 843 'mat73_write.at:1115' \
  "Write 2D empty array" "                           " 11
at_xfail=no
(
  $as_echo "843. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1116" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1116"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1118: \$builddir/test_mat -v 7.3 -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c double write_empty_2d_numeric" "mat73_write.at:1118"
( $at_check_trace; $builddir/test_mat -v 7.3 -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1118"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: empty
      Rank: 2
Dimensions: 0 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1127: \$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty" "mat73_write.at:1127"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_2d_numeric.mat empty
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1127"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1128" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1128"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1149: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1149"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1149"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_843
#AT_START_844
at_fn_group_banner 844 'mat73_write.at:1152' \
  "Write character array" "                          " 11
at_xfail=no
(
  $as_echo "844. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1153" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1153"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1154: \$builddir/test_mat -v 7.3 write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_char" "mat73_write.at:1154"
( $at_check_trace; $builddir/test_mat -v 7.3 write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1154"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
[{]}\|;:'",<.>/?          
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1169: \$builddir/test_mat readvar test_write_char.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_char.mat a" "mat73_write.at:1169"
( $at_check_trace; $builddir/test_mat readvar test_write_char.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1169"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1170" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1170"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1191: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1191"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1191"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_844
#AT_START_845
at_fn_group_banner 845 'mat73_write.at:1194' \
  "Write empty structure array" "                    " 11
at_xfail=no
(
  $as_echo "845. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1195" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1195"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1197: \$builddir/test_mat -v 7.3 write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_empty_struct" "mat73_write.at:1197"
( $at_check_trace; $builddir/test_mat -v 7.3 write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1197"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1208: \$builddir/test_mat readvar test_write_empty_struct.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var1" "mat73_write.at:1208"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1208"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1223: \$builddir/test_mat readvar test_write_empty_struct.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var2" "mat73_write.at:1223"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1223"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var3
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1244: \$builddir/test_mat readvar test_write_empty_struct.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var3" "mat73_write.at:1244"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1244"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var4
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1279: \$builddir/test_mat readvar test_write_empty_struct.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var4" "mat73_write.at:1279"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1279"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1280" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1280"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1307: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1307"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1307"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_845
#AT_START_846
at_fn_group_banner 846 'mat73_write.at:1310' \
  "Write structure array with 2D double-precision fields" "" 11
at_xfail=no
(
  $as_echo "846. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1311" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1311"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1313: \$builddir/test_mat -v 7.3 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_struct_2d_numeric" "mat73_write.at:1313"
( $at_check_trace; $builddir/test_mat -v 7.3 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1313"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1364: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1364"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1364"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1365" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1365"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1390: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1390"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1390"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_846
#AT_START_847
at_fn_group_banner 847 'mat73_write.at:1393' \
  "Write structure array with 2D single-precision fields" "" 11
at_xfail=no
(
  $as_echo "847. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1394" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1394"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1396: \$builddir/test_mat -v 7.3 -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_struct_2d_numeric" "mat73_write.at:1396"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1396"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1447: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1447"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1447"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1448" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1448"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1473: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1473"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_847
#AT_START_848
at_fn_group_banner 848 'mat73_write.at:1476' \
  "Write structure array with 2D 64-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "848. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1477" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1477"
$as_echo "mat73_write.at:1478" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1478"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1480: \$builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric" "mat73_write.at:1480"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1480"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1531: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1531"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1531"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1532" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1532"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1557: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1557"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1557"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_848
#AT_START_849
at_fn_group_banner 849 'mat73_write.at:1560' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "849. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1561" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1561"
$as_echo "mat73_write.at:1562" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1562"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1564: \$builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric" "mat73_write.at:1564"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1564"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1615: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1615"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1615"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1616" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1616"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1641: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1641"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1641"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_849
#AT_START_850
at_fn_group_banner 850 'mat73_write.at:1644' \
  "Write structure array with 2D 32-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "850. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1645" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1645"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1647: \$builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric" "mat73_write.at:1647"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1647"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1698: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1698"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1698"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1699" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1699"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1724: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1724"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1724"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_850
#AT_START_851
at_fn_group_banner 851 'mat73_write.at:1727' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "851. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1728" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1728"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1730: \$builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric" "mat73_write.at:1730"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1730"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1781: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1781"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1781"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1782" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1782"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1807: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1807"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1807"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_851
#AT_START_852
at_fn_group_banner 852 'mat73_write.at:1810' \
  "Write structure array with 2D 16-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "852. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1811" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1811"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1813: \$builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric" "mat73_write.at:1813"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1813"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1864: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1864"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1864"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1865" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1865"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1890: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1890"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1890"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_852
#AT_START_853
at_fn_group_banner 853 'mat73_write.at:1893' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "853. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1894" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1894"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1896: \$builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric" "mat73_write.at:1896"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1896"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1947: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:1947"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1947"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:1948" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1948"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:1973: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:1973"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1973"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_853
#AT_START_854
at_fn_group_banner 854 'mat73_write.at:1976' \
  "Write structure array with 2D 8-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "854. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:1977" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:1977"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:1979: \$builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric" "mat73_write.at:1979"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:1979"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2030: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:2030"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2030"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2031" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2031"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2056: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2056"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2056"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_854
#AT_START_855
at_fn_group_banner 855 'mat73_write.at:2059' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "855. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2060" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2060"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2062: \$builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric" "mat73_write.at:2062"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2062"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2113: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_write.at:2113"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2113"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2114" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2114"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2139: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2139"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2139"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_855
#AT_START_856
at_fn_group_banner 856 'mat73_write.at:2142' \
  "Write structure array with 2D double-precision complex fields" "" 11
at_xfail=no
(
  $as_echo "856. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2143" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2143"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2145: \$builddir/test_mat -v 7.3 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_struct_complex_2d_numeric" "mat73_write.at:2145"
( $at_check_trace; $builddir/test_mat -v 7.3 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2145"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2196: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2196"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2196"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2197" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2197"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2222: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2222"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2222"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_856
#AT_START_857
at_fn_group_banner 857 'mat73_write.at:2225' \
  "Write structure array with 2D single-precision complex fields" "" 11
at_xfail=no
(
  $as_echo "857. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2226" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2226"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2228: \$builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric" "mat73_write.at:2228"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2228"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2279: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2279"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2279"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2280" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2280"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2305: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2305"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2305"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_857
#AT_START_858
at_fn_group_banner 858 'mat73_write.at:2308' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "858. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2309" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2309"
$as_echo "mat73_write.at:2310" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2310"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2312: \$builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric" "mat73_write.at:2312"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2312"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2363: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2363"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2363"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2364" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2364"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2389: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2389"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2389"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_858
#AT_START_859
at_fn_group_banner 859 'mat73_write.at:2392' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "859. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2393" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2393"
$as_echo "mat73_write.at:2394" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2394"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2396: \$builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric" "mat73_write.at:2396"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2396"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2447: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2447"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2447"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2448" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2448"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2473: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2473"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_859
#AT_START_860
at_fn_group_banner 860 'mat73_write.at:2476' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "860. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2477" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2477"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2479: \$builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric" "mat73_write.at:2479"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2479"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2530: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2530"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2530"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2531" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2531"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2556: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2556"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2556"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_860
#AT_START_861
at_fn_group_banner 861 'mat73_write.at:2559' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "861. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2560" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2560"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2562: \$builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric" "mat73_write.at:2562"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2562"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2613: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2613"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2613"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2614" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2614"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2639: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2639"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2639"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_861
#AT_START_862
at_fn_group_banner 862 'mat73_write.at:2642' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "862. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2643" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2643"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2645: \$builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric" "mat73_write.at:2645"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2645"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2696: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2696"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2696"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2697" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2697"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2722: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2722"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2722"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_862
#AT_START_863
at_fn_group_banner 863 'mat73_write.at:2725' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "863. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2726" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2726"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2728: \$builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric" "mat73_write.at:2728"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2728"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2779: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2779"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2779"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2780" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2780"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2805: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2805"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2805"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_863
#AT_START_864
at_fn_group_banner 864 'mat73_write.at:2808' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "864. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2809" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2809"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2811: \$builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric" "mat73_write.at:2811"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2811"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2862: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2862"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2862"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2863" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2863"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2888: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2888"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2888"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_864
#AT_START_865
at_fn_group_banner 865 'mat73_write.at:2891' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "865. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2892" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2892"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2894: \$builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric" "mat73_write.at:2894"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2894"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2945: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_write.at:2945"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2945"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:2946" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2946"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:2971: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:2971"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2971"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_865
#AT_START_866
at_fn_group_banner 866 'mat73_write.at:2974' \
  "Write structure array with 2D logical fields" "   " 11
at_xfail=no
(
  $as_echo "866. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:2975" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:2975"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:2977: \$builddir/test_mat -v 7.3 write_struct_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_struct_2d_logical" "mat73_write.at:2977"
( $at_check_trace; $builddir/test_mat -v 7.3 write_struct_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:2977"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
}
      Name: field1
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3029: \$builddir/test_mat readvar test_write_struct_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_logical.mat a" "mat73_write.at:3029"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3029"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3030" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3030"
cat >test_write_struct_2d_logical.m <<'_ATEOF'

try
    load test_write_struct_2d_logical.mat
    expdata(1).field1 = logical(mod(reshape(0:49,5,10),2));
    expdata(1).field2 = ~expdata(1).field1;
    expdata(2).field1 = false(0,5);
    expdata(2).field2 = tril(true(5));
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3055: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3055"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3055"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_866
#AT_START_867
at_fn_group_banner 867 'mat73_write.at:3058' \
  "Write empty cell array" "                         " 11
at_xfail=no
(
  $as_echo "867. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3059" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3059"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3060: \$builddir/test_mat -v 7.3 write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_empty_cell" "mat73_write.at:3060"
( $at_check_trace; $builddir/test_mat -v 7.3 write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3060"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3071: \$builddir/test_mat readvar test_write_empty_cell.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var1" "mat73_write.at:3071"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3071"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3090: \$builddir/test_mat readvar test_write_empty_cell.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var2" "mat73_write.at:3090"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3090"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3091" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3091"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3111: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3111"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3111"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_867
#AT_START_868
at_fn_group_banner 868 'mat73_write.at:3114' \
  "Write cell array with 2D double-precision fields" "" 11
at_xfail=no
(
  $as_echo "868. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3115" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3115"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3117: \$builddir/test_mat -v 7.3 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_cell_2d_numeric" "mat73_write.at:3117"
( $at_check_trace; $builddir/test_mat -v 7.3 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3117"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3164: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3164"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3164"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3165" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3165"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3188: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3188"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3188"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_868
#AT_START_869
at_fn_group_banner 869 'mat73_write.at:3191' \
  "Write cell array with 2D single-precision fields" "" 11
at_xfail=no
(
  $as_echo "869. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3192" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3192"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3194: \$builddir/test_mat -v 7.3 -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_cell_2d_numeric" "mat73_write.at:3194"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3194"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3241: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3241"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3241"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3242" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3242"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3265: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3265"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3265"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_869
#AT_START_870
at_fn_group_banner 870 'mat73_write.at:3268' \
  "Write cell array with 2D 64-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "870. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3269" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3269"
$as_echo "mat73_write.at:3270" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3270"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3272: \$builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric" "mat73_write.at:3272"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3272"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3319: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3319"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3319"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3320" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3320"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3343: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3343"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_870
#AT_START_871
at_fn_group_banner 871 'mat73_write.at:3346' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "871. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3347" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3347"
$as_echo "mat73_write.at:3348" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3348"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3350: \$builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric" "mat73_write.at:3350"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3350"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3397: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3397"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3397"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3398" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3398"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3421: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3421"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3421"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_871
#AT_START_872
at_fn_group_banner 872 'mat73_write.at:3424' \
  "Write cell array with 2D 32-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "872. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3425" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3425"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3427: \$builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric" "mat73_write.at:3427"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3427"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3474: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3474"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3474"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3475" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3475"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3498: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3498"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3498"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_872
#AT_START_873
at_fn_group_banner 873 'mat73_write.at:3501' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "873. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3502" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3502"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3504: \$builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric" "mat73_write.at:3504"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3504"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3551: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3551"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3551"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3552" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3552"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3575: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3575"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3575"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_873
#AT_START_874
at_fn_group_banner 874 'mat73_write.at:3578' \
  "Write cell array with 2D 16-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "874. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3579" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3579"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3581: \$builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric" "mat73_write.at:3581"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3581"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3628: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3628"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3628"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3629" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3629"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3652: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3652"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3652"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_874
#AT_START_875
at_fn_group_banner 875 'mat73_write.at:3655' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "875. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3656" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3656"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3658: \$builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric" "mat73_write.at:3658"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3658"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3705: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3705"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3705"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3706" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3706"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3729: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3729"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3729"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_875
#AT_START_876
at_fn_group_banner 876 'mat73_write.at:3732' \
  "Write cell array with 2D 8-bit signed integer fields" "" 11
at_xfail=no
(
  $as_echo "876. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3733" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3733"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3735: \$builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric" "mat73_write.at:3735"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3735"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3782: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3782"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3782"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3783" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3783"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3806: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3806"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3806"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_876
#AT_START_877
at_fn_group_banner 877 'mat73_write.at:3809' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 11
at_xfail=no
(
  $as_echo "877. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3810" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3810"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3812: \$builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric" "mat73_write.at:3812"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3812"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3859: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_write.at:3859"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3859"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3860" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3860"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3883: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3883"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3883"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_877
#AT_START_878
at_fn_group_banner 878 'mat73_write.at:3886' \
  "Write cell array with 2D double-precision complex fields" "" 11
at_xfail=no
(
  $as_echo "878. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3887" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3887"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3889: \$builddir/test_mat -v 7.3 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_cell_complex_2d_numeric" "mat73_write.at:3889"
( $at_check_trace; $builddir/test_mat -v 7.3 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3889"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3936: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:3936"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3936"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:3937" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3937"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:3962: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:3962"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3962"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_878
#AT_START_879
at_fn_group_banner 879 'mat73_write.at:3965' \
  "Write cell array with 2D single-precision complex fields" "" 11
at_xfail=no
(
  $as_echo "879. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:3966" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:3966"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:3968: \$builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric" "mat73_write.at:3968"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:3968"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4015: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4015"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4015"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4016" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4016"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4041: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4041"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4041"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_879
#AT_START_880
at_fn_group_banner 880 'mat73_write.at:4044' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "880. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4045" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4045"
$as_echo "mat73_write.at:4046" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4046"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4048: \$builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric" "mat73_write.at:4048"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4048"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4095: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4095"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4095"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4096" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4096"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4121: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4121"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4121"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_880
#AT_START_881
at_fn_group_banner 881 'mat73_write.at:4124' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "881. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4125" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4125"
$as_echo "mat73_write.at:4126" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4126"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4128: \$builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric" "mat73_write.at:4128"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4128"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4175: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4175"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4175"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4176" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4176"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4201: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4201"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4201"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_881
#AT_START_882
at_fn_group_banner 882 'mat73_write.at:4204' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "882. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4205" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4205"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4207: \$builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric" "mat73_write.at:4207"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4207"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4254: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4254"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4254"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4255" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4255"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4280: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4280"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4280"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_882
#AT_START_883
at_fn_group_banner 883 'mat73_write.at:4283' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "883. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4284" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4284"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4286: \$builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric" "mat73_write.at:4286"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4286"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4333: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4333"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4333"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4334" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4334"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4359: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4359"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4359"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_883
#AT_START_884
at_fn_group_banner 884 'mat73_write.at:4362' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "884. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4363" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4363"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4365: \$builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric" "mat73_write.at:4365"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4365"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4412: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4412"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4412"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4413" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4413"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4438: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4438"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4438"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_884
#AT_START_885
at_fn_group_banner 885 'mat73_write.at:4441' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "885. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4442" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4442"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4444: \$builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric" "mat73_write.at:4444"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4444"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4491: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4491"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4491"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4492" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4492"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4517: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4517"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4517"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_885
#AT_START_886
at_fn_group_banner 886 'mat73_write.at:4520' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 11
at_xfail=no
(
  $as_echo "886. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4521" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4521"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4523: \$builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric" "mat73_write.at:4523"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4523"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4570: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4570"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4570"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4571" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4571"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4596: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4596"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4596"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_886
#AT_START_887
at_fn_group_banner 887 'mat73_write.at:4599' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 11
at_xfail=no
(
  $as_echo "887. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4600" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4600"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4602: \$builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric" "mat73_write.at:4602"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4602"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4649: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_write.at:4649"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4649"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4650" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4650"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4675: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4675"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4675"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_887
#AT_START_888
at_fn_group_banner 888 'mat73_write.at:4678' \
  "Write cell array with 2D logical fields" "        " 11
at_xfail=no
(
  $as_echo "888. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_write.at:4679" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4679"
{ set +x
$as_echo "$at_srcdir/mat73_write.at:4681: \$builddir/test_mat -v 7.3 write_cell_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 write_cell_2d_logical" "mat73_write.at:4681"
( $at_check_trace; $builddir/test_mat -v 7.3 write_cell_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4681"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4729: \$builddir/test_mat readvar test_write_cell_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_logical.mat a" "mat73_write.at:4729"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4729"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_write.at:4730" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_write.at:4730"
cat >test_write_cell_2d_logical.m <<'_ATEOF'

try
    load test_write_cell_2d_logical.mat
    expdata = {triu(true(5));tril(true(5));logical(eye(5));false(0,5)};
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_write.at:4752: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_write.at:4752"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_write.at:4752"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_888
#AT_START_889
at_fn_group_banner 889 'mat73_compressed_write.at:27' \
  "Write 2D double-precision array" "                " 12
at_xfail=no
(
  $as_echo "889. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:28" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:28"
$as_echo "mat73_compressed_write.at:29" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:29"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:31: \$builddir/test_mat -v 7.3 -z -c double write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c double write_2d_numeric" "mat73_compressed_write.at:31"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c double write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:31"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:47: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:47"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:47"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:48" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:48"
cat >test_write_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:68: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:68"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:68"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_889
#AT_START_890
at_fn_group_banner 890 'mat73_compressed_write.at:71' \
  "Write 2D single-precision array" "                " 12
at_xfail=no
(
  $as_echo "890. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:72" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:72"
$as_echo "mat73_compressed_write.at:73" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:73"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:75: \$builddir/test_mat -v 7.3 -z -c single write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_2d_numeric" "mat73_compressed_write.at:75"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:75"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:91: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:91"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:91"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:92" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:92"
cat >test_write_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = single(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:112: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:112"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:112"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_890
#AT_START_891
at_fn_group_banner 891 'mat73_compressed_write.at:115' \
  "Write 2D 64-bit integer array" "                  " 12
at_xfail=no
(
  $as_echo "891. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:116" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:116"
$as_echo "mat73_compressed_write.at:117" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:117"
$as_echo "mat73_compressed_write.at:118" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:118"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:120: \$builddir/test_mat -v 7.3 -z -c int64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_2d_numeric" "mat73_compressed_write.at:120"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:120"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:136: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:136"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:136"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:137" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:137"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:157: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:157"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:157"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_891
#AT_START_892
at_fn_group_banner 892 'mat73_compressed_write.at:160' \
  "Write 2D 64-bit unsigned integer array" "         " 12
at_xfail=no
(
  $as_echo "892. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:161" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:161"
$as_echo "mat73_compressed_write.at:162" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:162"
$as_echo "mat73_compressed_write.at:163" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:163"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:165: \$builddir/test_mat -v 7.3 -z -c uint64 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_2d_numeric" "mat73_compressed_write.at:165"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:165"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:181: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:181"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:181"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:182" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:182"
cat >test_write_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint64(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:202: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:202"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:202"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_892
#AT_START_893
at_fn_group_banner 893 'mat73_compressed_write.at:205' \
  "Write 2D 32-bit integer array" "                  " 12
at_xfail=no
(
  $as_echo "893. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:206" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:206"
$as_echo "mat73_compressed_write.at:207" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:207"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:209: \$builddir/test_mat -v 7.3 -z -c int32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_2d_numeric" "mat73_compressed_write.at:209"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:209"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:225: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:225"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:225"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:226" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:226"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:246: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:246"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:246"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_893
#AT_START_894
at_fn_group_banner 894 'mat73_compressed_write.at:249' \
  "Write 2D 32-bit unsigned integer array" "         " 12
at_xfail=no
(
  $as_echo "894. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:250" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:250"
$as_echo "mat73_compressed_write.at:251" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:251"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:253: \$builddir/test_mat -v 7.3 -z -c uint32 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_2d_numeric" "mat73_compressed_write.at:253"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:253"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:269: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:269"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:269"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:270" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:270"
cat >test_write_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint32(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:290: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:290"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:290"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_894
#AT_START_895
at_fn_group_banner 895 'mat73_compressed_write.at:293' \
  "Write 2D 16-bit integer array" "                  " 12
at_xfail=no
(
  $as_echo "895. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:294" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:294"
$as_echo "mat73_compressed_write.at:295" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:295"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:297: \$builddir/test_mat -v 7.3 -z -c int16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_2d_numeric" "mat73_compressed_write.at:297"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:297"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:313: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:313"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:313"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:314" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:314"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:334: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:334"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:334"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_895
#AT_START_896
at_fn_group_banner 896 'mat73_compressed_write.at:337' \
  "Write 2D 16-bit unsigned integer array" "         " 12
at_xfail=no
(
  $as_echo "896. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:338" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:338"
$as_echo "mat73_compressed_write.at:339" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:339"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:341: \$builddir/test_mat -v 7.3 -z -c uint16 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_2d_numeric" "mat73_compressed_write.at:341"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:341"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:357: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:357"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:357"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:358" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:358"
cat >test_write_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint16(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:378: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:378"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_896
#AT_START_897
at_fn_group_banner 897 'mat73_compressed_write.at:381' \
  "Write 2D 8-bit integer array" "                   " 12
at_xfail=no
(
  $as_echo "897. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:382" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:382"
$as_echo "mat73_compressed_write.at:383" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:383"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:385: \$builddir/test_mat -v 7.3 -z -c int8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_2d_numeric" "mat73_compressed_write.at:385"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:385"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:401: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:401"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:401"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:402" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:402"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = int8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:422: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:422"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:422"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_897
#AT_START_898
at_fn_group_banner 898 'mat73_compressed_write.at:425' \
  "Write 2D 8-bit unsigned integer array" "          " 12
at_xfail=no
(
  $as_echo "898. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:426" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:426"
$as_echo "mat73_compressed_write.at:427" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:427"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:429: \$builddir/test_mat -v 7.3 -z -c uint8 write_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_2d_numeric" "mat73_compressed_write.at:429"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:429"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 6 11 16 21 26 31 36 41 46 
2 7 12 17 22 27 32 37 42 47 
3 8 13 18 23 28 33 38 43 48 
4 9 14 19 24 29 34 39 44 49 
5 10 15 20 25 30 35 40 45 50 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:445: \$builddir/test_mat readvar test_write_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_numeric.mat a" "mat73_compressed_write.at:445"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:445"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:446" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:446"
cat >test_write_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_2d_numeric.mat
    expdata = uint8(reshape(1:50,5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:466: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:466"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:466"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_898
#AT_START_899
at_fn_group_banner 899 'mat73_compressed_write.at:469' \
  "Write 2D double-precision complex array" "        " 12
at_xfail=no
(
  $as_echo "899. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:470" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:470"
$as_echo "mat73_compressed_write.at:471" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:471"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:473: \$builddir/test_mat -v 7.3 -z -c double write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c double write_complex_2d_numeric" "mat73_compressed_write.at:473"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c double write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:473"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:489: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:489"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:489"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:490" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:490"
cat >test_write_complex_2d_numeric_double.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:510: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:510"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:510"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_899
#AT_START_900
at_fn_group_banner 900 'mat73_compressed_write.at:513' \
  "Write 2D single-precision complex array" "        " 12
at_xfail=no
(
  $as_echo "900. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:514" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:514"
$as_echo "mat73_compressed_write.at:515" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:515"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:517: \$builddir/test_mat -v 7.3 -z -c single write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_complex_2d_numeric" "mat73_compressed_write.at:517"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:517"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:533: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:533"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:533"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:534" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:534"
cat >test_write_complex_2d_numeric_single.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = single(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:554: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:554"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_single;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:554"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_900
#AT_START_901
at_fn_group_banner 901 'mat73_compressed_write.at:557' \
  "Write 2D 64-bit integer complex array" "          " 12
at_xfail=no
(
  $as_echo "901. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:558" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:558"
$as_echo "mat73_compressed_write.at:559" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:559"
$as_echo "mat73_compressed_write.at:560" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:560"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:562: \$builddir/test_mat -v 7.3 -z -c int64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_complex_2d_numeric" "mat73_compressed_write.at:562"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:562"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:578: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:578"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:578"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:579" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:579"
cat >test_write_complex_2d_numeric_int64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:599: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:599"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:599"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_901
#AT_START_902
at_fn_group_banner 902 'mat73_compressed_write.at:602' \
  "Write 2D 64-bit unsigned integer complex array" " " 12
at_xfail=no
(
  $as_echo "902. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:603" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:603"
$as_echo "mat73_compressed_write.at:604" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:604"
$as_echo "mat73_compressed_write.at:605" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:605"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:607: \$builddir/test_mat -v 7.3 -z -c uint64 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_complex_2d_numeric" "mat73_compressed_write.at:607"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:607"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:623: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:623"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:623"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:624" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:624"
cat >test_write_complex_2d_numeric_uint64.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint64(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:644: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:644"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint64;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:644"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_902
#AT_START_903
at_fn_group_banner 903 'mat73_compressed_write.at:647' \
  "Write 2D 32-bit integer complex array" "          " 12
at_xfail=no
(
  $as_echo "903. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:648" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:648"
$as_echo "mat73_compressed_write.at:649" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:649"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:651: \$builddir/test_mat -v 7.3 -z -c int32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_complex_2d_numeric" "mat73_compressed_write.at:651"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:651"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:667: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:667"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:667"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:668" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:668"
cat >test_write_complex_2d_numeric_int32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:688: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:688"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:688"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_903
#AT_START_904
at_fn_group_banner 904 'mat73_compressed_write.at:691' \
  "Write 2D 32-bit unsigned integer complex array" " " 12
at_xfail=no
(
  $as_echo "904. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:692" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:692"
$as_echo "mat73_compressed_write.at:693" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:693"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:695: \$builddir/test_mat -v 7.3 -z -c uint32 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_complex_2d_numeric" "mat73_compressed_write.at:695"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:695"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:711: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:711"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:711"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:712" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:712"
cat >test_write_complex_2d_numeric_uint32.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint32(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:732: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:732"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint32;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:732"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_904
#AT_START_905
at_fn_group_banner 905 'mat73_compressed_write.at:735' \
  "Write 2D 16-bit integer complex array" "          " 12
at_xfail=no
(
  $as_echo "905. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:736" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:736"
$as_echo "mat73_compressed_write.at:737" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:737"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:739: \$builddir/test_mat -v 7.3 -z -c int16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_complex_2d_numeric" "mat73_compressed_write.at:739"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:739"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:755: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:755"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:755"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:756" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:756"
cat >test_write_complex_2d_numeric_int16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:776: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:776"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:776"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_905
#AT_START_906
at_fn_group_banner 906 'mat73_compressed_write.at:779' \
  "Write 2D 16-bit unsigned integer complex array" " " 12
at_xfail=no
(
  $as_echo "906. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:780" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:780"
$as_echo "mat73_compressed_write.at:781" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:781"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:783: \$builddir/test_mat -v 7.3 -z -c uint16 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_complex_2d_numeric" "mat73_compressed_write.at:783"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:783"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:799: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:799"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:799"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:800" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:800"
cat >test_write_complex_2d_numeric_uint16.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint16(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:820: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:820"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint16;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:820"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_906
#AT_START_907
at_fn_group_banner 907 'mat73_compressed_write.at:823' \
  "Write 2D 8-bit integer complex array" "           " 12
at_xfail=no
(
  $as_echo "907. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:824" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:824"
$as_echo "mat73_compressed_write.at:825" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:825"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:827: \$builddir/test_mat -v 7.3 -z -c int8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_complex_2d_numeric" "mat73_compressed_write.at:827"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:827"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:843: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:843"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:843"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:844" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:844"
cat >test_write_complex_2d_numeric_int8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = int8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:864: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:864"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_int8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:864"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_907
#AT_START_908
at_fn_group_banner 908 'mat73_compressed_write.at:867' \
  "Write 2D 8-bit unsigned integer complex array" "  " 12
at_xfail=no
(
  $as_echo "908. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:868" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:868"
$as_echo "mat73_compressed_write.at:869" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:869"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:871: \$builddir/test_mat -v 7.3 -z -c uint8 write_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_complex_2d_numeric" "mat73_compressed_write.at:871"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:871"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 6 + 56i 11 + 61i 16 + 66i 21 + 71i 26 + 76i 31 + 81i 36 + 86i 41 + 91i 46 + 96i 
2 + 52i 7 + 57i 12 + 62i 17 + 67i 22 + 72i 27 + 77i 32 + 82i 37 + 87i 42 + 92i 47 + 97i 
3 + 53i 8 + 58i 13 + 63i 18 + 68i 23 + 73i 28 + 78i 33 + 83i 38 + 88i 43 + 93i 48 + 98i 
4 + 54i 9 + 59i 14 + 64i 19 + 69i 24 + 74i 29 + 79i 34 + 84i 39 + 89i 44 + 94i 49 + 99i 
5 + 55i 10 + 60i 15 + 65i 20 + 70i 25 + 75i 30 + 80i 35 + 85i 40 + 90i 45 + 95i 50 + 100i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:887: \$builddir/test_mat readvar test_write_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_complex_2d_numeric.mat a" "mat73_compressed_write.at:887"
( $at_check_trace; $builddir/test_mat readvar test_write_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:887"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:888" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:888"
cat >test_write_complex_2d_numeric_uint8.m <<'_ATEOF'

try
    load test_write_complex_2d_numeric.mat
    expdata = uint8(reshape((1:50) + j*(51:100),5,10));
    pass = true;
    pass = pass && isa(a,class(expdata));
    pass = pass && all(size(a)==size(expdata));
    pass = pass && all(a(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:908: \$MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:908"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_complex_2d_numeric_uint8;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:908"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_908
#AT_START_909
at_fn_group_banner 909 'mat73_compressed_write.at:911' \
  "Write 2D logical array" "                         " 12
at_xfail=no
(
  $as_echo "909. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:912" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:912"
$as_echo "mat73_compressed_write.at:913" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:913"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:915: \$builddir/test_mat -v 7.3 -z write_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_2d_logical" "mat73_compressed_write.at:915"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:915"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:931: \$builddir/test_mat readvar test_write_2d_logical.mat l1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l1" "mat73_compressed_write.at:931"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:931"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l2
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:947: \$builddir/test_mat readvar test_write_2d_logical.mat l2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l2" "mat73_compressed_write.at:947"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:947"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: l4
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:963: \$builddir/test_mat readvar test_write_2d_logical.mat l4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_2d_logical.mat l4" "mat73_compressed_write.at:963"
( $at_check_trace; $builddir/test_mat readvar test_write_2d_logical.mat l4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:963"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:964" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:964"
cat >test_write_2d_logical.m <<'_ATEOF'

try
    load test_write_2d_logical.mat
    expdata.l0 = false(0,10);
    expdata.l1 = logical(mod(reshape(0:49,5,10),2));
    pass = true;
    pass = pass && isa(l0,class(expdata.l0));
    pass = pass && all(size(l0)==size(expdata.l0));
    pass = pass && all(l0(:)==expdata.l0(:));
    pass = pass && isa(l1,class(expdata.l1));
    pass = pass && all(size(l1)==size(expdata.l1));
    pass = pass && all(l1(:)==expdata.l1(:));
    pass = pass && isa(l2,class(expdata.l1));
    pass = pass && all(size(l2)==size(expdata.l1));
    pass = pass && all(l2(:)==expdata.l1(:));
    pass = pass && isa(l4,class(expdata.l1));
    pass = pass && all(size(l4)==size(expdata.l1));
    pass = pass && all(l4(:)==expdata.l1(:));
    if exist('l8','var')
        pass = pass && isa(l8,class(expdata.l1));
        pass = pass && all(size(l8)==size(expdata.l1));
        pass = pass && all(l8(:)==expdata.l1(:));
    end
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:999: \$MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:999"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:999"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_909
#AT_START_910
at_fn_group_banner 910 'mat73_compressed_write.at:1002' \
  "Write 2D sparse double-precision array" "         " 12
at_xfail=no
(
  $as_echo "910. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1003" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1003"
$as_echo "mat73_compressed_write.at:1004" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1004"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1006: \$builddir/test_mat -v 7.3 -z -c double write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c double write_sparse" "mat73_compressed_write.at:1006"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c double write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1006"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 double-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1042: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_write.at:1042"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1042"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1043" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1043"
cat >test_write_sparse_double.m <<'_ATEOF'

try
    load test_write_sparse.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape(1:50,5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1067: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1067"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1067"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_910
#AT_START_911
at_fn_group_banner 911 'mat73_compressed_write.at:1070' \
  "Write 2D sparse complex double-precision array" " " 12
at_xfail=no
(
  $as_echo "911. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1071" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1071"
$as_echo "mat73_compressed_write.at:1072" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1072"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1074: \$builddir/test_mat -v 7.3 -z -c double write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c double write_complex_sparse" "mat73_compressed_write.at:1074"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c double write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1074"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 double-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1110: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_write.at:1110"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1110"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1111" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1111"
cat >test_write_sparse_complex_double.m <<'_ATEOF'

try
    load test_write_sparse_complex.mat
    expdata = zeros(5,10);
    expdata(1:4:end,1:2:end) = 1;
    expdata(2:4,2:2:end) = 1;
    expdata = expdata.*reshape((1:50) + j*(51:100),5,10);
    pass = true;
    pass = pass && isa(sparse_matrix,class(expdata));
    pass = pass && issparse(sparse_matrix);
    pass = pass && all(size(sparse_matrix)==size(expdata));
    pass = pass && all(sparse_matrix(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1135: \$MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1135"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_sparse_complex_double;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1135"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_911
#AT_START_912
at_fn_group_banner 912 'mat73_compressed_write.at:1138' \
  "Write 2D empty array" "                           " 12
at_xfail=no
(
  $as_echo "912. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1139" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1139"
$as_echo "mat73_compressed_write.at:1140" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1140"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1142: \$builddir/test_mat -v 7.3 -z -c double write_empty_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c double write_empty_2d_numeric" "mat73_compressed_write.at:1142"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c double write_empty_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1142"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: empty
      Rank: 2
Dimensions: 0 x 10
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1151: \$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_2d_numeric.mat empty" "mat73_compressed_write.at:1151"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_2d_numeric.mat empty
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1151"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1152" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1152"
cat >test_write_empty.m <<'_ATEOF'

try
    load test_write_empty_2d_numeric.mat
    expdata = zeros(0,10);
    pass = true;
    pass = pass && isa(empty,class(expdata));
    pass = pass && isempty(empty);
    pass = pass && all(size(empty)==size(expdata));
    pass = pass && all(empty(:)==expdata(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1173: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1173"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1173"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_912
#AT_START_913
at_fn_group_banner 913 'mat73_compressed_write.at:1176' \
  "Write character array" "                          " 12
at_xfail=no
(
  $as_echo "913. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1177" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1177"
$as_echo "mat73_compressed_write.at:1178" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1178"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1179: \$builddir/test_mat -v 7.3 -z write_char"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_char" "mat73_compressed_write.at:1179"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_char
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1179"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 26
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
{
abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
1234567890!@#$%^&*()-_=+`~
[{]}\|;:'",<.>/?          
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1194: \$builddir/test_mat readvar test_write_char.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_char.mat a" "mat73_compressed_write.at:1194"
( $at_check_trace; $builddir/test_mat readvar test_write_char.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1194"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1195" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1195"
cat >test_write_char.m <<'_ATEOF'

try
    load test_write_char.mat
    expdata = ['abcdefghijklmnopqrstuvwxyz';
               'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
               '1234567890!@#$%^&*()-_=+`~';
               '[{]}\|;:''",<.>/?          '];
    pass = true;
    pass = pass && isequal(expdata,a);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1216: \$MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1216"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_char;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1216"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_913
#AT_START_914
at_fn_group_banner 914 'mat73_compressed_write.at:1219' \
  "Write empty structure array" "                    " 12
at_xfail=no
(
  $as_echo "914. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1220" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1220"
$as_echo "mat73_compressed_write.at:1221" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1221"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1223: \$builddir/test_mat -v 7.3 -z write_empty_struct"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_empty_struct" "mat73_compressed_write.at:1223"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_empty_struct
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1223"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1234: \$builddir/test_mat readvar test_write_empty_struct.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var1" "mat73_compressed_write.at:1234"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1234"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1249: \$builddir/test_mat readvar test_write_empty_struct.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var2" "mat73_compressed_write.at:1249"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1249"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var3
      Rank: 2
Dimensions: 1 x 1
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1270: \$builddir/test_mat readvar test_write_empty_struct.mat var3"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var3" "mat73_compressed_write.at:1270"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var3
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1270"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var4
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Character Array
 Data Type: 8-bit, unsigned integer
      Name: field1
      Rank: 2
Dimensions: 0 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: field2
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1305: \$builddir/test_mat readvar test_write_empty_struct.mat var4"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_struct.mat var4" "mat73_compressed_write.at:1305"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_struct.mat var4
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1305"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1306" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1306"
cat >test_write_empty_struct.m <<'_ATEOF'

try
    load test_write_empty_struct.mat
    expdata1 = repmat(struct,0,1);
    expdata2 = repmat(struct('field1',zeros(0,0),'field2',zeros(0,0)),0,1);
    expdata3 = struct('field1',zeros(0,1),'field2',zeros(0,1));
    expdata4(1).field1 = zeros(0,1);
    expdata4(1).field2 = repmat(' ',0,1);
    expdata4(2).field1 = repmat(struct,0,1);
    expdata4(2).field2 = repmat({zeros(0,0)},0,1);
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
    pass = pass && isequal(var3,expdata3);
    pass = pass && isequal(var4,expdata4(:));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1333: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1333"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_struct;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1333"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_914
#AT_START_915
at_fn_group_banner 915 'mat73_compressed_write.at:1336' \
  "Write structure array with 2D double-precision fields" "" 12
at_xfail=no
(
  $as_echo "915. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1337" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1337"
$as_echo "mat73_compressed_write.at:1338" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1338"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1340: \$builddir/test_mat -v 7.3 -z write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_struct_2d_numeric" "mat73_compressed_write.at:1340"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1340"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1391: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1391"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1391"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1392" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1392"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape((1:12),3,4);
    expdata(1).field2 = reshape((13:24),3,4);
    expdata(2).field1 = reshape((25:36),3,4);
    expdata(2).field2 = reshape((37:48),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1417: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1417"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1417"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_915
#AT_START_916
at_fn_group_banner 916 'mat73_compressed_write.at:1420' \
  "Write structure array with 2D single-precision fields" "" 12
at_xfail=no
(
  $as_echo "916. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1421" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1421"
$as_echo "mat73_compressed_write.at:1422" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1422"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1424: \$builddir/test_mat -v 7.3 -z -c single write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_struct_2d_numeric" "mat73_compressed_write.at:1424"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1424"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1475: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1475"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1475"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1476" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1476"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12)),3,4);
    expdata(1).field2 = reshape(single((13:24)),3,4);
    expdata(2).field1 = reshape(single((25:36)),3,4);
    expdata(2).field2 = reshape(single((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1501: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1501"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1501"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_916
#AT_START_917
at_fn_group_banner 917 'mat73_compressed_write.at:1504' \
  "Write structure array with 2D 64-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "917. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1505" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1505"
$as_echo "mat73_compressed_write.at:1506" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1506"
$as_echo "mat73_compressed_write.at:1507" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1507"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1509: \$builddir/test_mat -v 7.3 -z -c int64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_struct_2d_numeric" "mat73_compressed_write.at:1509"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1509"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1560: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1560"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1560"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1561" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1561"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12)),3,4);
    expdata(1).field2 = reshape(int64((13:24)),3,4);
    expdata(2).field1 = reshape(int64((25:36)),3,4);
    expdata(2).field2 = reshape(int64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1586: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1586"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1586"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_917
#AT_START_918
at_fn_group_banner 918 'mat73_compressed_write.at:1589' \
  "Write structure array with 2D 64-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "918. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1590" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1590"
$as_echo "mat73_compressed_write.at:1591" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1591"
$as_echo "mat73_compressed_write.at:1592" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1592"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1594: \$builddir/test_mat -v 7.3 -z -c uint64 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_struct_2d_numeric" "mat73_compressed_write.at:1594"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1594"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1645: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1645"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1645"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1646" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1646"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12)),3,4);
    expdata(1).field2 = reshape(uint64((13:24)),3,4);
    expdata(2).field1 = reshape(uint64((25:36)),3,4);
    expdata(2).field2 = reshape(uint64((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1671: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1671"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1671"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_918
#AT_START_919
at_fn_group_banner 919 'mat73_compressed_write.at:1674' \
  "Write structure array with 2D 32-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "919. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1675" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1675"
$as_echo "mat73_compressed_write.at:1676" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1676"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1678: \$builddir/test_mat -v 7.3 -z -c int32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_struct_2d_numeric" "mat73_compressed_write.at:1678"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1678"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1729: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1729"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1729"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1730" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1730"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12)),3,4);
    expdata(1).field2 = reshape(int32((13:24)),3,4);
    expdata(2).field1 = reshape(int32((25:36)),3,4);
    expdata(2).field2 = reshape(int32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1755: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1755"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1755"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_919
#AT_START_920
at_fn_group_banner 920 'mat73_compressed_write.at:1758' \
  "Write structure array with 2D 32-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "920. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1759" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1759"
$as_echo "mat73_compressed_write.at:1760" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1760"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1762: \$builddir/test_mat -v 7.3 -z -c uint32 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_struct_2d_numeric" "mat73_compressed_write.at:1762"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1762"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1813: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1813"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1813"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1814" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1814"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12)),3,4);
    expdata(1).field2 = reshape(uint32((13:24)),3,4);
    expdata(2).field1 = reshape(uint32((25:36)),3,4);
    expdata(2).field2 = reshape(uint32((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1839: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1839"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1839"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_920
#AT_START_921
at_fn_group_banner 921 'mat73_compressed_write.at:1842' \
  "Write structure array with 2D 16-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "921. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1843" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1843"
$as_echo "mat73_compressed_write.at:1844" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1844"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1846: \$builddir/test_mat -v 7.3 -z -c int16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_struct_2d_numeric" "mat73_compressed_write.at:1846"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1846"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1897: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1897"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1897"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1898" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1898"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12)),3,4);
    expdata(1).field2 = reshape(int16((13:24)),3,4);
    expdata(2).field1 = reshape(int16((25:36)),3,4);
    expdata(2).field2 = reshape(int16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1923: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:1923"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1923"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_921
#AT_START_922
at_fn_group_banner 922 'mat73_compressed_write.at:1926' \
  "Write structure array with 2D 16-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "922. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:1927" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1927"
$as_echo "mat73_compressed_write.at:1928" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1928"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1930: \$builddir/test_mat -v 7.3 -z -c uint16 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_struct_2d_numeric" "mat73_compressed_write.at:1930"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1930"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:1981: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:1981"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:1981"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:1982" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:1982"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12)),3,4);
    expdata(1).field2 = reshape(uint16((13:24)),3,4);
    expdata(2).field1 = reshape(uint16((25:36)),3,4);
    expdata(2).field2 = reshape(uint16((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2007: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2007"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2007"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_922
#AT_START_923
at_fn_group_banner 923 'mat73_compressed_write.at:2010' \
  "Write structure array with 2D 8-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "923. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2011" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2011"
$as_echo "mat73_compressed_write.at:2012" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2012"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2014: \$builddir/test_mat -v 7.3 -z -c int8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_struct_2d_numeric" "mat73_compressed_write.at:2014"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2014"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2065: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:2065"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2065"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2066" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2066"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12)),3,4);
    expdata(1).field2 = reshape(int8((13:24)),3,4);
    expdata(2).field1 = reshape(int8((25:36)),3,4);
    expdata(2).field2 = reshape(int8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2091: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2091"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2091"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_923
#AT_START_924
at_fn_group_banner 924 'mat73_compressed_write.at:2094' \
  "Write structure array with 2D 8-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "924. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2095" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2095"
$as_echo "mat73_compressed_write.at:2096" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2096"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2098: \$builddir/test_mat -v 7.3 -z -c uint8 write_struct_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_struct_2d_numeric" "mat73_compressed_write.at:2098"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_struct_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2098"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2149: \$builddir/test_mat readvar test_write_struct_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_numeric.mat a" "mat73_compressed_write.at:2149"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2149"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2150" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2150"
cat >test_write_struct_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12)),3,4);
    expdata(1).field2 = reshape(uint8((13:24)),3,4);
    expdata(2).field1 = reshape(uint8((25:36)),3,4);
    expdata(2).field2 = reshape(uint8((37:48)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2175: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2175"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2175"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_924
#AT_START_925
at_fn_group_banner 925 'mat73_compressed_write.at:2178' \
  "Write structure array with 2D double-precision complex fields" "" 12
at_xfail=no
(
  $as_echo "925. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2179" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2179"
$as_echo "mat73_compressed_write.at:2180" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2180"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2182: \$builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric" "mat73_compressed_write.at:2182"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2182"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2233: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2233"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2233"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2234" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2234"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape((1:12) + j*(51:62),3,4);
    expdata(1).field2 = reshape((13:24) + j*(63:74),3,4);
    expdata(2).field1 = reshape((25:36) + j*(75:86),3,4);
    expdata(2).field2 = reshape((37:48) + j*(87:98),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2259: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2259"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2259"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_925
#AT_START_926
at_fn_group_banner 926 'mat73_compressed_write.at:2262' \
  "Write structure array with 2D single-precision complex fields" "" 12
at_xfail=no
(
  $as_echo "926. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2263" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2263"
$as_echo "mat73_compressed_write.at:2264" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2264"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2266: \$builddir/test_mat -v 7.3 -z -c single write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_struct_complex_2d_numeric" "mat73_compressed_write.at:2266"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2266"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2317: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2317"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2317"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2318" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2318"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(single((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(single((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(single((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(single((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2343: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2343"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_926
#AT_START_927
at_fn_group_banner 927 'mat73_compressed_write.at:2346' \
  "Write structure array with 2D 64-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "927. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2347" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2347"
$as_echo "mat73_compressed_write.at:2348" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2348"
$as_echo "mat73_compressed_write.at:2349" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2349"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2351: \$builddir/test_mat -v 7.3 -z -c int64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2351"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2351"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2402: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2402"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2402"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2403" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2403"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2428: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2428"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2428"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_927
#AT_START_928
at_fn_group_banner 928 'mat73_compressed_write.at:2431' \
  "Write structure array with 2D 64-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "928. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2432" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2432"
$as_echo "mat73_compressed_write.at:2433" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2433"
$as_echo "mat73_compressed_write.at:2434" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2434"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2436: \$builddir/test_mat -v 7.3 -z -c uint64 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2436"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2436"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2487: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2487"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2487"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2488" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2488"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint64((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint64((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint64((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint64((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2513: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2513"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2513"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_928
#AT_START_929
at_fn_group_banner 929 'mat73_compressed_write.at:2516' \
  "Write structure array with 2D 32-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "929. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2517" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2517"
$as_echo "mat73_compressed_write.at:2518" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2518"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2520: \$builddir/test_mat -v 7.3 -z -c int32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2520"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2520"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2571: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2571"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2571"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2572" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2572"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2597: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2597"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2597"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_929
#AT_START_930
at_fn_group_banner 930 'mat73_compressed_write.at:2600' \
  "Write structure array with 2D 32-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "930. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2601" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2601"
$as_echo "mat73_compressed_write.at:2602" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2602"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2604: \$builddir/test_mat -v 7.3 -z -c uint32 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2604"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2604"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2655: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2655"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2655"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2656" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2656"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint32((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint32((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint32((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint32((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2681: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2681"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2681"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_930
#AT_START_931
at_fn_group_banner 931 'mat73_compressed_write.at:2684' \
  "Write structure array with 2D 16-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "931. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2685" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2685"
$as_echo "mat73_compressed_write.at:2686" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2686"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2688: \$builddir/test_mat -v 7.3 -z -c int16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2688"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2688"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2739: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2739"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2739"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2740" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2740"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2765: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2765"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2765"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_931
#AT_START_932
at_fn_group_banner 932 'mat73_compressed_write.at:2768' \
  "Write structure array with 2D 16-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "932. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2769" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2769"
$as_echo "mat73_compressed_write.at:2770" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2770"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2772: \$builddir/test_mat -v 7.3 -z -c uint16 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2772"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2772"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2823: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2823"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2823"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2824" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2824"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint16((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint16((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint16((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint16((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2849: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2849"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2849"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_932
#AT_START_933
at_fn_group_banner 933 'mat73_compressed_write.at:2852' \
  "Write structure array with 2D 8-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "933. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2853" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2853"
$as_echo "mat73_compressed_write.at:2854" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2854"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2856: \$builddir/test_mat -v 7.3 -z -c int8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2856"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2856"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2907: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2907"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2907"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2908" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2908"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(int8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(int8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(int8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(int8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2933: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:2933"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2933"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_933
#AT_START_934
at_fn_group_banner 934 'mat73_compressed_write.at:2936' \
  "Write structure array with 2D 8-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "934. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:2937" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2937"
$as_echo "mat73_compressed_write.at:2938" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2938"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2940: \$builddir/test_mat -v 7.3 -z -c uint8 write_struct_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_struct_complex_2d_numeric" "mat73_compressed_write.at:2940"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_struct_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2940"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:2991: \$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a" "mat73_compressed_write.at:2991"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:2991"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:2992" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:2992"
cat >test_write_struct_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_struct_complex_2d_numeric.mat
    expdata(1).field1 = reshape(uint8((1:12) + j*(51:62)),3,4);
    expdata(1).field2 = reshape(uint8((13:24) + j*(63:74)),3,4);
    expdata(2).field1 = reshape(uint8((25:36) + j*(75:86)),3,4);
    expdata(2).field2 = reshape(uint8((37:48) + j*(87:98)),3,4);
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3017: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3017"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3017"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_934
#AT_START_935
at_fn_group_banner 935 'mat73_compressed_write.at:3020' \
  "Write structure array with 2D logical fields" "   " 12
at_xfail=no
(
  $as_echo "935. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3021" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3021"
$as_echo "mat73_compressed_write.at:3022" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3022"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3024: \$builddir/test_mat -v 7.3 -z write_struct_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_struct_2d_logical" "mat73_compressed_write.at:3024"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_struct_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3024"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
}
      Name: field2
      Rank: 2
Dimensions: 5 x 10
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
}
      Name: field1
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
      Name: field2
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3076: \$builddir/test_mat readvar test_write_struct_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_struct_2d_logical.mat a" "mat73_compressed_write.at:3076"
( $at_check_trace; $builddir/test_mat readvar test_write_struct_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3076"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3077" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3077"
cat >test_write_struct_2d_logical.m <<'_ATEOF'

try
    load test_write_struct_2d_logical.mat
    expdata(1).field1 = logical(mod(reshape(0:49,5,10),2));
    expdata(1).field2 = ~expdata(1).field1;
    expdata(2).field1 = false(0,5);
    expdata(2).field2 = tril(true(5));
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a(1).field1),class(expdata(1).field1));
    pass = pass && strcmp(class(a(1).field2),class(expdata(1).field2));
    pass = pass && strcmp(class(a(2).field1),class(expdata(2).field1));
    pass = pass && strcmp(class(a(2).field2),class(expdata(2).field2));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3102: \$MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3102"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_struct_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3102"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_935
#AT_START_936
at_fn_group_banner 936 'mat73_compressed_write.at:3105' \
  "Write empty cell array" "                         " 12
at_xfail=no
(
  $as_echo "936. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3106" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3106"
$as_echo "mat73_compressed_write.at:3107" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3107"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3108: \$builddir/test_mat -v 7.3 -z write_empty_cell"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_empty_cell" "mat73_compressed_write.at:3108"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_empty_cell
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3108"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var1
      Rank: 2
Dimensions: 0 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3119: \$builddir/test_mat readvar test_write_empty_cell.mat var1"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var1" "mat73_compressed_write.at:3119"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var1
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3119"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: var2
      Rank: 2
Dimensions: 2 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
      Rank: 2
Dimensions: 0 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3138: \$builddir/test_mat readvar test_write_empty_cell.mat var2"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_empty_cell.mat var2" "mat73_compressed_write.at:3138"
( $at_check_trace; $builddir/test_mat readvar test_write_empty_cell.mat var2
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3138"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3139" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3139"
cat >test_write_empty_cell.m <<'_ATEOF'

try
    load test_write_empty_cell.mat
    expdata1 = cell(0,1);
    expdata2 = {zeros(0,1);zeros(0,1)};
    pass = true;
    pass = pass && isequal(var1,expdata1);
    pass = pass && isequal(var2,expdata2);
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3159: \$MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3159"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_empty_cell;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3159"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_936
#AT_START_937
at_fn_group_banner 937 'mat73_compressed_write.at:3162' \
  "Write cell array with 2D double-precision fields" "" 12
at_xfail=no
(
  $as_echo "937. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3163" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3163"
$as_echo "mat73_compressed_write.at:3164" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3164"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3166: \$builddir/test_mat -v 7.3 -z write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_cell_2d_numeric" "mat73_compressed_write.at:3166"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3166"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3213: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3213"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3213"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3214" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3214"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape((1:12),3,4);reshape((13:24),3,4);...
               reshape((25:36),3,4);reshape((37:48),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3237: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3237"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3237"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_937
#AT_START_938
at_fn_group_banner 938 'mat73_compressed_write.at:3240' \
  "Write cell array with 2D single-precision fields" "" 12
at_xfail=no
(
  $as_echo "938. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3241" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3241"
$as_echo "mat73_compressed_write.at:3242" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3242"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3244: \$builddir/test_mat -v 7.3 -z -c single write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_cell_2d_numeric" "mat73_compressed_write.at:3244"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3244"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array
 Data Type: IEEE 754 single-precision
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3291: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3291"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3291"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3292" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3292"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(single((1:12)),3,4);reshape(single((13:24)),3,4);...
               reshape(single((25:36)),3,4);reshape(single((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3315: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3315"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3315"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_938
#AT_START_939
at_fn_group_banner 939 'mat73_compressed_write.at:3318' \
  "Write cell array with 2D 64-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "939. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3319" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3319"
$as_echo "mat73_compressed_write.at:3320" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3320"
$as_echo "mat73_compressed_write.at:3321" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3321"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3323: \$builddir/test_mat -v 7.3 -z -c int64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_cell_2d_numeric" "mat73_compressed_write.at:3323"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3323"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array
 Data Type: 64-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3370: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3370"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3370"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3371" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3371"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int64((1:12)),3,4);reshape(int64((13:24)),3,4);...
               reshape(int64((25:36)),3,4);reshape(int64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3394: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3394"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3394"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_939
#AT_START_940
at_fn_group_banner 940 'mat73_compressed_write.at:3397' \
  "Write cell array with 2D 64-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "940. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3398" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3398"
$as_echo "mat73_compressed_write.at:3399" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3399"
$as_echo "mat73_compressed_write.at:3400" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3400"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3402: \$builddir/test_mat -v 7.3 -z -c uint64 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_cell_2d_numeric" "mat73_compressed_write.at:3402"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3402"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array
 Data Type: 64-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3449: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3449"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3449"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3450" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3450"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint64((1:12)),3,4);reshape(uint64((13:24)),3,4);...
               reshape(uint64((25:36)),3,4);reshape(uint64((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3473: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3473"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3473"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_940
#AT_START_941
at_fn_group_banner 941 'mat73_compressed_write.at:3476' \
  "Write cell array with 2D 32-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "941. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3477" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3477"
$as_echo "mat73_compressed_write.at:3478" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3478"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3480: \$builddir/test_mat -v 7.3 -z -c int32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_cell_2d_numeric" "mat73_compressed_write.at:3480"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3480"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array
 Data Type: 32-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3527: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3527"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3527"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3528" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3528"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int32((1:12)),3,4);reshape(int32((13:24)),3,4);...
               reshape(int32((25:36)),3,4);reshape(int32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3551: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3551"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3551"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_941
#AT_START_942
at_fn_group_banner 942 'mat73_compressed_write.at:3554' \
  "Write cell array with 2D 32-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "942. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3555" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3555"
$as_echo "mat73_compressed_write.at:3556" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3556"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3558: \$builddir/test_mat -v 7.3 -z -c uint32 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_cell_2d_numeric" "mat73_compressed_write.at:3558"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3558"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array
 Data Type: 32-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3605: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3605"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3605"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3606" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3606"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint32((1:12)),3,4);reshape(uint32((13:24)),3,4);...
               reshape(uint32((25:36)),3,4);reshape(uint32((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3629: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3629"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3629"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_942
#AT_START_943
at_fn_group_banner 943 'mat73_compressed_write.at:3632' \
  "Write cell array with 2D 16-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "943. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3633" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3633"
$as_echo "mat73_compressed_write.at:3634" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3634"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3636: \$builddir/test_mat -v 7.3 -z -c int16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_cell_2d_numeric" "mat73_compressed_write.at:3636"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3636"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array
 Data Type: 16-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3683: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3683"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3683"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3684" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3684"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int16((1:12)),3,4);reshape(int16((13:24)),3,4);...
               reshape(int16((25:36)),3,4);reshape(int16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3707: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3707"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3707"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_943
#AT_START_944
at_fn_group_banner 944 'mat73_compressed_write.at:3710' \
  "Write cell array with 2D 16-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "944. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3711" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3711"
$as_echo "mat73_compressed_write.at:3712" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3712"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3714: \$builddir/test_mat -v 7.3 -z -c uint16 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_cell_2d_numeric" "mat73_compressed_write.at:3714"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3714"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array
 Data Type: 16-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3761: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3761"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3761"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3762" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3762"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint16((1:12)),3,4);reshape(uint16((13:24)),3,4);...
               reshape(uint16((25:36)),3,4);reshape(uint16((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3785: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3785"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3785"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_944
#AT_START_945
at_fn_group_banner 945 'mat73_compressed_write.at:3788' \
  "Write cell array with 2D 8-bit signed integer fields" "" 12
at_xfail=no
(
  $as_echo "945. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3789" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3789"
$as_echo "mat73_compressed_write.at:3790" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3790"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3792: \$builddir/test_mat -v 7.3 -z -c int8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_cell_2d_numeric" "mat73_compressed_write.at:3792"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3792"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array
 Data Type: 8-bit, signed integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3839: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3839"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3839"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3840" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3840"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(int8((1:12)),3,4);reshape(int8((13:24)),3,4);...
               reshape(int8((25:36)),3,4);reshape(int8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3863: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3863"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3863"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_945
#AT_START_946
at_fn_group_banner 946 'mat73_compressed_write.at:3866' \
  "Write cell array with 2D 8-bit unsigned integer fields" "" 12
at_xfail=no
(
  $as_echo "946. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3867" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3867"
$as_echo "mat73_compressed_write.at:3868" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3868"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3870: \$builddir/test_mat -v 7.3 -z -c uint8 write_cell_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_cell_2d_numeric" "mat73_compressed_write.at:3870"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_cell_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3870"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
1 4 7 10 
2 5 8 11 
3 6 9 12 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
13 16 19 22 
14 17 20 23 
15 18 21 24 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
25 28 31 34 
26 29 32 35 
27 30 33 36 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array
 Data Type: 8-bit, unsigned integer
{
37 40 43 46 
38 41 44 47 
39 42 45 48 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3917: \$builddir/test_mat readvar test_write_cell_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_numeric.mat a" "mat73_compressed_write.at:3917"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3917"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3918" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3918"
cat >test_write_cell_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_2d_numeric.mat
    expdata = {reshape(uint8((1:12)),3,4);reshape(uint8((13:24)),3,4);...
               reshape(uint8((25:36)),3,4);reshape(uint8((37:48)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3941: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:3941"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3941"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_946
#AT_START_947
at_fn_group_banner 947 'mat73_compressed_write.at:3944' \
  "Write cell array with 2D double-precision complex fields" "" 12
at_xfail=no
(
  $as_echo "947. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:3945" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3945"
$as_echo "mat73_compressed_write.at:3946" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3946"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3948: \$builddir/test_mat -v 7.3 -z write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_cell_complex_2d_numeric" "mat73_compressed_write.at:3948"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3948"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:3995: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:3995"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:3995"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:3996" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:3996"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape((1:12)+j*(51:62),3,4);...
               reshape((13:24)+j*(63:74),3,4);...
               reshape((25:36)+j*(75:86),3,4);...
               reshape((37:48)+j*(87:98),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4021: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4021"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4021"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_947
#AT_START_948
at_fn_group_banner 948 'mat73_compressed_write.at:4024' \
  "Write cell array with 2D single-precision complex fields" "" 12
at_xfail=no
(
  $as_echo "948. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4025" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4025"
$as_echo "mat73_compressed_write.at:4026" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4026"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4028: \$builddir/test_mat -v 7.3 -z -c single write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_cell_complex_2d_numeric" "mat73_compressed_write.at:4028"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4028"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: Single Precision Array (complex)
 Data Type: IEEE 754 single-precision
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4075: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4075"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4075"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4076" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4076"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(single((1:12)+j*(51:62)),3,4);...
               reshape(single((13:24)+j*(63:74)),3,4);...
               reshape(single((25:36)+j*(75:86)),3,4);...
               reshape(single((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4101: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4101"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4101"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_948
#AT_START_949
at_fn_group_banner 949 'mat73_compressed_write.at:4104' \
  "Write cell array with 2D 64-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "949. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4105" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4105"
$as_echo "mat73_compressed_write.at:4106" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4106"
$as_echo "mat73_compressed_write.at:4107" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4107"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4109: \$builddir/test_mat -v 7.3 -z -c int64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4109"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4109"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, signed integer array (complex)
 Data Type: 64-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4156: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4156"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4156"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4157" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4157"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int64((1:12)+j*(51:62)),3,4);...
               reshape(int64((13:24)+j*(63:74)),3,4);...
               reshape(int64((25:36)+j*(75:86)),3,4);...
               reshape(int64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4182: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4182"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4182"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_949
#AT_START_950
at_fn_group_banner 950 'mat73_compressed_write.at:4185' \
  "Write cell array with 2D 64-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "950. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4186" >"$at_check_line_file"
(test $HAVE_UINT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4186"
$as_echo "mat73_compressed_write.at:4187" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4187"
$as_echo "mat73_compressed_write.at:4188" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4188"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4190: \$builddir/test_mat -v 7.3 -z -c uint64 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4190"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4190"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 64-bit, unsigned integer array (complex)
 Data Type: 64-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4237: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4237"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4237"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4238" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4238"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint64((1:12)+j*(51:62)),3,4);...
               reshape(uint64((13:24)+j*(63:74)),3,4);...
               reshape(uint64((25:36)+j*(75:86)),3,4);...
               reshape(uint64((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4263: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4263"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4263"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_950
#AT_START_951
at_fn_group_banner 951 'mat73_compressed_write.at:4266' \
  "Write cell array with 2D 32-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "951. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4267" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4267"
$as_echo "mat73_compressed_write.at:4268" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4268"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4270: \$builddir/test_mat -v 7.3 -z -c int32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4270"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4270"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, signed integer array (complex)
 Data Type: 32-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4317: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4317"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4317"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4318" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4318"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int32((1:12)+j*(51:62)),3,4);...
               reshape(int32((13:24)+j*(63:74)),3,4);...
               reshape(int32((25:36)+j*(75:86)),3,4);...
               reshape(int32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4343: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4343"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4343"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_951
#AT_START_952
at_fn_group_banner 952 'mat73_compressed_write.at:4346' \
  "Write cell array with 2D 32-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "952. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4347" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4347"
$as_echo "mat73_compressed_write.at:4348" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4348"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4350: \$builddir/test_mat -v 7.3 -z -c uint32 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4350"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4350"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 32-bit, unsigned integer array (complex)
 Data Type: 32-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4397: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4397"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4397"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4398" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4398"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint32((1:12)+j*(51:62)),3,4);...
               reshape(uint32((13:24)+j*(63:74)),3,4);...
               reshape(uint32((25:36)+j*(75:86)),3,4);...
               reshape(uint32((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4423: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4423"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4423"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_952
#AT_START_953
at_fn_group_banner 953 'mat73_compressed_write.at:4426' \
  "Write cell array with 2D 16-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "953. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4427" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4427"
$as_echo "mat73_compressed_write.at:4428" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4428"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4430: \$builddir/test_mat -v 7.3 -z -c int16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4430"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4430"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, signed integer array (complex)
 Data Type: 16-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4477: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4477"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4477"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4478" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4478"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int16((1:12)+j*(51:62)),3,4);...
               reshape(int16((13:24)+j*(63:74)),3,4);...
               reshape(int16((25:36)+j*(75:86)),3,4);...
               reshape(int16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4503: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4503"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4503"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_953
#AT_START_954
at_fn_group_banner 954 'mat73_compressed_write.at:4506' \
  "Write cell array with 2D 16-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "954. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4507" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4507"
$as_echo "mat73_compressed_write.at:4508" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4508"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4510: \$builddir/test_mat -v 7.3 -z -c uint16 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4510"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4510"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 16-bit, unsigned integer array (complex)
 Data Type: 16-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4557: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4557"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4557"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4558" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4558"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint16((1:12)+j*(51:62)),3,4);...
               reshape(uint16((13:24)+j*(63:74)),3,4);...
               reshape(uint16((25:36)+j*(75:86)),3,4);...
               reshape(uint16((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4583: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4583"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4583"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_954
#AT_START_955
at_fn_group_banner 955 'mat73_compressed_write.at:4586' \
  "Write cell array with 2D 8-bit signed integer complex fields" "" 12
at_xfail=no
(
  $as_echo "955. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4587" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4587"
$as_echo "mat73_compressed_write.at:4588" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4588"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4590: \$builddir/test_mat -v 7.3 -z -c int8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4590"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4590"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, signed integer array (complex)
 Data Type: 8-bit, signed integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4637: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4637"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4637"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4638" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4638"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(int8((1:12)+j*(51:62)),3,4);...
               reshape(int8((13:24)+j*(63:74)),3,4);...
               reshape(int8((25:36)+j*(75:86)),3,4);...
               reshape(int8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4663: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4663"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4663"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_955
#AT_START_956
at_fn_group_banner 956 'mat73_compressed_write.at:4666' \
  "Write cell array with 2D 8-bit unsigned integer complex fields" "" 12
at_xfail=no
(
  $as_echo "956. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4667" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4667"
$as_echo "mat73_compressed_write.at:4668" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4668"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4670: \$builddir/test_mat -v 7.3 -z -c uint8 write_cell_complex_2d_numeric"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_cell_complex_2d_numeric" "mat73_compressed_write.at:4670"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_cell_complex_2d_numeric
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4670"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
1 + 51i 4 + 54i 7 + 57i 10 + 60i 
2 + 52i 5 + 55i 8 + 58i 11 + 61i 
3 + 53i 6 + 56i 9 + 59i 12 + 62i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
13 + 63i 16 + 66i 19 + 69i 22 + 72i 
14 + 64i 17 + 67i 20 + 70i 23 + 73i 
15 + 65i 18 + 68i 21 + 71i 24 + 74i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
25 + 75i 28 + 78i 31 + 81i 34 + 84i 
26 + 76i 29 + 79i 32 + 82i 35 + 85i 
27 + 77i 30 + 80i 33 + 83i 36 + 86i 
}
      Rank: 2
Dimensions: 3 x 4
Class Type: 8-bit, unsigned integer array (complex)
 Data Type: 8-bit, unsigned integer
{
37 + 87i 40 + 90i 43 + 93i 46 + 96i 
38 + 88i 41 + 91i 44 + 94i 47 + 97i 
39 + 89i 42 + 92i 45 + 95i 48 + 98i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4717: \$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a" "mat73_compressed_write.at:4717"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_complex_2d_numeric.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4717"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4718" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4718"
cat >test_write_cell_complex_2d_numeric.m <<'_ATEOF'

try
    load test_write_cell_complex_2d_numeric.mat
    expdata = {reshape(uint8((1:12)+j*(51:62)),3,4);...
               reshape(uint8((13:24)+j*(63:74)),3,4);...
               reshape(uint8((25:36)+j*(75:86)),3,4);...
               reshape(uint8((37:48)+j*(87:98)),3,4);}
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4743: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4743"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_complex_2d_numeric;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4743"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_956
#AT_START_957
at_fn_group_banner 957 'mat73_compressed_write.at:4746' \
  "Write cell array with 2D logical fields" "        " 12
at_xfail=no
(
  $as_echo "957. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_write.at:4747" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4747"
$as_echo "mat73_compressed_write.at:4748" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4748"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4750: \$builddir/test_mat -v 7.3 -z write_cell_2d_logical"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z write_cell_2d_logical" "mat73_compressed_write.at:4750"
( $at_check_trace; $builddir/test_mat -v 7.3 -z write_cell_2d_logical
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4750"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 1 1 1 1 
0 1 1 1 1 
0 0 1 1 1 
0 0 0 1 1 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1 
}
      Rank: 2
Dimensions: 5 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
{
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 
}
      Rank: 2
Dimensions: 0 x 5
Class Type: 8-bit, unsigned integer array (logical)
 Data Type: 8-bit, unsigned integer
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4798: \$builddir/test_mat readvar test_write_cell_2d_logical.mat a"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_cell_2d_logical.mat a" "mat73_compressed_write.at:4798"
( $at_check_trace; $builddir/test_mat readvar test_write_cell_2d_logical.mat a
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4798"
$at_failed && at_fn_log_failure
$at_traceon; }

$as_echo "mat73_compressed_write.at:4799" >"$at_check_line_file"
(test -z "$MATLABEXE") \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_write.at:4799"
cat >test_write_cell_2d_logical.m <<'_ATEOF'

try
    load test_write_cell_2d_logical.mat
    expdata = {triu(true(5));tril(true(5));logical(eye(5));false(0,5)};
    pass = true;
    pass = pass && isequal(a,expdata(:));
    pass = pass && strcmp(class(a{1}),class(expdata{1}));
    pass = pass && strcmp(class(a{2}),class(expdata{2}));
    pass = pass && strcmp(class(a{3}),class(expdata{3}));
    pass = pass && strcmp(class(a{4}),class(expdata{4}));
catch me
    pass = false;
end
if pass
    fprintf('PASSED\n');
else
    fprintf('FAILED\n');
end
_ATEOF

{ set +x
$as_echo "$at_srcdir/mat73_compressed_write.at:4821: \$MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | \$GREP PASSED"
at_fn_check_prepare_notrace 'a shell pipeline' "mat73_compressed_write.at:4821"
( $at_check_trace; $MATLABEXE -nosplash -nojvm -r 'test_write_cell_2d_logical;exit' | $GREP PASSED
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo >>"$at_stdout"; $as_echo "PASSED
" | \
  $at_diff - "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_write.at:4821"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_957
#AT_START_958
at_fn_group_banner 958 'mat5_uncompressed_extended_sparse.at:1' \
  "Write 2D sparse single-precision array" "         " 13
at_xfail=no
(
  $as_echo "958. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:2" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:2"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:4: \$builddir/test_mat -v 5 -c single write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_sparse" "mat5_uncompressed_extended_sparse.at:4"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:4"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 single-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:40: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:40"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:40"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_958
#AT_START_959
at_fn_group_banner 959 'mat5_uncompressed_extended_sparse.at:43' \
  "Write 2D sparse 64-bit integer array" "           " 13
at_xfail=no
(
  $as_echo "959. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:44" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:44"
$as_echo "mat5_uncompressed_extended_sparse.at:45" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:45"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:47: \$builddir/test_mat -v 5 -c int64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_sparse" "mat5_uncompressed_extended_sparse.at:47"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:47"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:83: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:83"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:83"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_959
#AT_START_960
at_fn_group_banner 960 'mat5_uncompressed_extended_sparse.at:86' \
  "Write 2D sparse 64-bit unsigned integer array" "  " 13
at_xfail=no
(
  $as_echo "960. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:87" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:87"
$as_echo "mat5_uncompressed_extended_sparse.at:88" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:88"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:90: \$builddir/test_mat -v 5 -c uint64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_sparse" "mat5_uncompressed_extended_sparse.at:90"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:90"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:126: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:126"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:126"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_960
#AT_START_961
at_fn_group_banner 961 'mat5_uncompressed_extended_sparse.at:129' \
  "Write 2D sparse 32-bit integer array" "           " 13
at_xfail=no
(
  $as_echo "961. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:130" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:130"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:132: \$builddir/test_mat -v 5 -c int32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_sparse" "mat5_uncompressed_extended_sparse.at:132"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:168: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:168"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:168"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_961
#AT_START_962
at_fn_group_banner 962 'mat5_uncompressed_extended_sparse.at:171' \
  "Write 2D sparse 32-bit unsigned integer array" "  " 13
at_xfail=no
(
  $as_echo "962. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:172" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:172"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:174: \$builddir/test_mat -v 5 -c uint32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_sparse" "mat5_uncompressed_extended_sparse.at:174"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:174"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:210: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:210"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:210"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_962
#AT_START_963
at_fn_group_banner 963 'mat5_uncompressed_extended_sparse.at:213' \
  "Write 2D sparse 16-bit integer array" "           " 13
at_xfail=no
(
  $as_echo "963. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:214" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:214"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:216: \$builddir/test_mat -v 5 -c int16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_sparse" "mat5_uncompressed_extended_sparse.at:216"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:216"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:252: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:252"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:252"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_963
#AT_START_964
at_fn_group_banner 964 'mat5_uncompressed_extended_sparse.at:255' \
  "Write 2D sparse 16-bit unsigned integer array" "  " 13
at_xfail=no
(
  $as_echo "964. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:256" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:256"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:258: \$builddir/test_mat -v 5 -c uint16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_sparse" "mat5_uncompressed_extended_sparse.at:258"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:294: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:294"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:294"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_964
#AT_START_965
at_fn_group_banner 965 'mat5_uncompressed_extended_sparse.at:297' \
  "Write 2D sparse 8-bit integer array" "            " 13
at_xfail=no
(
  $as_echo "965. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:298" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:298"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:300: \$builddir/test_mat -v 5 -c int8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_sparse" "mat5_uncompressed_extended_sparse.at:300"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:300"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:336: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:336"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:336"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_965
#AT_START_966
at_fn_group_banner 966 'mat5_uncompressed_extended_sparse.at:339' \
  "Write 2D sparse 8-bit unsigned integer array" "   " 13
at_xfail=no
(
  $as_echo "966. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:340" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:340"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:342: \$builddir/test_mat -v 5 -c uint8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_sparse" "mat5_uncompressed_extended_sparse.at:342"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:342"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:378: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:378"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:378"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_966
#AT_START_967
at_fn_group_banner 967 'mat5_uncompressed_extended_sparse.at:381' \
  "Write 2D sparse complex single-precision array" " " 13
at_xfail=no
(
  $as_echo "967. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:382" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:382"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:384: \$builddir/test_mat -v 5 -c single write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c single write_complex_sparse" "mat5_uncompressed_extended_sparse.at:384"
( $at_check_trace; $builddir/test_mat -v 5 -c single write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:384"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 single-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:420: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:420"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:420"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_967
#AT_START_968
at_fn_group_banner 968 'mat5_uncompressed_extended_sparse.at:423' \
  "Write 2D sparse complex 64-bit integer complex array" "" 13
at_xfail=no
(
  $as_echo "968. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:424" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:424"
$as_echo "mat5_uncompressed_extended_sparse.at:425" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:425"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:427: \$builddir/test_mat -v 5 -c int64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int64 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:427"
( $at_check_trace; $builddir/test_mat -v 5 -c int64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:427"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:463: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:463"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:463"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_968
#AT_START_969
at_fn_group_banner 969 'mat5_uncompressed_extended_sparse.at:466' \
  "Write 2D sparse complex 64-bit unsigned integer complex array" "" 13
at_xfail=no
(
  $as_echo "969. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:467" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:467"
$as_echo "mat5_uncompressed_extended_sparse.at:468" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:468"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:470: \$builddir/test_mat -v 5 -c uint64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint64 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:470"
( $at_check_trace; $builddir/test_mat -v 5 -c uint64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:470"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:506: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:506"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:506"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_969
#AT_START_970
at_fn_group_banner 970 'mat5_uncompressed_extended_sparse.at:509' \
  "Write 2D sparse complex 32-bit integer complex array" "" 13
at_xfail=no
(
  $as_echo "970. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:510" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:510"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:512: \$builddir/test_mat -v 5 -c int32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int32 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:512"
( $at_check_trace; $builddir/test_mat -v 5 -c int32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:512"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:548: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:548"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:548"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_970
#AT_START_971
at_fn_group_banner 971 'mat5_uncompressed_extended_sparse.at:551' \
  "Write 2D sparse complex 32-bit unsigned integer complex array" "" 13
at_xfail=no
(
  $as_echo "971. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:552" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:552"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:554: \$builddir/test_mat -v 5 -c uint32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint32 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:554"
( $at_check_trace; $builddir/test_mat -v 5 -c uint32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:554"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:590: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:590"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:590"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_971
#AT_START_972
at_fn_group_banner 972 'mat5_uncompressed_extended_sparse.at:593' \
  "Write 2D sparse complex 16-bit integer complex array" "" 13
at_xfail=no
(
  $as_echo "972. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:594" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:594"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:596: \$builddir/test_mat -v 5 -c int16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int16 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:596"
( $at_check_trace; $builddir/test_mat -v 5 -c int16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:596"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:632: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:632"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:632"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_972
#AT_START_973
at_fn_group_banner 973 'mat5_uncompressed_extended_sparse.at:635' \
  "Write 2D sparse complex 16-bit unsigned integer complex array" "" 13
at_xfail=no
(
  $as_echo "973. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:636" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:636"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:638: \$builddir/test_mat -v 5 -c uint16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint16 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:638"
( $at_check_trace; $builddir/test_mat -v 5 -c uint16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:638"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:674: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:674"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:674"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_973
#AT_START_974
at_fn_group_banner 974 'mat5_uncompressed_extended_sparse.at:677' \
  "Write 2D sparse complex 8-bit integer complex array" "" 13
at_xfail=no
(
  $as_echo "974. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:678" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:678"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:680: \$builddir/test_mat -v 5 -c int8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c int8 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:680"
( $at_check_trace; $builddir/test_mat -v 5 -c int8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:680"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:716: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:716"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:716"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_974
#AT_START_975
at_fn_group_banner 975 'mat5_uncompressed_extended_sparse.at:719' \
  "Write 2D sparse complex 8-bit unsigned integer complex array" "" 13
at_xfail=no
(
  $as_echo "975. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_uncompressed_extended_sparse.at:720" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_uncompressed_extended_sparse.at:720"
{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:722: \$builddir/test_mat -v 5 -c uint8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -c uint8 write_complex_sparse" "mat5_uncompressed_extended_sparse.at:722"
( $at_check_trace; $builddir/test_mat -v 5 -c uint8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:722"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_uncompressed_extended_sparse.at:758: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_uncompressed_extended_sparse.at:758"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_uncompressed_extended_sparse.at:758"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_975
#AT_START_976
at_fn_group_banner 976 'mat5_compressed_extended_sparse.at:1' \
  "Write 2D sparse single-precision array" "         " 14
at_xfail=no
(
  $as_echo "976. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:2" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:2"
$as_echo "mat5_compressed_extended_sparse.at:3" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:3"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:5: \$builddir/test_mat -v 5 -z -c single write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_sparse" "mat5_compressed_extended_sparse.at:5"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:5"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 single-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:41: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:41"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_976
#AT_START_977
at_fn_group_banner 977 'mat5_compressed_extended_sparse.at:44' \
  "Write 2D sparse 64-bit integer array" "           " 14
at_xfail=no
(
  $as_echo "977. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:45" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:45"
$as_echo "mat5_compressed_extended_sparse.at:46" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:46"
$as_echo "mat5_compressed_extended_sparse.at:47" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:47"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:49: \$builddir/test_mat -v 5 -z -c int64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_sparse" "mat5_compressed_extended_sparse.at:49"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:49"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:85: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:85"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:85"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_977
#AT_START_978
at_fn_group_banner 978 'mat5_compressed_extended_sparse.at:88' \
  "Write 2D sparse 64-bit unsigned integer array" "  " 14
at_xfail=no
(
  $as_echo "978. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:89" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:89"
$as_echo "mat5_compressed_extended_sparse.at:90" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:90"
$as_echo "mat5_compressed_extended_sparse.at:91" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:91"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:93: \$builddir/test_mat -v 5 -z -c uint64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_sparse" "mat5_compressed_extended_sparse.at:93"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:93"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:129: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:129"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:129"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_978
#AT_START_979
at_fn_group_banner 979 'mat5_compressed_extended_sparse.at:132' \
  "Write 2D sparse 32-bit integer array" "           " 14
at_xfail=no
(
  $as_echo "979. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:133" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:133"
$as_echo "mat5_compressed_extended_sparse.at:134" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:134"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:136: \$builddir/test_mat -v 5 -z -c int32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_sparse" "mat5_compressed_extended_sparse.at:136"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:136"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:172: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:172"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:172"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_979
#AT_START_980
at_fn_group_banner 980 'mat5_compressed_extended_sparse.at:175' \
  "Write 2D sparse 32-bit unsigned integer array" "  " 14
at_xfail=no
(
  $as_echo "980. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:176" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:176"
$as_echo "mat5_compressed_extended_sparse.at:177" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:177"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:179: \$builddir/test_mat -v 5 -z -c uint32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_sparse" "mat5_compressed_extended_sparse.at:179"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:179"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:215: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:215"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:215"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_980
#AT_START_981
at_fn_group_banner 981 'mat5_compressed_extended_sparse.at:218' \
  "Write 2D sparse 16-bit integer array" "           " 14
at_xfail=no
(
  $as_echo "981. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:219" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:219"
$as_echo "mat5_compressed_extended_sparse.at:220" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:220"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:222: \$builddir/test_mat -v 5 -z -c int16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_sparse" "mat5_compressed_extended_sparse.at:222"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:258: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:258"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_981
#AT_START_982
at_fn_group_banner 982 'mat5_compressed_extended_sparse.at:261' \
  "Write 2D sparse 16-bit unsigned integer array" "  " 14
at_xfail=no
(
  $as_echo "982. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:262" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:262"
$as_echo "mat5_compressed_extended_sparse.at:263" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:263"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:265: \$builddir/test_mat -v 5 -z -c uint16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_sparse" "mat5_compressed_extended_sparse.at:265"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:265"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:301: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:301"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:301"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_982
#AT_START_983
at_fn_group_banner 983 'mat5_compressed_extended_sparse.at:304' \
  "Write 2D sparse 8-bit integer array" "            " 14
at_xfail=no
(
  $as_echo "983. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:305" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:305"
$as_echo "mat5_compressed_extended_sparse.at:306" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:306"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:308: \$builddir/test_mat -v 5 -z -c int8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_sparse" "mat5_compressed_extended_sparse.at:308"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:308"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:344: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:344"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:344"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_983
#AT_START_984
at_fn_group_banner 984 'mat5_compressed_extended_sparse.at:347' \
  "Write 2D sparse 8-bit unsigned integer array" "   " 14
at_xfail=no
(
  $as_echo "984. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:348" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:348"
$as_echo "mat5_compressed_extended_sparse.at:349" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:349"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:351: \$builddir/test_mat -v 5 -z -c uint8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_sparse" "mat5_compressed_extended_sparse.at:351"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:351"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:387: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat5_compressed_extended_sparse.at:387"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:387"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_984
#AT_START_985
at_fn_group_banner 985 'mat5_compressed_extended_sparse.at:390' \
  "Write 2D sparse complex single-precision array" " " 14
at_xfail=no
(
  $as_echo "985. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:391" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:391"
$as_echo "mat5_compressed_extended_sparse.at:392" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:392"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:394: \$builddir/test_mat -v 5 -z -c single write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c single write_complex_sparse" "mat5_compressed_extended_sparse.at:394"
( $at_check_trace; $builddir/test_mat -v 5 -z -c single write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 single-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:430: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:430"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:430"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_985
#AT_START_986
at_fn_group_banner 986 'mat5_compressed_extended_sparse.at:433' \
  "Write 2D sparse complex 64-bit integer complex array" "" 14
at_xfail=no
(
  $as_echo "986. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:434" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:434"
$as_echo "mat5_compressed_extended_sparse.at:435" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:435"
$as_echo "mat5_compressed_extended_sparse.at:436" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:436"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:438: \$builddir/test_mat -v 5 -z -c int64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int64 write_complex_sparse" "mat5_compressed_extended_sparse.at:438"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:438"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:474: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:474"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:474"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_986
#AT_START_987
at_fn_group_banner 987 'mat5_compressed_extended_sparse.at:477' \
  "Write 2D sparse complex 64-bit unsigned integer complex array" "" 14
at_xfail=no
(
  $as_echo "987. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:478" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:478"
$as_echo "mat5_compressed_extended_sparse.at:479" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:479"
$as_echo "mat5_compressed_extended_sparse.at:480" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:480"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:482: \$builddir/test_mat -v 5 -z -c uint64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint64 write_complex_sparse" "mat5_compressed_extended_sparse.at:482"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:482"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:518: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:518"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:518"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_987
#AT_START_988
at_fn_group_banner 988 'mat5_compressed_extended_sparse.at:521' \
  "Write 2D sparse complex 32-bit integer complex array" "" 14
at_xfail=no
(
  $as_echo "988. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:522" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:522"
$as_echo "mat5_compressed_extended_sparse.at:523" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:523"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:525: \$builddir/test_mat -v 5 -z -c int32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int32 write_complex_sparse" "mat5_compressed_extended_sparse.at:525"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:525"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:561: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:561"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:561"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_988
#AT_START_989
at_fn_group_banner 989 'mat5_compressed_extended_sparse.at:564' \
  "Write 2D sparse complex 32-bit unsigned integer complex array" "" 14
at_xfail=no
(
  $as_echo "989. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:565" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:565"
$as_echo "mat5_compressed_extended_sparse.at:566" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:566"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:568: \$builddir/test_mat -v 5 -z -c uint32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint32 write_complex_sparse" "mat5_compressed_extended_sparse.at:568"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:568"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:604: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:604"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:604"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_989
#AT_START_990
at_fn_group_banner 990 'mat5_compressed_extended_sparse.at:607' \
  "Write 2D sparse complex 16-bit integer complex array" "" 14
at_xfail=no
(
  $as_echo "990. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:608" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:608"
$as_echo "mat5_compressed_extended_sparse.at:609" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:609"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:611: \$builddir/test_mat -v 5 -z -c int16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int16 write_complex_sparse" "mat5_compressed_extended_sparse.at:611"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:611"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:647: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:647"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:647"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_990
#AT_START_991
at_fn_group_banner 991 'mat5_compressed_extended_sparse.at:650' \
  "Write 2D sparse complex 16-bit unsigned integer complex array" "" 14
at_xfail=no
(
  $as_echo "991. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:651" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:651"
$as_echo "mat5_compressed_extended_sparse.at:652" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:652"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:654: \$builddir/test_mat -v 5 -z -c uint16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint16 write_complex_sparse" "mat5_compressed_extended_sparse.at:654"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:654"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:690: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:690"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:690"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_991
#AT_START_992
at_fn_group_banner 992 'mat5_compressed_extended_sparse.at:693' \
  "Write 2D sparse complex 8-bit integer complex array" "" 14
at_xfail=no
(
  $as_echo "992. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:694" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:694"
$as_echo "mat5_compressed_extended_sparse.at:695" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:695"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:697: \$builddir/test_mat -v 5 -z -c int8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c int8 write_complex_sparse" "mat5_compressed_extended_sparse.at:697"
( $at_check_trace; $builddir/test_mat -v 5 -z -c int8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:697"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:733: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:733"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:733"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_992
#AT_START_993
at_fn_group_banner 993 'mat5_compressed_extended_sparse.at:736' \
  "Write 2D sparse complex 8-bit unsigned integer complex array" "" 14
at_xfail=no
(
  $as_echo "993. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat5_compressed_extended_sparse.at:737" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:737"
$as_echo "mat5_compressed_extended_sparse.at:738" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat5_compressed_extended_sparse.at:738"
{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:740: \$builddir/test_mat -v 5 -z -c uint8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 5 -z -c uint8 write_complex_sparse" "mat5_compressed_extended_sparse.at:740"
( $at_check_trace; $builddir/test_mat -v 5 -z -c uint8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:740"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat5_compressed_extended_sparse.at:776: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat5_compressed_extended_sparse.at:776"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat5_compressed_extended_sparse.at:776"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_993
#AT_START_994
at_fn_group_banner 994 'mat73_uncompressed_extended_sparse.at:1' \
  "Write 2D sparse single-precision array" "         " 15
at_xfail=no
(
  $as_echo "994. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:2" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:2"
$as_echo "mat73_uncompressed_extended_sparse.at:3" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:3"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:5: \$builddir/test_mat -v 7.3 -c single write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_sparse" "mat73_uncompressed_extended_sparse.at:5"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:5"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 single-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:41: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:41"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:41"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_994
#AT_START_995
at_fn_group_banner 995 'mat73_uncompressed_extended_sparse.at:44' \
  "Write 2D sparse 64-bit integer array" "           " 15
at_xfail=no
(
  $as_echo "995. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:45" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:45"
$as_echo "mat73_uncompressed_extended_sparse.at:46" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:46"
$as_echo "mat73_uncompressed_extended_sparse.at:47" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:47"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:49: \$builddir/test_mat -v 7.3 -c int64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_sparse" "mat73_uncompressed_extended_sparse.at:49"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:49"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:85: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:85"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:85"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_995
#AT_START_996
at_fn_group_banner 996 'mat73_uncompressed_extended_sparse.at:88' \
  "Write 2D sparse 64-bit unsigned integer array" "  " 15
at_xfail=no
(
  $as_echo "996. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:89" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:89"
$as_echo "mat73_uncompressed_extended_sparse.at:90" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:90"
$as_echo "mat73_uncompressed_extended_sparse.at:91" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:91"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:93: \$builddir/test_mat -v 7.3 -c uint64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_sparse" "mat73_uncompressed_extended_sparse.at:93"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:93"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:129: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:129"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:129"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_996
#AT_START_997
at_fn_group_banner 997 'mat73_uncompressed_extended_sparse.at:132' \
  "Write 2D sparse 32-bit integer array" "           " 15
at_xfail=no
(
  $as_echo "997. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:133" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:133"
$as_echo "mat73_uncompressed_extended_sparse.at:134" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:134"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:136: \$builddir/test_mat -v 7.3 -c int32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_sparse" "mat73_uncompressed_extended_sparse.at:136"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:136"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:172: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:172"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:172"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_997
#AT_START_998
at_fn_group_banner 998 'mat73_uncompressed_extended_sparse.at:175' \
  "Write 2D sparse 32-bit unsigned integer array" "  " 15
at_xfail=no
(
  $as_echo "998. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:176" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:176"
$as_echo "mat73_uncompressed_extended_sparse.at:177" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:177"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:179: \$builddir/test_mat -v 7.3 -c uint32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_sparse" "mat73_uncompressed_extended_sparse.at:179"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:179"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:215: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:215"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:215"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_998
#AT_START_999
at_fn_group_banner 999 'mat73_uncompressed_extended_sparse.at:218' \
  "Write 2D sparse 16-bit integer array" "           " 15
at_xfail=no
(
  $as_echo "999. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:219" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:219"
$as_echo "mat73_uncompressed_extended_sparse.at:220" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:220"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:222: \$builddir/test_mat -v 7.3 -c int16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_sparse" "mat73_uncompressed_extended_sparse.at:222"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:222"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:258: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:258"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:258"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_999
#AT_START_1000
at_fn_group_banner 1000 'mat73_uncompressed_extended_sparse.at:261' \
  "Write 2D sparse 16-bit unsigned integer array" "  " 15
at_xfail=no
(
  $as_echo "1000. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:262" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:262"
$as_echo "mat73_uncompressed_extended_sparse.at:263" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:263"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:265: \$builddir/test_mat -v 7.3 -c uint16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_sparse" "mat73_uncompressed_extended_sparse.at:265"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:265"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:301: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:301"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:301"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1000
#AT_START_1001
at_fn_group_banner 1001 'mat73_uncompressed_extended_sparse.at:304' \
  "Write 2D sparse 8-bit integer array" "            " 15
at_xfail=no
(
  $as_echo "1001. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:305" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:305"
$as_echo "mat73_uncompressed_extended_sparse.at:306" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:306"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:308: \$builddir/test_mat -v 7.3 -c int8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_sparse" "mat73_uncompressed_extended_sparse.at:308"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:308"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:344: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:344"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:344"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1001
#AT_START_1002
at_fn_group_banner 1002 'mat73_uncompressed_extended_sparse.at:347' \
  "Write 2D sparse 8-bit unsigned integer array" "   " 15
at_xfail=no
(
  $as_echo "1002. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:348" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:348"
$as_echo "mat73_uncompressed_extended_sparse.at:349" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:349"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:351: \$builddir/test_mat -v 7.3 -c uint8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_sparse" "mat73_uncompressed_extended_sparse.at:351"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:351"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:387: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:387"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:387"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1002
#AT_START_1003
at_fn_group_banner 1003 'mat73_uncompressed_extended_sparse.at:390' \
  "Write 2D sparse complex single-precision array" " " 15
at_xfail=no
(
  $as_echo "1003. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:391" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:391"
$as_echo "mat73_uncompressed_extended_sparse.at:392" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:392"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:394: \$builddir/test_mat -v 7.3 -c single write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c single write_complex_sparse" "mat73_uncompressed_extended_sparse.at:394"
( $at_check_trace; $builddir/test_mat -v 7.3 -c single write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:394"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 single-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:430: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:430"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:430"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1003
#AT_START_1004
at_fn_group_banner 1004 'mat73_uncompressed_extended_sparse.at:433' \
  "Write 2D sparse complex 64-bit integer complex array" "" 15
at_xfail=no
(
  $as_echo "1004. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:434" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:434"
$as_echo "mat73_uncompressed_extended_sparse.at:435" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:435"
$as_echo "mat73_uncompressed_extended_sparse.at:436" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:436"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:438: \$builddir/test_mat -v 7.3 -c int64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int64 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:438"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:438"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:474: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:474"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:474"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1004
#AT_START_1005
at_fn_group_banner 1005 'mat73_uncompressed_extended_sparse.at:477' \
  "Write 2D sparse complex 64-bit unsigned integer complex array" "" 15
at_xfail=no
(
  $as_echo "1005. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:478" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:478"
$as_echo "mat73_uncompressed_extended_sparse.at:479" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:479"
$as_echo "mat73_uncompressed_extended_sparse.at:480" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:480"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:482: \$builddir/test_mat -v 7.3 -c uint64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint64 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:482"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:482"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:518: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:518"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:518"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1005
#AT_START_1006
at_fn_group_banner 1006 'mat73_uncompressed_extended_sparse.at:521' \
  "Write 2D sparse complex 32-bit integer complex array" "" 15
at_xfail=no
(
  $as_echo "1006. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:522" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:522"
$as_echo "mat73_uncompressed_extended_sparse.at:523" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:523"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:525: \$builddir/test_mat -v 7.3 -c int32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int32 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:525"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:525"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:561: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:561"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:561"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1006
#AT_START_1007
at_fn_group_banner 1007 'mat73_uncompressed_extended_sparse.at:564' \
  "Write 2D sparse complex 32-bit unsigned integer complex array" "" 15
at_xfail=no
(
  $as_echo "1007. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:565" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:565"
$as_echo "mat73_uncompressed_extended_sparse.at:566" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:566"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:568: \$builddir/test_mat -v 7.3 -c uint32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint32 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:568"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:568"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:604: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:604"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:604"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1007
#AT_START_1008
at_fn_group_banner 1008 'mat73_uncompressed_extended_sparse.at:607' \
  "Write 2D sparse complex 16-bit integer complex array" "" 15
at_xfail=no
(
  $as_echo "1008. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:608" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:608"
$as_echo "mat73_uncompressed_extended_sparse.at:609" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:609"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:611: \$builddir/test_mat -v 7.3 -c int16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int16 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:611"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:611"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:647: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:647"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:647"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1008
#AT_START_1009
at_fn_group_banner 1009 'mat73_uncompressed_extended_sparse.at:650' \
  "Write 2D sparse complex 16-bit unsigned integer complex array" "" 15
at_xfail=no
(
  $as_echo "1009. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:651" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:651"
$as_echo "mat73_uncompressed_extended_sparse.at:652" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:652"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:654: \$builddir/test_mat -v 7.3 -c uint16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint16 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:654"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:654"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:690: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:690"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:690"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1009
#AT_START_1010
at_fn_group_banner 1010 'mat73_uncompressed_extended_sparse.at:693' \
  "Write 2D sparse complex 8-bit integer complex array" "" 15
at_xfail=no
(
  $as_echo "1010. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:694" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:694"
$as_echo "mat73_uncompressed_extended_sparse.at:695" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:695"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:697: \$builddir/test_mat -v 7.3 -c int8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c int8 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:697"
( $at_check_trace; $builddir/test_mat -v 7.3 -c int8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:697"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:733: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:733"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:733"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1010
#AT_START_1011
at_fn_group_banner 1011 'mat73_uncompressed_extended_sparse.at:736' \
  "Write 2D sparse complex 8-bit unsigned integer complex array" "" 15
at_xfail=no
(
  $as_echo "1011. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_uncompressed_extended_sparse.at:737" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:737"
$as_echo "mat73_uncompressed_extended_sparse.at:738" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_uncompressed_extended_sparse.at:738"
{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:740: \$builddir/test_mat -v 7.3 -c uint8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -c uint8 write_complex_sparse" "mat73_uncompressed_extended_sparse.at:740"
( $at_check_trace; $builddir/test_mat -v 7.3 -c uint8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:740"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_uncompressed_extended_sparse.at:776: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_uncompressed_extended_sparse.at:776"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_uncompressed_extended_sparse.at:776"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1011
#AT_START_1012
at_fn_group_banner 1012 'mat73_compressed_extended_sparse.at:1' \
  "Write 2D sparse single-precision array" "         " 16
at_xfail=no
(
  $as_echo "1012. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:2" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:2"
$as_echo "mat73_compressed_extended_sparse.at:3" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:3"
$as_echo "mat73_compressed_extended_sparse.at:4" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:4"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:6: \$builddir/test_mat -v 7.3 -z -c single write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_sparse" "mat73_compressed_extended_sparse.at:6"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:6"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: IEEE 754 single-precision
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:42: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:42"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:42"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1012
#AT_START_1013
at_fn_group_banner 1013 'mat73_compressed_extended_sparse.at:45' \
  "Write 2D sparse 64-bit integer array" "           " 16
at_xfail=no
(
  $as_echo "1013. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:46" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:46"
$as_echo "mat73_compressed_extended_sparse.at:47" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:47"
$as_echo "mat73_compressed_extended_sparse.at:48" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:48"
$as_echo "mat73_compressed_extended_sparse.at:49" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:49"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:51: \$builddir/test_mat -v 7.3 -z -c int64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_sparse" "mat73_compressed_extended_sparse.at:51"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:51"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:87: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:87"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:87"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1013
#AT_START_1014
at_fn_group_banner 1014 'mat73_compressed_extended_sparse.at:90' \
  "Write 2D sparse 64-bit unsigned integer array" "  " 16
at_xfail=no
(
  $as_echo "1014. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:91" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:91"
$as_echo "mat73_compressed_extended_sparse.at:92" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:92"
$as_echo "mat73_compressed_extended_sparse.at:93" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:93"
$as_echo "mat73_compressed_extended_sparse.at:94" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:94"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:96: \$builddir/test_mat -v 7.3 -z -c uint64 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_sparse" "mat73_compressed_extended_sparse.at:96"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:96"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:132: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:132"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:132"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1014
#AT_START_1015
at_fn_group_banner 1015 'mat73_compressed_extended_sparse.at:135' \
  "Write 2D sparse 32-bit integer array" "           " 16
at_xfail=no
(
  $as_echo "1015. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:136" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:136"
$as_echo "mat73_compressed_extended_sparse.at:137" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:137"
$as_echo "mat73_compressed_extended_sparse.at:138" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:138"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:140: \$builddir/test_mat -v 7.3 -z -c int32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_sparse" "mat73_compressed_extended_sparse.at:140"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:140"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:176: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:176"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:176"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1015
#AT_START_1016
at_fn_group_banner 1016 'mat73_compressed_extended_sparse.at:179' \
  "Write 2D sparse 32-bit unsigned integer array" "  " 16
at_xfail=no
(
  $as_echo "1016. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:180" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:180"
$as_echo "mat73_compressed_extended_sparse.at:181" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:181"
$as_echo "mat73_compressed_extended_sparse.at:182" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:182"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:184: \$builddir/test_mat -v 7.3 -z -c uint32 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_sparse" "mat73_compressed_extended_sparse.at:184"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:184"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:220: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:220"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:220"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1016
#AT_START_1017
at_fn_group_banner 1017 'mat73_compressed_extended_sparse.at:223' \
  "Write 2D sparse 16-bit integer array" "           " 16
at_xfail=no
(
  $as_echo "1017. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:224" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:224"
$as_echo "mat73_compressed_extended_sparse.at:225" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:225"
$as_echo "mat73_compressed_extended_sparse.at:226" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:226"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:228: \$builddir/test_mat -v 7.3 -z -c int16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_sparse" "mat73_compressed_extended_sparse.at:228"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:228"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:264: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:264"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:264"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1017
#AT_START_1018
at_fn_group_banner 1018 'mat73_compressed_extended_sparse.at:267' \
  "Write 2D sparse 16-bit unsigned integer array" "  " 16
at_xfail=no
(
  $as_echo "1018. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:268" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:268"
$as_echo "mat73_compressed_extended_sparse.at:269" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:269"
$as_echo "mat73_compressed_extended_sparse.at:270" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:270"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:272: \$builddir/test_mat -v 7.3 -z -c uint16 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_sparse" "mat73_compressed_extended_sparse.at:272"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:272"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:308: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:308"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:308"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1018
#AT_START_1019
at_fn_group_banner 1019 'mat73_compressed_extended_sparse.at:311' \
  "Write 2D sparse 8-bit integer array" "            " 16
at_xfail=no
(
  $as_echo "1019. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:312" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:312"
$as_echo "mat73_compressed_extended_sparse.at:313" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:313"
$as_echo "mat73_compressed_extended_sparse.at:314" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:314"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:316: \$builddir/test_mat -v 7.3 -z -c int8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_sparse" "mat73_compressed_extended_sparse.at:316"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:316"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, signed integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:352: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:352"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:352"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1019
#AT_START_1020
at_fn_group_banner 1020 'mat73_compressed_extended_sparse.at:355' \
  "Write 2D sparse 8-bit unsigned integer array" "   " 16
at_xfail=no
(
  $as_echo "1020. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:356" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:356"
$as_echo "mat73_compressed_extended_sparse.at:357" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:357"
$as_echo "mat73_compressed_extended_sparse.at:358" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:358"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:360: \$builddir/test_mat -v 7.3 -z -c uint8 write_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_sparse" "mat73_compressed_extended_sparse.at:360"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:360"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1
    (5,1)  5
    (2,2)  7
    (3,2)  8
    (4,2)  9
    (1,3)  11
    (5,3)  15
    (2,4)  17
    (3,4)  18
    (4,4)  19
    (1,5)  21
    (5,5)  25
    (2,6)  27
    (3,6)  28
    (4,6)  29
    (1,7)  31
    (5,7)  35
    (2,8)  37
    (3,8)  38
    (4,8)  39
    (1,9)  41
    (5,9)  45
    (2,10)  47
    (3,10)  48
    (4,10)  49
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:396: \$builddir/test_mat readvar test_write_sparse.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse.mat sparse_matrix" "mat73_compressed_extended_sparse.at:396"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:396"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1020
#AT_START_1021
at_fn_group_banner 1021 'mat73_compressed_extended_sparse.at:399' \
  "Write 2D sparse complex single-precision array" " " 16
at_xfail=no
(
  $as_echo "1021. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:400" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:400"
$as_echo "mat73_compressed_extended_sparse.at:401" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:401"
$as_echo "mat73_compressed_extended_sparse.at:402" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:402"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:404: \$builddir/test_mat -v 7.3 -z -c single write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c single write_complex_sparse" "mat73_compressed_extended_sparse.at:404"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c single write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:404"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: IEEE 754 single-precision
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:440: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:440"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:440"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1021
#AT_START_1022
at_fn_group_banner 1022 'mat73_compressed_extended_sparse.at:443' \
  "Write 2D sparse complex 64-bit integer complex array" "" 16
at_xfail=no
(
  $as_echo "1022. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:444" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:444"
$as_echo "mat73_compressed_extended_sparse.at:445" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:445"
$as_echo "mat73_compressed_extended_sparse.at:446" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:446"
$as_echo "mat73_compressed_extended_sparse.at:447" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:447"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:449: \$builddir/test_mat -v 7.3 -z -c int64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int64 write_complex_sparse" "mat73_compressed_extended_sparse.at:449"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:449"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:485: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:485"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:485"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1022
#AT_START_1023
at_fn_group_banner 1023 'mat73_compressed_extended_sparse.at:488' \
  "Write 2D sparse complex 64-bit unsigned integer complex array" "" 16
at_xfail=no
(
  $as_echo "1023. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:489" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:489"
$as_echo "mat73_compressed_extended_sparse.at:490" >"$at_check_line_file"
(test $HAVE_INT64 -eq 0) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:490"
$as_echo "mat73_compressed_extended_sparse.at:491" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:491"
$as_echo "mat73_compressed_extended_sparse.at:492" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:492"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:494: \$builddir/test_mat -v 7.3 -z -c uint64 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint64 write_complex_sparse" "mat73_compressed_extended_sparse.at:494"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint64 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:494"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 64-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:530: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:530"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:530"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1023
#AT_START_1024
at_fn_group_banner 1024 'mat73_compressed_extended_sparse.at:533' \
  "Write 2D sparse complex 32-bit integer complex array" "" 16
at_xfail=no
(
  $as_echo "1024. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:534" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:534"
$as_echo "mat73_compressed_extended_sparse.at:535" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:535"
$as_echo "mat73_compressed_extended_sparse.at:536" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:536"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:538: \$builddir/test_mat -v 7.3 -z -c int32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int32 write_complex_sparse" "mat73_compressed_extended_sparse.at:538"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:538"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:574: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:574"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:574"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1024
#AT_START_1025
at_fn_group_banner 1025 'mat73_compressed_extended_sparse.at:577' \
  "Write 2D sparse complex 32-bit unsigned integer complex array" "" 16
at_xfail=no
(
  $as_echo "1025. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:578" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:578"
$as_echo "mat73_compressed_extended_sparse.at:579" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:579"
$as_echo "mat73_compressed_extended_sparse.at:580" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:580"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:582: \$builddir/test_mat -v 7.3 -z -c uint32 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint32 write_complex_sparse" "mat73_compressed_extended_sparse.at:582"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint32 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:582"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 32-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:618: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:618"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:618"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1025
#AT_START_1026
at_fn_group_banner 1026 'mat73_compressed_extended_sparse.at:621' \
  "Write 2D sparse complex 16-bit integer complex array" "" 16
at_xfail=no
(
  $as_echo "1026. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:622" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:622"
$as_echo "mat73_compressed_extended_sparse.at:623" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:623"
$as_echo "mat73_compressed_extended_sparse.at:624" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:624"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:626: \$builddir/test_mat -v 7.3 -z -c int16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int16 write_complex_sparse" "mat73_compressed_extended_sparse.at:626"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:626"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:662: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:662"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:662"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1026
#AT_START_1027
at_fn_group_banner 1027 'mat73_compressed_extended_sparse.at:665' \
  "Write 2D sparse complex 16-bit unsigned integer complex array" "" 16
at_xfail=no
(
  $as_echo "1027. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:666" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:666"
$as_echo "mat73_compressed_extended_sparse.at:667" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:667"
$as_echo "mat73_compressed_extended_sparse.at:668" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:668"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:670: \$builddir/test_mat -v 7.3 -z -c uint16 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint16 write_complex_sparse" "mat73_compressed_extended_sparse.at:670"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint16 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:670"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 16-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:706: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:706"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:706"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1027
#AT_START_1028
at_fn_group_banner 1028 'mat73_compressed_extended_sparse.at:709' \
  "Write 2D sparse complex 8-bit integer complex array" "" 16
at_xfail=no
(
  $as_echo "1028. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:710" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:710"
$as_echo "mat73_compressed_extended_sparse.at:711" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:711"
$as_echo "mat73_compressed_extended_sparse.at:712" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:712"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:714: \$builddir/test_mat -v 7.3 -z -c int8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c int8 write_complex_sparse" "mat73_compressed_extended_sparse.at:714"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c int8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:714"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, signed integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:750: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:750"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:750"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1028
#AT_START_1029
at_fn_group_banner 1029 'mat73_compressed_extended_sparse.at:753' \
  "Write 2D sparse complex 8-bit unsigned integer complex array" "" 16
at_xfail=no
(
  $as_echo "1029. $at_setup_line: testing $at_desc ..."
  $at_traceon

$as_echo "mat73_compressed_extended_sparse.at:754" >"$at_check_line_file"
(test $EXTENDED_SPARSE -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:754"
$as_echo "mat73_compressed_extended_sparse.at:755" >"$at_check_line_file"
(test $MAT73 -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:755"
$as_echo "mat73_compressed_extended_sparse.at:756" >"$at_check_line_file"
(test $COMPRESSION_ZLIB -ne 1) \
  && at_fn_check_skip 77 "$at_srcdir/mat73_compressed_extended_sparse.at:756"
{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:758: \$builddir/test_mat -v 7.3 -z -c uint8 write_complex_sparse"
at_fn_check_prepare_dynamic "$builddir/test_mat -v 7.3 -z -c uint8 write_complex_sparse" "mat73_compressed_extended_sparse.at:758"
( $at_check_trace; $builddir/test_mat -v 7.3 -z -c uint8 write_complex_sparse
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:758"
$at_failed && at_fn_log_failure
$at_traceon; }

cat >expout <<'_ATEOF'
      Name: sparse_matrix
      Rank: 2
Dimensions: 5 x 10
Class Type: Sparse Array (complex)
 Data Type: 8-bit, unsigned integer
{
    (1,1)  1 + 51i
    (5,1)  5 + 55i
    (2,2)  7 + 57i
    (3,2)  8 + 58i
    (4,2)  9 + 59i
    (1,3)  11 + 61i
    (5,3)  15 + 65i
    (2,4)  17 + 67i
    (3,4)  18 + 68i
    (4,4)  19 + 69i
    (1,5)  21 + 71i
    (5,5)  25 + 75i
    (2,6)  27 + 77i
    (3,6)  28 + 78i
    (4,6)  29 + 79i
    (1,7)  31 + 81i
    (5,7)  35 + 85i
    (2,8)  37 + 87i
    (3,8)  38 + 88i
    (4,8)  39 + 89i
    (1,9)  41 + 91i
    (5,9)  45 + 95i
    (2,10)  47 + 97i
    (3,10)  48 + 98i
    (4,10)  49 + 99i
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/mat73_compressed_extended_sparse.at:794: \$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix"
at_fn_check_prepare_dynamic "$builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix" "mat73_compressed_extended_sparse.at:794"
( $at_check_trace; $builddir/test_mat readvar test_write_sparse_complex.mat sparse_matrix
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/mat73_compressed_extended_sparse.at:794"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1029
#AT_START_1030
at_fn_group_banner 1030 'struct_api.at:27' \
  "Create structure array" "                         " 17
at_xfail=no
(
  $as_echo "1030. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
      Name: b
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[0] {
}
      Name: c
      Rank: 2
Dimensions: 0 x 0
Class Type: Structure
 Data Type: Structure
Fields[2] {
      Name: field1
      Rank: 0
      Name: field2
      Rank: 0
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:64: \$builddir/test_mat struct_api_create"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_create" "struct_api.at:64"
( $at_check_trace; $builddir/test_mat struct_api_create
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:64"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1030
#AT_START_1031
at_fn_group_banner 1031 'struct_api.at:67' \
  "Set structure field" "                            " 17
at_xfail=no
(
  $as_echo "1031. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 2 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
3 
4 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
}
      Name: field2
      Rank: 2
Dimensions: 1 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
8 9 
}
}
      Name: b
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 1 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
8 9 
}
      Name: field2
      Rank: 2
Dimensions: 1 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
}
      Name: field1
      Rank: 2
Dimensions: 3 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
3 
4 
}
      Name: field2
      Rank: 2
Dimensions: 2 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
1 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:155: \$builddir/test_mat struct_api_setfield"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_setfield" "struct_api.at:155"
( $at_check_trace; $builddir/test_mat struct_api_setfield
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:155"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1031
#AT_START_1032
at_fn_group_banner 1032 'struct_api.at:158' \
  "Get structure fieldnames" "                       " 17
at_xfail=no
(
  $as_echo "1032. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
Fieldnames of "a":
    0. field1
    1. field2
    2. field3
    3. field4
Fieldnames of "b":
  None
Fieldnames of "NULL":
  None
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:171: \$builddir/test_mat struct_api_getfieldnames"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_getfieldnames" "struct_api.at:171"
( $at_check_trace; $builddir/test_mat struct_api_getfieldnames
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:171"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1032
#AT_START_1033
at_fn_group_banner 1033 'struct_api.at:174' \
  "Add fields to structure array" "                  " 17
at_xfail=no
(
  $as_echo "1033. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 1
Class Type: Structure
 Data Type: Structure
Fields[4] {
      Name: field1
      Rank: 2
Dimensions: 2 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
1 
}
      Name: field2
      Rank: 2
Dimensions: 3 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
3 
4 
}
      Name: field1
      Rank: 2
Dimensions: 1 x 3
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 6 7 
}
      Name: field2
      Rank: 2
Dimensions: 1 x 2
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
8 9 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:220: \$builddir/test_mat struct_api_addfield"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_addfield" "struct_api.at:220"
( $at_check_trace; $builddir/test_mat struct_api_addfield
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:220"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1033
#AT_START_1034
at_fn_group_banner 1034 'struct_api.at:223' \
  "Linearly index a structure" "                     " 17
at_xfail=no
(
  $as_echo "1034. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 4 x 1
Class Type: Structure
 Data Type: Structure
Fields[12] {
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 13i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
4 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
16 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
4 + 16i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
7 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
19 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
7 + 19i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
10 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
22 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
10 + 22i 
}
}
      Name: a
      Rank: 2
Dimensions: 3 x 1
Class Type: Structure
 Data Type: Structure
Fields[9] {
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
12 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
0 + 12i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
13 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 13i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
14 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 14i 
}
}
      Name: a
      Rank: 2
Dimensions: 3 x 1
Class Type: Structure
 Data Type: Structure
Fields[9] {
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
12 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
0 + 12i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
4 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
16 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
4 + 16i 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
8 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
20 
}
      Name: z
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
8 + 20i 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:488: \$builddir/test_mat struct_api_getlinear"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_getlinear" "struct_api.at:488"
( $at_check_trace; $builddir/test_mat struct_api_getlinear
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:488"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1034
#AT_START_1035
at_fn_group_banner 1035 'struct_api.at:491' \
  "Index structure via dimension slices" "           " 17
at_xfail=no
(
  $as_echo "1035. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 4
Dimensions: 1 x 2 x 3 x 2
Class Type: Structure
 Data Type: Structure
Fields[24] {
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
65 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-65 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
68 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-68 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
89 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-89 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
92 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-92 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
113 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-113 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
116 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-116 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
305 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-305 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
308 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-308 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
329 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-329 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
332 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-332 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
353 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-353 
}
      Name: r
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
356 
}
      Name: c
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
-356 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/struct_api.at:694: \$builddir/test_mat struct_api_get"
at_fn_check_prepare_dynamic "$builddir/test_mat struct_api_get" "struct_api.at:694"
( $at_check_trace; $builddir/test_mat struct_api_get
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/struct_api.at:694"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1035
#AT_START_1036
at_fn_group_banner 1036 'cell_api.at:27' \
  "Set cell array elements" "                        " 17
at_xfail=no
(
  $as_echo "1036. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Name: a
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
3 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
4 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 
}
}
      Name: a
      Rank: 2
Dimensions: 2 x 3
Class Type: Cell Array
 Data Type: Cell Array
{
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
7 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
8 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
3 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
9 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 
}
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/cell_api.at:129: \$builddir/test_mat cell_api_set"
at_fn_check_prepare_dynamic "$builddir/test_mat cell_api_set" "cell_api.at:129"
( $at_check_trace; $builddir/test_mat cell_api_set
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/cell_api.at:129"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1036
#AT_START_1037
at_fn_group_banner 1037 'cell_api.at:132' \
  "Linearly index cell array" "                      " 17
at_xfail=no
(
  $as_echo "1037. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
0 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
3 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
4 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
6 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
7 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
0 + 4i 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 5i 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 6i 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
3 + 7i 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
1 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
5 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
1 + 5i 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
2 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
6 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array (complex)
 Data Type: IEEE 754 double-precision
{
2 + 6i 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/cell_api.at:262: \$builddir/test_mat  cell_api_getlinear"
at_fn_check_prepare_dynamic "$builddir/test_mat  cell_api_getlinear" "cell_api.at:262"
( $at_check_trace; $builddir/test_mat  cell_api_getlinear
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/cell_api.at:262"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1037
#AT_START_1038
at_fn_group_banner 1038 'cell_api.at:265' \
  "Index cell array via dimension slices" "          " 17
at_xfail=no
(
  $as_echo "1038. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >expout <<'_ATEOF'
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
65 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
68 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
89 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
92 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
113 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
116 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
305 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
308 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
329 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
332 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
353 
}
      Rank: 2
Dimensions: 1 x 1
Class Type: Double Precision Array
 Data Type: IEEE 754 double-precision
{
356 
}
_ATEOF

windows_eol=no
case $host_os in
  mingw*)
    windows_eol=yes
    ;;
  *)
    if test "x$with_msvc_ld" = "xyes"; then
      windows_eol=yes
    fi
    ;;
esac
if test "$windows_eol" = "yes"; then
  while read -r l; do printf "%s\r\n" "$l"; done < expout > expout.t
  mv -f expout.t expout
fi

{ set +x
$as_echo "$at_srcdir/cell_api.at:353: \$builddir/test_mat  cell_api_getcells"
at_fn_check_prepare_dynamic "$builddir/test_mat  cell_api_getcells" "cell_api.at:353"
( $at_check_trace; $builddir/test_mat  cell_api_getcells
) >>"$at_stdout" 2>>"$at_stderr"
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
$at_diff expout "$at_stdout" || at_failed=:
at_fn_check_status 0 $at_status "$at_srcdir/cell_api.at:353"
$at_failed && at_fn_log_failure
$at_traceon; }

  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1038
